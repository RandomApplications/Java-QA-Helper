/*
 *
 * MIT License
 *
 * Copyright (c) 2018 PCs for People
 * Copyright (c) 2018-2025 Free Geek
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

 /*
 * App Icon is “Robot Face” from Twemoji (https://github.com/twitter/twemoji) by Twitter (https://twitter.com)
 * Licensed under CC-BY 4.0 (https://creativecommons.org/licenses/by/4.0/)
 */
package GUI;

import Utilities.*;
import com.formdev.flatlaf.*;
import com.formdev.flatlaf.util.UIScale;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.awt.desktop.AboutEvent;
import java.awt.event.ActionEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.font.TextAttribute;
import java.io.*;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import javax.imageio.ImageIO;
import javax.sound.sampled.*;
import javax.swing.*;
import javax.swing.text.NumberFormatter;
import javax.swing.text.StyleContext;
import org.apache.commons.text.StringEscapeUtils;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 * CHANGE LOG
 *
 * @author Stefani Monson (of PCs for People) & Pico Mitchell (of Free Geek)
 *
 * 1/2/2018 - Changed substring of serial for MAC from 30 to 24 so that it returns the entire serial number instead of last 6 digits. - SMM
 *
 * 1/29/2018 - Fixed the dmidecode command to run properly when determining the product name and serial number of the computer. - SMM
 *
 * 12/06/2018 - 1/16/2019 - Changed so so much. - Pico
 *
 * 1/17/2018 - 3/18/2019 - Added hardware testing and made everything even better. - Pico
 *
 * 8/12/2019 - Started adding Windows support. - Pico
 *
 */
public class QAHelper extends javax.swing.JFrame {

    // TODO: REMEMBER TO UPDATE VERSION WHEN CHANGES ARE MADE (Format is Year.Month.Day-Revision)
    // Version is stored in separate "qa-helper-version.txt" for easy extraction from other scripts and is loaded in QAHelper().
    String appVersion = "N/A";

    // ENVIRONMENT DETECTION SETUP - These are set in QAHelper()
    boolean isLinux = false;
    float linuxInitialScaleFactor = 1.0f;
    boolean isLinuxMATE = false;
    boolean isLinuxLiveBoot = false;
    boolean isLinuxBootedFromNetwork = false;
    boolean isLinuxBootedToRAM = false;
    boolean isLinuxUbiquityMode = false;
    boolean isLinuxFirstLaunch = false;

    boolean isMacOS = false;
    boolean isMacOSsierraOrNewer = false;
    boolean isMacOSmojaveOrNewer = false;
    boolean isMacTestBoot = false;

    boolean isWindows = false;
    boolean isWindowsHomeEdition = false;
    boolean isWindows11 = false;
    boolean isWindowsPE = false; // Windows Preinstallation Environment
    boolean isWindowsRE = false; // Windows Recovery Environment (which we now use instead of WinPE and has more features like Audio and Wi-Fi)

    //VARIABLE DECLARATIONS
    boolean actionsEnabled = true;
    boolean isFirstLoad = true;
    boolean isPeripheralTestMode = false;
    String username = "N/A";
    HashMap<String, String> loggedInUserInfo = new HashMap<>();
    String pid = "N/A";
    String currentConditionGrade = "N/A";
    boolean allowSettingConditionGrade = false;
    String currentNotes = "";
    boolean conditionAndNotesUpdated = false;
    boolean lastConditionAndNotesSaveFailed = false;
    boolean isReloading = false;
    static boolean isTestMode = false;
    boolean gotTestModeFromLog = false;
    boolean isLoggedIn = false;
    boolean hideLoginAndTasks = false;
    boolean forceShowAllTests = false;
    String lastStatus = "UNKNOWN STATUS";
    boolean undidOemConfigAfterLastStatus = false;
    String displayPrice = "";
    boolean isSold = false;

    String detectedDeviceType = "UNKNOWN";
    String manualDeviceType = "";
    boolean manuallySetDeviceType = false;
    boolean deviceTypeIsLaptop = false;
    boolean deviceTypeHasScreen = false;
    boolean deviceTypeIsMotherboard = false;
    ArrayList<String> validDeviceTypes = new ArrayList<>(Arrays.asList("Laptop", "Desktop", "All-in-One", "Motherboard"));

    boolean isCPUverified = false;
    boolean isDriveHealthVerified = false;
    boolean isDiscDriveVerified = false;
    boolean isInternetVerified = false;
    boolean isScreenVerified = false;
    boolean isAudioVerified = false;
    boolean isMicrophoneVerified = false;
    boolean isCameraVerified = false;
    boolean isKeyboardVerified = false;
    boolean isMouseVerified = false;

    boolean isBIOSverified = false;
    boolean isPortsVerified = false;
    boolean isDriversVerified = false;
    boolean isUpdatesVerified = false;
    boolean isWindowsLicenseVerified = false;
    boolean isRemoteManagementVerified = false;

    int speakerTestCount = 0;
    int headphoneTestCount = 0;

    boolean didSolidColorsScreenTest = false;
    boolean didTouchscreenTest = false;

    String linuxBuildInfoPath = "/usr/local/share/build-info/";
    String macBuildInfoPath = "/Users/Shared/Build Info/";
    String windowsBuildInfoPath = "\\Install\\"; // TODO: Choose a better Windows folder at some point.
    String helperLogFilePath = linuxBuildInfoPath + "qa-helper-log.txt"; // This will get changed in QAHelper() after we know if we're running on Linux or Mac

    long pidDashKeyTypedMillis = 0;
    long pidLastDigitAfterDashKeyTypedMillis = 0;
    String lastPIDscannedOrConfirmed = "";

    long ignoreWindowMovesUntilTime = 0;
    boolean windowMoved = false;
    String keyboardTestJarTempPath;
    static String adminPassword = "*UNKNOWN*";
    static String adminPasswordQuotedForShell = "'" + adminPassword + "'";
    static GetComputerSpecs computerSpecs;
    QAHelper qaHelperWindow = this;
    QALoadingWindow loadingWindow = new QALoadingWindow();
    StatusHistoryWindow historyWindow;
    QACreditsWindow creditsWindow = new QACreditsWindow();
    PCsCRMManager PCsCRMManager = new PCsCRMManager();

    private PrivateStrings privateStrings = new PrivateStrings();
    String configPassword = privateStrings.getConfigPassword();
    LinkedHashMap<String, String> fgConditionGradesAndDescriptions = privateStrings.getFreeGeekConditionGradesAndDescriptions();

    float defaultTextSize = 13;

    // These default colors will be overridden with colors from the selected FlatLaf theme.
    // These default colors are from the Twemoji solid color squares.
    Color defaultColor = Color.BLACK;

    Color verifiedColor = new java.awt.Color(94, 173, 236); // Blue
    String verifiedColorHTML = "#" + Integer.toHexString(verifiedColor.getRGB()).substring(2);

    Color successColor = new java.awt.Color(123, 176, 93); // Green
    String successColorHTML = "#" + Integer.toHexString(successColor.getRGB()).substring(2);

    Color warningColor = new java.awt.Color(240, 143, 38); // Orange
    String warningColorHTML = "#" + Integer.toHexString(warningColor.getRGB()).substring(2);

    Color errorColor = new java.awt.Color(216, 48, 72); // Red
    String errorColorHTML = "#" + Integer.toHexString(errorColor.getRGB()).substring(2);

    Color attentionColor = new java.awt.Color(169, 144, 212); // Purple
    String attentionColorHTML = "#" + Integer.toHexString(attentionColor.getRGB()).substring(2);

    boolean themeUpdated = false;

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        String osName = System.getProperty("os.name");
        final boolean isMacOS = (osName.startsWith("Mac OS X") || osName.startsWith("macOS"));
        final boolean isLinux = osName.startsWith("Linux");
        final boolean isWindows = osName.startsWith("Windows");

        if (isMacOS) {
            System.setProperty("apple.awt.application.name", "QA Helper"); // To not show "QAHelper" class name in App menu.
            System.setProperty("apple.laf.useScreenMenuBar", "true");
            System.setProperty("apple.awt.application.appearance", "system"); // Allow titlebar to change to match light/dark mode (https://github.com/JFormDesigner/FlatLaf/commit/3facbc0900d4330b9aadc44077d3f7fb7e686074#diff-6178310587a0e4e1bf1132df43249c4f95d84e7b7e30d4762918c9d8bcfe1851).
        }

        try {
            String launchPath = new File(QAHelper.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getPath();
            if (!launchPath.endsWith(".app/Contents/Java/QA_Helper.jar") && !launchPath.endsWith(".app/Contents/app/QA_Helper.jar")) {
                Taskbar.getTaskbar().setIconImage(ImageIO.read(QAHelper.class.getResource("/Resources/Twemoji/RobotFace128.png"))); // For macOS Dock when run as JAR (not as compiled app bundle since it would override the actual app icon): https://stackoverflow.com/a/56924202
            }
        } catch (URISyntaxException | IllegalArgumentException | IOException | UnsupportedOperationException | SecurityException setTaskbarImageIconException) {

        }

        boolean shouldSetSystemLookAndFeel = false; // This is here just for easy debugging.

        if (!shouldSetSystemLookAndFeel) {
            boolean osIsDarkMode = false;

            if (isMacOS) {
                String[] macOSversionParts = System.getProperty("os.version").replaceAll("[^0-9.]", "").split("\\.");
                if ((Integer.parseInt(macOSversionParts[0]) >= 11) || (Integer.parseInt(macOSversionParts[1]) >= 14)) {
                    osIsDarkMode = new CommandReader(new String[]{"/usr/bin/defaults", "read", "NSGlobalDomain", "AppleInterfaceStyle"}).getFirstOutputLine().toLowerCase().equals("dark");
                }
            } else if (isLinux) {
                String cinnamonGtkThemeName = new CommandReader(new String[]{"/usr/bin/gsettings", "get", "org.cinnamon.desktop.interface", "gtk-theme"}).getFirstOutputLine().toLowerCase();
                osIsDarkMode = (cinnamonGtkThemeName.contains("-dark") && !cinnamonGtkThemeName.contains("-darker"));
            } else if (isWindows) {
                osIsDarkMode = !new CommandReader(new String[]{"\\Windows\\System32\\reg.exe", "query", "HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize", "/v", "AppsUseLightTheme"}).getFirstOutputLineContaining("0x0").isEmpty();
            }

            try {
                System.setProperty("flatlaf.uiScale.allowScaleDown", "true"); // https://www.formdev.com/flatlaf/system-properties/

                FlatLaf defaultLaf = (osIsDarkMode ? new FlatDarkLaf() : new FlatLightLaf());
                UIManager.setLookAndFeel(isMacOS ? (osIsDarkMode ? new com.formdev.flatlaf.themes.FlatMacDarkLaf() : new com.formdev.flatlaf.themes.FlatMacLightLaf()) : defaultLaf);

                // All FlatLaf options:
                //  https://github.com/JFormDesigner/FlatLaf/tree/main/flatlaf-theme-editor/src/main/resources/com/formdev/flatlaf/themeeditor/FlatLafUIKeys.txt
                //  https://github.com/JFormDesigner/FlatLaf/tree/main/flatlaf-core/src/main/resources/com/formdev/flatlaf
                UIManager.put("ScrollPane.smoothScrolling", true);
                UIManager.put("TabbedPane.tabAreaAlignment", "fill");
                UIManager.put("TabbedPane.tabArc", 0);
                UIManager.put("TabbedPane.showTabSeparators", true);
                UIManager.put("Button.minimumWidth", 0); // Allow buttons to get smaller than the default minimum of 72px wide when font size is reduced. (https://github.com/JFormDesigner/FlatLaf/blob/fb44c8fbe4ea607a644670946e56897323e2eac1/flatlaf-core/src/main/resources/com/formdev/flatlaf/FlatLaf.properties#L159)
                UIManager.put("Button.default.boldText", false); // To not bold button text on focus with FlatDarkLaf theme (or FlatMac themes).
                UIManager.put("Button.defaultButtonFollowsFocus", true); // So that Enter key works properly to select focused button across all platforms (even macOS where Enter/Return never worked for focused button).
                UIManager.put("OptionPane.maxCharactersPerLine", Integer.MAX_VALUE); // Don't want FlatLaf to wrap our lines since line breaks were all set intentionally before using FlatLaf.
                UIManager.put("OptionPane.isYesLast", !isWindows); // FlatLaf properly sets isYesLast as true for macOS and false for Windows, but also sets false for Linux when it should actually be true for Linux Mint.
                UIManager.put("OptionPane.sameSizeButtons", false);
                UIManager.put("PasswordField.showCapsLock", true);
                UIManager.put("PasswordField.showRevealButton", true);

                Font defaultFont = (Font) UIManager.get("defaultFont");
                if (isMacOS) {
                    // When using the FlatMac themes along with "Button.defaultButtonFollowsFocus" being set to "true" (which offers great functionality),
                    // the bright blue highlighted default button moving around the window looks bad to me, but the rest of the "FlatMac" theme changes are good.
                    // So, set the following theme values to the default values from the non-Mac themes to continue using the default FlatLaf button style with the FlatMac themes.
                    // These values were determined by seeing what was changed by comparing these dumps: https://github.com/JFormDesigner/FlatLaf/tree/main/flatlaf-testing/dumps/uidefaults
                    String[] resetUIDefaults = new String[]{"Component.focusWidth", "Component.innerFocusWidth", "Component.innerOutlineWidth",
                        "Button.default.borderWidth", "Button.default.foreground", "Button.default.background", "Button.default.focusedBackground"};
                    for (String thisUIDefault : resetUIDefaults) {
                        UIManager.put(thisUIDefault, defaultLaf.getDefaults().get(thisUIDefault));
                    }

                    // Copying font setting technique from https://github.com/JFormDesigner/FlatLaf/blob/3a784375d087c0e19903c77eb2936400cf38712e/flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java#L495
                    // Set "Helvetica Neue" as font on all macOS versions for consistency (FlatLaf already uses it for Catalina). NOTE: This is still required even with new FlatMac theme.
                    // Would rather use system font of ".AppleSystemUIFont" or ".SF NS Text" but both have issues with Kerning and Tracking (letter spacing).
                    // Basically the San Francisco system fonts just look too wide. 
                    // https://github.com/JFormDesigner/FlatLaf/blob/3a784375d087c0e19903c77eb2936400cf38712e/flatlaf-core/src/main/java/com/formdev/flatlaf/FlatLaf.java#L442
                    // Related info about this issue: https://github.com/weisJ/darklaf/issues/128
                    if ((defaultFont == null) || !defaultFont.getFamily().equals("Helvetica Neue")) {
                        defaultFont = StyleContext.getDefaultStyleContext().getFont("Helvetica Neue", ((defaultFont == null) ? Font.PLAIN : defaultFont.getStyle()), ((defaultFont == null) ? 13 : defaultFont.getSize()));
                    }
                } else if (isWindows) {
                    UIManager.put("TitlePane.unifiedBackground", false); // I think the window looks better with a different color title bar on Windows (especially when menus are included in the titlebar).

                    if (osName.startsWith("Windows 11")) {
                        // Make the buttons slightly more rounded on Windows 11 to match the new button style.
                        UIManager.put("Button.arc", 8);
                        UIManager.put("Component.arc", 8);
                        UIManager.put("CheckBox.arc", 8);
                    } else {
                        // Square buttons on Windows 10 (but not Windows 11) to look a little more native. (https://www.formdev.com/flatlaf/customizing/#corners)
                        UIManager.put("Button.arc", 0);
                        UIManager.put("Component.arc", 0);
                        UIManager.put("CheckBox.arc", 0);
                    }

                    // No longer need any Decorations or Font changes for WinPE, since they are now built in to FlatLaf: https://github.com/JFormDesigner/FlatLaf/issues/279
                } else if (isLinux) {
                    // Unified title and toolbar can now be enabled on Linux as of FlatLaf 2.1: https://github.com/JFormDesigner/FlatLaf/releases/tag/2.1
                    JFrame.setDefaultLookAndFeelDecorated(true);
                    // DO NOT use window decorations for JDialog since decorated windows don't get shadows and the dialogs on top of the main window with no shadow looks weird.
                    // TODO: Re-asses that decision if decorated windows get proper shadows in the future.

                    UIManager.put("TitlePane.unifiedBackground", false); // I think the window looks better with a different color title bar on Linux (especially when menus are included in the titlebar).
                }

                if (defaultFont != null) {
                    UIManager.put("defaultFont", defaultFont);
                }
            } catch (UnsupportedLookAndFeelException setFlatLafException) {
                shouldSetSystemLookAndFeel = true;
            }
        }

        if (shouldSetSystemLookAndFeel) {
            if (isLinux) {
                System.setProperty("jdk.gtk.version", "2.2"); // Java 11 and newer defaults to GTK 3 which looks bad for some reason (still looks bad with Java 15). Setting to GTK 2.2 must be done before getSystemLookAndFeelClassName()
            }

            try {
                String lookAndFeel = UIManager.getSystemLookAndFeelClassName();

                if (!lookAndFeel.contains(".apple") && !lookAndFeel.contains(".gtk") && !lookAndFeel.contains(".windows")) {
                    String backupLookAndFeel = lookAndFeel;

                    for (UIManager.LookAndFeelInfo thisLookAndFeelInfo : UIManager.getInstalledLookAndFeels()) {
                        String thisLookAndFeelClassName = thisLookAndFeelInfo.getClassName();

                        if (thisLookAndFeelClassName.contains(".gtk")) {
                            lookAndFeel = thisLookAndFeelClassName;
                        } else if (thisLookAndFeelClassName.contains(".nimbus")) {
                            backupLookAndFeel = thisLookAndFeelClassName;
                        }
                    }

                    if (!lookAndFeel.contains(".gtk")) {
                        lookAndFeel = backupLookAndFeel;
                    }
                }

                UIManager.setLookAndFeel(lookAndFeel);
            } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException setLookAndFeelException) {

            }
        }

        java.awt.EventQueue.invokeLater(() -> {
            int multipleInstanceMinimum = (isMacOS ? 0 : 1);

            try {
                boolean multipleInstancesRunning;
                if (isWindows) {
                    multipleInstancesRunning = (new CommandReader(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "(Get-CimInstance Win32_Process -Filter \\\"Name LIKE 'java%.exe' AND CommandLine LIKE '%QA_Helper.jar%'\\\" -Property Name,CommandLine).CommandLine"}).getOutputLines().length > multipleInstanceMinimum);
                } else {
                    // GUI.QAHelper catches when it's run from NetBeans, QA_Helper.jar catches when the .jar is launched, /QA Helper.app catches when the Mac app is run. Ignore any non-java or non-"QA Helper.app" processes to ignore sudo launches or bash scripts (such as when auto-updating), etc.
                    multipleInstancesRunning = (new CommandReader(new String[]{"/usr/bin/pgrep", "-fl", "(GUI\\.QAHelper|QA_Helper\\.jar|/QA Helper\\.app)"}).getOutputLinesContaining((isMacOS ? new String[]{"QA Helper.app/Contents/MacOS/QA Helper", "/java"} : new String[]{" java"})).length > multipleInstanceMinimum);
                }

                if (multipleInstancesRunning) {
                    if (isMacOS) {
                        // Show alert instead of focusing on macOS because it's better when I'm debugging and it's also more complicated to focus the running instance when it may not be a .app
                        JOptionPane.showMessageDialog(null, "<html><b>Only one instance of <i>QA Helper</i> is allowed to run at a time.</b></html>", "QA Helper  —  Launch Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        try {
                            Runtime.getRuntime().exec((isWindows
                                    // Based On: https://stackoverflow.com/a/58548853
                                    // This new method is much better than the previous AppActivate method, but still also do the AppActive method since it seems to maybe not work as well on Windows 11.
                                    ? new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "$focusWindowFunctionTypes = Add-Type -PassThru -Name FocusWindow -MemberDefinition @'\n"
                                        + "[DllImport(\\\"user32.dll\\\")] public static extern bool SetForegroundWindow(IntPtr hWnd);\n"
                                        + "[DllImport(\\\"user32.dll\\\")] public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);\n"
                                        + "[DllImport(\\\"user32.dll\\\")] public static extern bool IsIconic(IntPtr hWnd);\n"
                                        + "'@\n"
                                        + "$qaHelperPID = (Get-CimInstance Win32_Process -Filter \\\"Name LIKE 'java%.exe' AND CommandLine LIKE '%QA_Helper.jar%'\\\" -Property ProcessId).ProcessId\n"
                                        + "if ($qaHelperPID) {\n"
                                        + "$qaHelperWindowHandle = (Get-Process | Where-Object Id -eq $qaHelperPID).MainWindowHandle\n"
                                        + "if ($qaHelperWindowHandle) {\n"
                                        + "$focusWindowFunctionTypes::SetForegroundWindow($qaHelperWindowHandle) | Out-Null\n"
                                        + "if ($focusWindowFunctionTypes::IsIconic($qaHelperWindowHandle)) {\n"
                                        + "$focusWindowFunctionTypes::ShowWindow($qaHelperWindowHandle, 9) | Out-Null\n"
                                        + "}\n"
                                        + "}\n"
                                        + "}\n"
                                        + "$WshellScript = (New-Object -ComObject Wscript.Shell); if (-not $WshellScript.AppActivate('QA Helper')) { $WshellScript.AppActivate('QA Helper  —  Loading') }"
                                    }
                                    : new String[]{"/bin/sh", "-c", "/usr/bin/wmctrl -Fa 'QA Helper' || /usr/bin/wmctrl -Fa 'QA Helper  —  Loading'"})).waitFor();
                        } catch (IOException | InterruptedException focusQAHelperException) {
                            System.out.println("focusQAHelperException: " + focusQAHelperException);
                        }
                    }

                    System.exit(0);
                } else {
                    // TODO: THIS ISSUE WAS ACTUALLY CAUSED BY METAL RENDERING BECOMING DEFAULT ON JAVA 19
//                    if (isMacOS && System.getProperty("java.version").startsWith("19")) {
//                        // NOTE: Starting with Java 19 on macOS, if the window is loaded when the screen is asleep, it will not have any contents displayed within it.
//                        // The buttons will still work, but nothing I seem to do will get the window to properly display it's contents once this happens.
//                        // I've narrowed this to a new issue in Java 19 and replicated it with other JAR applets as well (that both do and don't use FlatLaf, so it's not a FlatLaf issue) and seen that it doesn't happen when run with Java 18.
//                        // So, as a workaround, detect if the screen is asleep and attempt to wake the screen with "caffeinate" before loading the window.
//                        // If for some reason "caffeinate" doesn't work and the screen doesn't wake, then this loop will just wait until the screen has been been woken up manually before loading the window.
//                        // TODO: Re-test if this hacky workaround is still needed in Java 20+
//
//                        while (new CommandReader(new String[]{"/usr/bin/osascript", "-l", "JavaScript", "-e", "ObjC.import('CoreGraphics'); $.CGDisplayIsActive($.CGMainDisplayID())"}).getFirstOutputLine().equals("0")) {
//                            try {
//                                Runtime.getRuntime().exec(new String[]{"/usr/bin/caffeinate", "-ut", "1"}).waitFor(); // Wait for the 1 second "caffeinate" timeout so the screen is fully awake before continuing,
//                                TimeUnit.SECONDS.sleep(1); // AND ALSO sleep an extra second to really be sure the screen is awake before loading the window.
//                            } catch (IOException | InterruptedException wakeMacUpException) {
//                                if (isTestMode) {
//                                    System.out.println("wakeMacUpException: " + wakeMacUpException);
//                                }
//                            }
//                        }
//                    }

                    new QAHelper();
                }
            } catch (Exception loadAppException) {
                System.out.println("loadAppException: " + loadAppException);
                //System.out.println("Printing loadAppException Stack Trace:");
                //loadAppException.printStackTrace();

                JOptionPane.showMessageDialog(null, "<html><b>Error Loading <i>QA Helper</i></b></html>", "QA Helper  —  Load Error", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
            }
        });

        Runtime.getRuntime().addShutdownHook(new Thread() {
            @Override
            public void run() {
                if (isLinux) {
                    // Be sure to kill acpi_listen on Linux even if not fully loaded since it is launched right on launch.
                    try {
                        Runtime.getRuntime().exec(new String[]{"/usr/bin/killall", "acpi_listen"});
                    } catch (IOException quitAcpiListenException) {
                        if (isTestMode) {
                            System.out.println("quitAcpiListenException: " + quitAcpiListenException);
                        }
                    }

                    if (new File("/tmp/qa_helper-acpi_listener.txt").exists()) {
                        new File("/tmp/qa_helper-acpi_listener.txt").delete();
                    }
                }

                if (computerSpecs != null) {
                    // Don't need to bother quitting anything if we're still in first load.

                    if (isLinux) {
                        String possibleSudo = (!adminPassword.equals("*UNKNOWN*") ? "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk " : "");

                        try {
                            Runtime.getRuntime().exec(new String[]{"/usr/bin/killall", "yes"});
                        } catch (IOException quitYesException) {
                            if (isTestMode) {
                                System.out.println("quitYesException: " + quitYesException);
                            }
                        }

                        try {
                            Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", possibleSudo + "/usr/bin/killall stress-ng"});
                        } catch (IOException quitStressNgException) {
                            if (isTestMode) {
                                System.out.println("quitStressNgException: " + quitStressNgException);
                            }
                        }

                        try {
                            Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", possibleSudo + "/usr/bin/killall stress-ng-cpu"});
                        } catch (IOException quitStressNgCpuException) {
                            if (isTestMode) {
                                System.out.println("quitStressNgCpuException: " + quitStressNgCpuException);
                            }
                        }

                        try {
                            Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", possibleSudo + "/usr/bin/killall mate-system-monitor"});
                        } catch (IOException quitMateSystemMonitorException) {
                            if (isTestMode) {
                                System.out.println("quitMateSystemMonitorException: " + quitMateSystemMonitorException);
                            }
                        }

                        try {
                            Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", possibleSudo + "/usr/bin/killall gnome-system-monitor"});
                        } catch (IOException quitGnomeSystemMonitorException) {
                            if (isTestMode) {
                                System.out.println("quitGnomeSystemMonitorException: " + quitGnomeSystemMonitorException);
                            }
                        }

                        try {
                            Runtime.getRuntime().exec(new String[]{"/usr/bin/killall", "aplay"});
                        } catch (IOException quitAplayException) {
                            if (isTestMode) {
                                System.out.println("quitAplayException: " + quitAplayException);
                            }
                        }

                        try {
                            Runtime.getRuntime().exec(new String[]{"/usr/bin/killall", "paplay"});
                        } catch (IOException quitPaplayException) {
                            if (isTestMode) {
                                System.out.println("quitPaplayException: " + quitPaplayException);
                            }
                        }

                        try {
                            Runtime.getRuntime().exec(new String[]{"/usr/bin/killall", "arecord"});
                        } catch (IOException quitArecordException) {
                            if (isTestMode) {
                                System.out.println("quitArecordException: " + quitArecordException);
                            }
                        }

                        try {
                            File micTestRecordingFile = new File(System.getProperty("java.io.tmpdir"), "qa_helper-mic_test.wav");
                            if (micTestRecordingFile.exists()) {
                                micTestRecordingFile.delete();
                            }
                        } catch (Exception deleteRecordingException) {
                            if (isTestMode) {
                                System.out.println("deleteRecordingException: " + deleteRecordingException);
                            }
                        }

                        try {
                            Runtime.getRuntime().exec(new String[]{"/usr/bin/killall", "cheese"});
                        } catch (IOException quitCheeseException) {
                            if (isTestMode) {
                                System.out.println("quitCheeseException: " + quitCheeseException);
                            }
                        }

                        try {
                            Runtime.getRuntime().exec(new String[]{"/usr/bin/killall", "webcamoid"});
                        } catch (IOException quitWebcamoidException) {
                            if (isTestMode) {
                                System.out.println("quitWebcamoidException: " + quitWebcamoidException);
                            }
                        }

                        try {
                            Runtime.getRuntime().exec(new String[]{"/usr/bin/pkill", "-f", "qa_helper-Keyboard_Test.*\\.jar"});
                        } catch (IOException quitKeyboardTestException) {
                            if (isTestMode) {
                                System.out.println("quitKeyboardTestException: " + quitKeyboardTestException);
                            }
                        }
                    } else if (isMacOS) {
                        try {
                            Runtime.getRuntime().exec(new String[]{"/usr/bin/killall", "yes"});
                        } catch (IOException quitYesException) {
                            if (isTestMode) {
                                System.out.println("quitYesException: " + quitYesException);
                            }
                        }

                        try {
                            Runtime.getRuntime().exec(new String[]{"/usr/bin/killall", "caffeinate"});
                        } catch (IOException quitCaffeinateException) {
                            if (isTestMode) {
                                System.out.println("quitCaffeinateException: " + quitCaffeinateException);
                            }
                        }

                        try {
                            Runtime.getRuntime().exec(new String[]{"/usr/bin/killall", "afplay"});
                        } catch (IOException quitAfplayException) {
                            if (isTestMode) {
                                System.out.println("quitAfplayException: " + quitAfplayException);
                            }
                        }

                        try {
                            Runtime.getRuntime().exec(new String[]{"/usr/bin/osascript", "-e", "with timeout of 1 second", "-e", "tell application id \"com.apple.PhotoBooth\" to quit", "-e", "end timeout"}).waitFor();
                        } catch (IOException | InterruptedException quitPhotoBoothException) {
                            if (isTestMode) {
                                System.out.println("quitPhotoBoothException: " + quitPhotoBoothException);
                            }
                        }

                        try {
                            Runtime.getRuntime().exec(new String[]{"/usr/bin/osascript", "-e", "with timeout of 1 second", "-e", "tell application id \"com.apple.QuickTimePlayerX\" to quit", "-e", "end timeout"}).waitFor();
                        } catch (IOException | InterruptedException quitQuickTimeException) {
                            if (isTestMode) {
                                System.out.println("quitQuickTimeException: " + quitQuickTimeException);
                            }
                        }

                        try {
                            Runtime.getRuntime().exec(new String[]{"/usr/bin/pkill", "-fa", "qa_helper-Keyboard_Test.*\\.jar"});
                        } catch (IOException quitKeyboardTestException) {
                            if (isTestMode) {
                                System.out.println("quitKeyboardTestException: " + quitKeyboardTestException);
                            }
                        }
                    } else if (isWindows) {
                        boolean isWindowsPE = ((new File("\\Windows\\System32\\startnet.cmd").exists() || new File("\\Windows\\System32\\winpeshl.ini").exists()) && !new CommandReader(new String[]{"\\Windows\\System32\\reg.exe", "query", "HKLM\\SYSTEM\\Setup", "/v", "FactoryPreInstallInProgress"}).getFirstOutputLineContaining("0x1").isEmpty());

                        try {
                            Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "Get-CimInstance Win32_Process -Filter \\\"Name = 'powershell.exe' AND CommandLine LIKE '%<# QA Helper CPU Stress Test #>%'\\\" | Invoke-CimMethod -Name Terminate"}).waitFor();
                        } catch (IOException | InterruptedException quitPowershellStressException) {
                            if (isTestMode) {
                                System.out.println("quitPowershellStressException: " + quitPowershellStressException);
                            }
                        }

                        try {
                            // taskkill does not exist in WinPE (unless it has been manually copied in) and will always exist in full Windows, no need to make it hard a requirement when I can just use PowerShell (PowerShell just takes longer so we'll still use taskkill when it's available).
                            if (!isWindowsPE || new File("\\Windows\\System32\\taskkill.exe").exists()) {
                                Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\taskkill.exe", "/im", (new File("\\Install\\Diagnostic Tools\\OpenHardwareMonitor\\OpenHardwareMonitor.exe").exists() ? "OpenHardwareMonitor.exe" : (isWindowsPE ? "Taskmgr.exe" : "perfmon.exe")), "/t"}).waitFor(); // Even though we launch resmon.exe the running executable is perfmon.exe
                            } else {
                                Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "Stop-Process -Name " + (new File("\\Install\\Diagnostic Tools\\OpenHardwareMonitor\\OpenHardwareMonitor.exe").exists() ? "OpenHardwareMonitor" : "Taskmgr")}).waitFor();
                            }
                        } catch (IOException | InterruptedException quitTaskManagerException) {
                            if (isTestMode) {
                                System.out.println("quitTaskManagerException: " + quitTaskManagerException);
                            }
                        }

                        try {
                            Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "Get-CimInstance Win32_Process -Filter \\\"Name LIKE 'java%.exe' AND CommandLine LIKE '%Keyboard_Test%.jar%'\\\" | Invoke-CimMethod -Name Terminate"}).waitFor();
                        } catch (IOException | InterruptedException quitPowershellStressException) {
                            if (isTestMode) {
                                System.out.println("quitPowershellStressException: " + quitPowershellStressException);
                            }
                        }

                        if (!isWindowsPE) {
                            try {
                                Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "$WscriptShell = New-Object -ComObject Wscript.Shell; if ($WscriptShell.AppActivate('Sound')) { $WscriptShell.SendKeys('%{F4}') }; Start-Sleep -Milliseconds 500; if ($WscriptShell.AppActivate('Sound')) { $WscriptShell.SendKeys('%{F4}') }"}).waitFor(); // Try closing Sound window twice in case the Properties windows is open.
                            } catch (IOException | InterruptedException quitRecordingPropertiesException) {
                                if (isTestMode) {
                                    System.out.println("quitRecordingPropertiesException: " + quitRecordingPropertiesException);
                                }
                            }

                            try {
                                Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\taskkill.exe", "/im", "SndVol.exe", "/t"}).waitFor();
                            } catch (IOException | InterruptedException quitSoundMixerException) {
                                if (isTestMode) {
                                    System.out.println("quitSoundMixerException: " + quitSoundMixerException);
                                }
                            }

                            try {
                                Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\taskkill.exe", "/fi", "WINDOWTITLE eq Camera", "/t"}).waitFor();
                            } catch (IOException | InterruptedException quitCameraAppException) {
                                if (isTestMode) {
                                    System.out.println("quitCameraAppException: " + quitCameraAppException);
                                }
                            }
                        }
                    }
                }

                if (isMacOS) {
                    // De-quarantine apps even if we didn't finish loading.
                    try {
                        String launchPath = new File(QAHelper.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getPath();

                        if (launchPath.contains("/AppTranslocation/") || !new CommandReader(new String[]{"/usr/bin/xattr", launchPath}).getFirstOutputLineContaining("com.apple.quarantine").isEmpty()) {
                            String[] appPaths = new CommandReader(new String[]{"/usr/bin/mdfind", "kMDItemCFBundleIdentifier = org.freegeek.QA-Helper"}).getOutputLines();

                            if (appPaths.length > 0) {
                                ArrayList<String> appleScriptQuotedAppPaths = new ArrayList<>();
                                for (String thisAppPath : appPaths) {
                                    appleScriptQuotedAppPaths.add("(quoted form of \"" + thisAppPath.replace("\\", "\\\\").replace("\"", "\\\"") + "\")");
                                }

                                Runtime.getRuntime().exec(new String[]{"/usr/bin/osascript",
                                    "-e", "delay 0.5",
                                    "-e", "repeat while (application \"" + launchPath.replace("\\", "\\\\").replace("\"", "\\\"") + "\" is running)",
                                    "-e", "delay 0.5",
                                    "-e", "end repeat",
                                    "-e", "try",
                                    "-e", "do shell script \"/usr/bin/xattr -drs com.apple.quarantine \" & " + String.join(" & \" \" & ", appleScriptQuotedAppPaths),
                                    "-e", "end try"});
                            }
                        }
                    } catch (URISyntaxException | IOException deQuarantineAppsException) {
                        if (isTestMode) {
                            System.out.println("deQuarantineAppsException: " + deQuarantineAppsException);
                        }
                    }
                }
            }
        });
    }

    /**
     * Creates new form QAHelper
     *
     * @throws java.lang.Exception
     */
    public QAHelper() throws Exception {
        String osName = System.getProperty("os.name");
        isLinux = osName.startsWith("Linux");
        isMacOS = (osName.startsWith("Mac OS X") || osName.startsWith("macOS"));
        isWindows = osName.startsWith("Windows");

        if (isLinux) {
            try {
                String launchPath = new File(QAHelper.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getPath();
                String launchDirectory = launchPath.substring(0, launchPath.lastIndexOf("/"));
                String defaultDirectory = System.getProperty("user.home") + "/.local/qa-helper";
                isPeripheralTestMode = new File(launchDirectory + "/flags/peripheral-test-mode.flag").exists() || new File(defaultDirectory + "/flags/peripheral-test-mode.flag").exists();
            } catch (URISyntaxException getLaunchPathException) {

            }

            if (new File("/usr/bin/ibus-daemon").exists()) { // NOTE: "ibus-daemon" WILL BE INSTALLED/RUNNING ON MINT BY DEFAULT ONLY GETS INSTALLED WHEN ZOOM IS INSTALLED AND IT'S NOW INSTALLED BY DEFAULT ON OUR CUSTOM MINT IMAGES.
                try {
                    // On Linux, when "ibus-deamon" is installed (which gets pre-installed in our custom images as part of the "ibus" dependency for Zoom), the keyboard could become unresponsive in QA Helper (or any Java app) if dialog boxes are opened and closed too rapidly.
                    // This would happen sporadically when some technicians would hit enter rapidly to quickly verify the bottom row tasks that had already performed which rapidly opens and closes dialog boxes.
                    // After lots of investigation and testing, I determined the issue was specific to opening and closing dialog boxes and not related to keys being hit rapidly and would happen across every version of Java that I tested and did not have to do with FlatLaf.
                    // With more investigation, I traced the issue back to "ibus-daemon" (thanks to https://youtrack.jetbrains.com/issue/IDEA-23472) and found that simply reloading it at least once after boot seems to make this issue never happen.
                    // I'm not sure why it is that the issue would only happen with the "ibus-deamon" instance that loaded on boot, but always reloading "ibus-daemon" when QA Helper launches successfully avoids the issue while nothing else I tried worked.

                    Runtime.getRuntime().exec(new String[]{"/usr/bin/ibus-daemon", "-rd"});
                } catch (IOException ibusDaemonReloadException) {
                    System.out.println("ibusDaemonReloadException: " + ibusDaemonReloadException);
                }
            }

            String linuxReleaseDescription = new CommandReader(new String[]{"/usr/bin/lsb_release", "-ds"}).getFirstOutputLine();
            String desktopSession = System.getenv("DESKTOP_SESSION");

            if (!linuxReleaseDescription.startsWith("Linux Mint") || ((desktopSession != null) && !desktopSession.equals("cinnamon") && !desktopSession.equals("mate"))) {
                playAlertSound("error");
                String[] linuxWarningDialogButtons = new String[]{"Continue", "Quit"};
                int linuxWarningDialogReturn = JOptionPane.showOptionDialog(null, "<html><b>This version of <i>QA Helper</i> only supports <i>Linux Mint</i> with either the <u>Cinnamon</u> or <u>MATE</u> desktop environment.</b><br/><br/><i>If you continue, some things may not work correctly or may not work at all.</i></html>", "QA Helper  —  Linux Warning", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null, linuxWarningDialogButtons, linuxWarningDialogButtons[0]);
                if (linuxWarningDialogReturn == JOptionPane.NO_OPTION || linuxWarningDialogReturn == -1) {
                    System.exit(0);
                }
            }

            linuxInitialScaleFactor = UIScale.getUserScaleFactor();
            isLinuxMATE = new File("/usr/bin/mate-terminal").exists();

            if (new File("/proc/cmdline").exists()) {
                try {
                    List<String> linuxBootArguments = Arrays.asList(String.join(" ", Files.readAllLines(Paths.get("/proc/cmdline"))).split(" "));
                    isLinuxLiveBoot = linuxBootArguments.contains("boot=casper");
                    isLinuxBootedToRAM = (linuxBootArguments.contains("toram"));

                    if (isLinuxBootedToRAM) { // If less than 8GB of RAM, "toram" could be specified in "/proc/cmdline" BUT IGNORED on boot because not enough RAM.
                        String lsmemTotalOutput = new CommandReader(new String[]{"/usr/bin/lsmem", "-b"}).getFirstOutputLineContaining("Total online memory:");
                        if (lsmemTotalOutput.contains(": ")) {
                            String lsmemTotalBytesString = lsmemTotalOutput.substring(lsmemTotalOutput.indexOf(": ") + 2).trim();

                            try {
                                long totalRAMbytes = Long.parseLong(lsmemTotalBytesString);

                                if (totalRAMbytes < 8000000000L) {
                                    isLinuxBootedToRAM = false;
                                }
                            } catch (NumberFormatException ramSizeException) {
                                if (isTestMode) {
                                    System.out.println("ramSizeException: " + ramSizeException);
                                }
                            }
                        }
                    }

                    isLinuxBootedFromNetwork = ((linuxBootArguments.contains("netboot=nfs") || linuxBootArguments.contains("netboot=cifs")) && !isLinuxBootedToRAM);
                    isLinuxUbiquityMode = (linuxBootArguments.contains("automatic-ubiquity") || linuxBootArguments.contains("only-ubiquity"));
                } catch (IOException getLinuxBootArgsException) {
                    System.out.println("getLinuxBootArgsException: " + getLinuxBootArgsException);
                }
            }

            isLinuxFirstLaunch = !new File(System.getProperty("user.home") + "/.local/qa-helper/flags/launched-before.flag").exists();

            try {
                // Start up acpi_listen for reliable headphone plugged in detection.
                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "/usr/bin/acpi_listen > /tmp/qa_helper-acpi_listener.txt & disown"});
            } catch (IOException acpiListenException) {
                System.out.println("acpiListenException: " + acpiListenException);
            }
        } else if (isMacOS) {
            isPeripheralTestMode = (new File(macBuildInfoPath + "Peripheral Test Mode.flag").exists() || new File(macBuildInfoPath + "Peripheral Test Mode.txt").exists() || new File(macBuildInfoPath + "Peripheral Test Mode.flag.txt").exists() || new File(macBuildInfoPath + "Peripheral Test Mode").exists());

            Desktop.getDesktop().setAboutHandler((AboutEvent aboutEvent) -> {
                creditsWindow.showCreditsWindow();
            });

            try {
                // Need to check if is macOS Sierra or newer to know if can support QA Helpers built with Java 17 and newer.

                String macOSversion = System.getProperty("os.version"); // This is enough for the basic version check even though is does not show the full version on Big Sur (11.5.2 shows as just 11.5).

                String[] versionParts = macOSversion.replaceAll("[^0-9.]", "").split("\\.");

                if ((versionParts.length >= 2 && versionParts[0].equals("10") && Integer.parseInt(versionParts[1]) >= 14)
                        || (versionParts.length >= 1 && Integer.parseInt(versionParts[0]) >= 11)) {
                    isMacOSmojaveOrNewer = true;
                }

                if (isMacOSmojaveOrNewer || (versionParts.length >= 2 && versionParts[0].equals("10") && Integer.parseInt(versionParts[1]) >= 12)) {
                    isMacOSsierraOrNewer = true;
                }
            } catch (NumberFormatException checkMacOSversionException) {
                // Ignore Error
            }

            isMacTestBoot = (new File("/Applications/Test Boot Setup.app").exists() && new File("/Users/Staff").exists() && new File("/Users/Tester").exists());

            // Set Touch Bar settings to NOT be "App Controls" for QA Helper because Java alert buttons don't show in the Touch Bar anyway and fullControlStrip is better for a full Touch Bar test during Keyboard Test.
            if (new CommandReader(new String[]{"/usr/bin/defaults", "read", "com.apple.touchbar.agent", "PresentationModePerApp"}).getFirstOutputLineContaining("\"org.freegeek.QA-Helper\" = fullControlStrip;").isEmpty()) {
                try {
                    Runtime.getRuntime().exec(new String[]{"/usr/bin/defaults", "write", "com.apple.touchbar.agent", "PresentationModePerApp", "-dict-add", "org.freegeek.QA-Helper", "fullControlStrip"}).waitFor();
                } catch (IOException | InterruptedException setTouchBarPresentationModePerAppException) {
                    System.out.println("setTouchBarPresentationModePerAppException: " + setTouchBarPresentationModePerAppException);
                }
            }

            // Always killall ControlStrip even if PresentationModePerApp was set on a previous launch
            // because for some reason the setting won't take effect until the app loses and regains focus,
            // or if I just go ahead and killall ControlStrip right away.
            try {
                Runtime.getRuntime().exec(new String[]{"/usr/bin/killall", "ControlStrip"});
            } catch (IOException restartControlStripException) {
                System.out.println("restartControlStripException: " + restartControlStripException);
            }
        } else if (isWindows) {
            isPeripheralTestMode = (new File(windowsBuildInfoPath + "fgFLAG-PeripheralTestMode").exists() || new File(windowsBuildInfoPath + "fgFLAG-PeripheralTestMode.flag").exists() || new File(windowsBuildInfoPath + "fgFLAG-PeripheralTestMode.txt").exists() || new File(windowsBuildInfoPath + "fgFLAG-PeripheralTestMode.flag.txt").exists());

            isWindows11 = osName.startsWith("Windows 11");
            if (!isWindows11 && !osName.startsWith("Windows 10")) {
                playAlertSound("error");
                String[] windowsWarningDialogButtons = new String[]{"Continue", "Quit"};
                int windowsWarningDialogReturn = JOptionPane.showOptionDialog(null, "<html><b>This version of <i>QA Helper</i> does not support versions of <i>Windows</i> other than <u>Windows 10</u> or <u>Windows 11</u>.</b><br/><br/><i>If you continue, some things may not work correctly or may not work at all.</i></html>", "QA Helper  —  Windows Warning", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null, windowsWarningDialogButtons, windowsWarningDialogButtons[0]);
                if (windowsWarningDialogReturn == JOptionPane.NO_OPTION || windowsWarningDialogReturn == -1) {
                    System.exit(0);
                }
            }

            isWindowsHomeEdition = (!new CommandReader(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "(Get-CimInstance Win32_OperatingSystem -Property Caption).Caption"}).getFirstOutputLineContaining(" Home").isEmpty());

            isWindowsPE = ((new File("\\Windows\\System32\\startnet.cmd").exists() || new File("\\Windows\\System32\\winpeshl.ini").exists()) && !new CommandReader(new String[]{"\\Windows\\System32\\reg.exe", "query", "HKLM\\SYSTEM\\Setup", "/v", "FactoryPreInstallInProgress"}).getFirstOutputLineContaining("0x1").isEmpty());
            isWindowsRE = (isWindowsPE && new File("\\sources\\recovery\\RecEnv.exe").exists());

            try {
                if (new File(System.getProperty("java.io.tmpdir"), "qa_helper-update_finisher.cmd").exists()) {
                    new File(System.getProperty("java.io.tmpdir"), "qa_helper-update_finisher.cmd").delete();
                }

                if (new File(System.getProperty("java.io.tmpdir"), "qa-helper_update-finisher.cmd").exists()) { // OLD naming format
                    new File(System.getProperty("java.io.tmpdir"), "qa-helper_update-finisher.cmd").delete();
                }
            } catch (Exception deleteTempAutoUpdaterCmdException) {
                System.out.println("deleteTempAutoUpdaterCmdException: " + deleteTempAutoUpdaterCmdException);
            }
        }

        initComponents();

        if (isMacOS) { // On macOS, switch menu shortcuts from CTRL_DOWN_MASK to META_DOWN_MASK.
            menResetTextSize.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_0, InputEvent.META_DOWN_MASK));
            menIncreaseTextSize.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS, InputEvent.META_DOWN_MASK));
            menDecreaseTextSize.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, InputEvent.META_DOWN_MASK));
            menMaxTextSizeForScreen.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS, InputEvent.SHIFT_DOWN_MASK | InputEvent.META_DOWN_MASK));
        }

        setAlwaysOnTop(isWindowsPE);

        try (BufferedReader appVersionReader = new BufferedReader(new InputStreamReader(this.getClass().getResource("/Resources/qa-helper-version.txt").openStream()))) {
            appVersion = appVersionReader.readLine();
            lblVersion.setText("<html><b>Version:</b> " + appVersion + "</html>");
        } catch (Exception loadVersionException) {
            lblVersion.setText("");
        }

        qaHelperWindow.addWindowListener(new WindowAdapter() {
            @Override
            public void windowActivated(WindowEvent windowEvent) {
                if (!isWindowsPE && !isLinuxUbiquityMode) {
                    // This isn't very efficient (since it will get called excessively), but will help keep dark/light theme in sync with OS when changed.

                    String currentLookAndFeelName = UIManager.getLookAndFeel().getName();
                    if (currentLookAndFeelName.startsWith("FlatLaf")) {
                        boolean osIsDarkMode = false;

                        if (isMacOS) {
                            String[] macOSversionParts = System.getProperty("os.version").replaceAll("[^0-9.]", "").split("\\.");
                            if ((Integer.parseInt(macOSversionParts[0]) >= 11) || (Integer.parseInt(macOSversionParts[1]) >= 14)) {
                                osIsDarkMode = new CommandReader(new String[]{"/usr/bin/defaults", "read", "NSGlobalDomain", "AppleInterfaceStyle"}).getFirstOutputLine().toLowerCase().equals("dark");
                            }
                        } else if (isLinux) {
                            String cinnamonGtkThemeName = new CommandReader(new String[]{"/usr/bin/gsettings", "get", "org.cinnamon.desktop.interface", "gtk-theme"}).getFirstOutputLine().toLowerCase();
                            osIsDarkMode = (cinnamonGtkThemeName.contains("-dark") && !cinnamonGtkThemeName.contains("-darker"));
                        } else if (isWindows) {
                            osIsDarkMode = !new CommandReader(new String[]{"\\Windows\\System32\\reg.exe", "query", "HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize", "/v", "AppsUseLightTheme"}).getFirstOutputLineContaining("0x0").isEmpty();
                        }

                        if (osIsDarkMode != currentLookAndFeelName.endsWith(" Dark")) {
                            try {
                                FlatLaf defaultLaf = (osIsDarkMode ? new FlatDarkLaf() : new FlatLightLaf());

                                if (isMacOS) {
                                    UIManager.setLookAndFeel(osIsDarkMode ? new com.formdev.flatlaf.themes.FlatMacDarkLaf() : new com.formdev.flatlaf.themes.FlatMacLightLaf());

                                    // When using the FlatMac themes along with "Button.defaultButtonFollowsFocus" being set to "true" (which offers great functionality),
                                    // the bright blue highlighted default button moving around the window looks bad to me, but the rest of the "FlatMac" theme changes are good.
                                    // So, set the following theme values to the default values from the non-Mac themes to continue using the default FlatLaf button style with the FlatMac themes.
                                    // These values were determined by seeing what was changed by comparing these dumps: https://github.com/JFormDesigner/FlatLaf/tree/main/flatlaf-testing/dumps/uidefaults
                                    String[] resetUIDefaults = new String[]{"Component.focusWidth", "Component.innerFocusWidth", "Component.innerOutlineWidth",
                                        "Button.default.borderWidth", "Button.default.foreground", "Button.default.background", "Button.default.focusedBackground"};
                                    for (String thisUIDefault : resetUIDefaults) {
                                        UIManager.put(thisUIDefault, defaultLaf.getDefaults().get(thisUIDefault));
                                    }
                                } else {
                                    UIManager.setLookAndFeel(defaultLaf);
                                }

                                themeUpdated = true;

                                displayComputerSpecs();
                            } catch (UnsupportedLookAndFeelException updateFlatLafThemeException) {
                                if (isTestMode) {
                                    System.out.println("updateFlatLafThemeException: " + updateFlatLafThemeException);
                                }
                            }
                        }
                    }
                }
            }
        });

        reload();
    }

    private void setActionsEnabled(boolean shouldEnable) {
        setActionsEnabled(shouldEnable, true);
    }

    private void setActionsEnabled(boolean shouldEnable, boolean shouldFocusWindow) {
        // Do not want to use setEnabled() for the whole frame because that makes the window unfocusable and unmovable on Windows.

        actionsEnabled = shouldEnable;

        if (txtUsername.isVisible()) {
            txtUsername.setEnabled(shouldEnable);
        }

        if (pswPassword.isVisible()) {
            pswPassword.setEnabled(shouldEnable);
        }

        if (txtPID.isVisible()) {
            txtPID.setEnabled(shouldEnable);
        }

        if (shouldEnable && shouldFocusWindow) {
            focusWindow();
        }
    }

    private void focusWindow() {
        setVisible(true);
        setState(Frame.NORMAL);
        toFront();

        try {
            Desktop.getDesktop().requestForeground(true);
        } catch (Exception requestForegroundException) {
            //if (isTestMode) System.out.println("requestForegroundException: " + requestForegroundException); // Don't show this cuz never works and just litters when actually debugging.

            if (!isWindows || !isWindowsPE) { // No need to for this extra focus in WinPE since it's always on top. Also, it causes some disruption because of its delay in running after being called when QA Helper may have since ICONIFIED itself. 
                try {
                    Runtime.getRuntime().exec((isWindows
                            // Based On: https://stackoverflow.com/a/58548853
                            // This new method is much better than the previous AppActivate method, but still also do the AppActive method since it seems to maybe not work as well on Windows 11.
                            ? new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "$focusWindowFunctionTypes = Add-Type -PassThru -Name FocusWindow -MemberDefinition @'\n"
                                + "[DllImport(\\\"user32.dll\\\")] public static extern bool SetForegroundWindow(IntPtr hWnd);\n"
                                + "[DllImport(\\\"user32.dll\\\")] public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);\n"
                                + "[DllImport(\\\"user32.dll\\\")] public static extern bool IsIconic(IntPtr hWnd);\n"
                                + "'@\n"
                                + "$qaHelperPID = (Get-CimInstance Win32_Process -Filter \\\"Name LIKE 'java%.exe' AND CommandLine LIKE '%QA_Helper.jar%'\\\" -Property ProcessId).ProcessId\n"
                                + "if ($qaHelperPID) {\n"
                                + "$qaHelperWindowHandle = (Get-Process | Where-Object Id -eq $qaHelperPID).MainWindowHandle\n"
                                + "if ($qaHelperWindowHandle) {\n"
                                + "$focusWindowFunctionTypes::SetForegroundWindow($qaHelperWindowHandle) | Out-Null\n"
                                + "if ($focusWindowFunctionTypes::IsIconic($qaHelperWindowHandle)) {\n"
                                + "$focusWindowFunctionTypes::ShowWindow($qaHelperWindowHandle, 9) | Out-Null\n"
                                + "}\n"
                                + "}\n"
                                + "}\n"
                                + "$WshellScript = (New-Object -ComObject Wscript.Shell); if (-not $WshellScript.AppActivate('QA Helper')) { $WshellScript.AppActivate('QA Helper  —  Loading') }"
                            }
                            : (isLinux ? new String[]{"/bin/sh", "-c", "/usr/bin/wmctrl -Fa 'QA Helper' || /usr/bin/wmctrl -Fa 'QA Helper  —  Loading'"}
                            : new String[]{"/usr/bin/osascript", "-e", "if (application id \"org.freegeek.QA-Helper\" is running) then tell application id \"org.freegeek.QA-Helper\" to activate"}))
                    );
                } catch (IOException focusQAHelperException) {
                    if (isTestMode) {
                        System.out.println("focusQAHelperException: " + focusQAHelperException);
                    }
                }
            }
        }
    }

    private void logSpecsAction(String action) {
        if (computerSpecs != null) {
            if (isTestMode) {
                action = "TEST MODE - " + action;
            }

            boolean isIntern = false;
            if (isLoggedIn) {
                if (new String(pswPassword.getPassword()).equals("intern")) {
                    isIntern = true;
                }
            }

            LinkedHashMap<String, String> logSpecsParameters = new LinkedHashMap<>();
            logSpecsParameters.put("action", action);
            logSpecsParameters.put("pid", pid);
            logSpecsParameters.put("user", username + (isIntern ? " (Intern)" : ""));
            logSpecsParameters.put("brand", (deviceTypeIsMotherboard ? computerSpecs.getFullMotherboardBrand() : computerSpecs.getFullBrand()));
            logSpecsParameters.put("model", (deviceTypeIsMotherboard ? computerSpecs.getFullMotherboardModel() : computerSpecs.getFullModel()));
            logSpecsParameters.put("serial", (deviceTypeIsMotherboard ? computerSpecs.getFullMotherboardSerial() : computerSpecs.getFullSerial()));
            logSpecsParameters.put("os", computerSpecs.getFullOS());
            logSpecsParameters.put("chassis", computerSpecs.getChassisType() + " (" + (detectedDeviceType.equals(manualDeviceType) ? detectedDeviceType : (detectedDeviceType + " / " + manualDeviceType)) + ")");
            logSpecsParameters.put("cpu", computerSpecs.getFullCPU());
            logSpecsParameters.put("ram", computerSpecs.getFullRAM());
            logSpecsParameters.put("battery", computerSpecs.getBatteryHealthString());
            logSpecsParameters.put("power_adapter", computerSpecs.getPowerAdapter());
            logSpecsParameters.put("storage", computerSpecs.getFullStorage());
            logSpecsParameters.put("gpu", computerSpecs.getFullGPU());
            logSpecsParameters.put("audio", computerSpecs.getFullAudio());
            logSpecsParameters.put("wireless", computerSpecs.getWireless());
            logSpecsParameters.put("screen", computerSpecs.getFullScreenSize());
            logSpecsParameters.put("disc_drive", computerSpecs.getFullDiscDrive());
            logSpecsParameters.put("mac", computerSpecs.getEthernetMAC());
            logSpecsParameters.put("version", appVersion);

            (new SwingWorker<String, Void>() {
                @Override
                protected String doInBackground() throws Exception {
                    return new WebReader(privateStrings.getLogSpecsURL(), logSpecsParameters, 15).getOutputLinesAsString();
                }

                @Override
                protected void done() {
                    if (isTestMode) {
                        try {
                            String logSpecsResult = get();
                            //System.out.println("logSpecsResult: " + logSpecsResult); // DEBUG
                        } catch (InterruptedException | ExecutionException logSpecsException) {
                            System.out.println("logSpecsException: " + logSpecsException);
                        }
                    }
                }
            }).execute();
        }
    }

    private void addToFreeGeekProductionLog() {
        if (!isTestMode && isLoggedIn && (computerSpecs != null) && pid.startsWith("FG")) {
            String isIntern = "false";
            if (new String(pswPassword.getPassword()).equals("intern")) {
                isIntern = "true";
            }

            for (;;) {
                String addToProductLogResult;

                String windowsLicense = "";
                if (isWindows) {
                    try {
                        List<String> allHelperLogLines = Files.readAllLines(Paths.get(helperLogFilePath));
                        for (String thisHelperLogLine : allHelperLogLines) {
                            if (thisHelperLogLine.startsWith("Uploaded CBR for DPK: ")) {
                                String[] uploadedCBRLineParts = thisHelperLogLine.split("\\+");
                                if ((uploadedCBRLineParts.length >= 2) && uploadedCBRLineParts[1].startsWith("WIN")) {
                                    windowsLicense = uploadedCBRLineParts[1];
                                } else {
                                    windowsLicense = "UNKNOWN-DPK";
                                }
                            } else if (thisHelperLogLine.startsWith("Reverted DPK")) {
                                windowsLicense = "";
                            }
                        }
                    } catch (IOException readLogException) {
                        if (isTestMode) {
                            System.out.println("readLogException: " + readLogException);
                        }
                    }
                }

                LinkedHashMap<String, String> addToProductionLogParameters = new LinkedHashMap<>();
                addToProductionLogParameters.put("is_intern", isIntern);
                addToProductionLogParameters.put("technician", username);
                addToProductionLogParameters.put("id", pid);
                addToProductionLogParameters.put("device_type", manualDeviceType);
                addToProductionLogParameters.put("brand", (deviceTypeIsMotherboard ? computerSpecs.getFullMotherboardBrand() : computerSpecs.getFullBrand()));
                addToProductionLogParameters.put("model", (deviceTypeIsMotherboard ? computerSpecs.getFullMotherboardModel() : computerSpecs.getFullModel()));
                addToProductionLogParameters.put("serial", (deviceTypeIsMotherboard ? computerSpecs.getFullMotherboardSerial() : computerSpecs.getFullSerial()));
                addToProductionLogParameters.put("os", computerSpecs.getFullOS());
                addToProductionLogParameters.put("windows_license", windowsLicense); // "windows_license" must always be included, but the value can be empty.

                addToProductLogResult = new WebReader(privateStrings.getAddToFreeGeekProductionLogURL(isTestMode), addToProductionLogParameters, 15).getOutputLinesAsString();

                if (addToProductLogResult.equals("ADDED")) {
                    break;
                }

                if (addToProductLogResult.isEmpty()) {
                    addToProductLogResult = "NO RESPONSE";
                }

                sendErrorEmail("FAILED TO ADD TO PRODUCTION LOG\n\naddToProductLogResult:\n" + addToProductLogResult);

                JTextArea addToProductionLogErrorTextArea = new JTextArea(5, 100);
                addToProductionLogErrorTextArea.setText(addToProductLogResult);
                addToProductionLogErrorTextArea.setEditable(false);
                addToProductionLogErrorTextArea.setLineWrap(true);
                addToProductionLogErrorTextArea.setWrapStyleWord(true);
                addToProductionLogErrorTextArea.setFont(new Font(Font.MONOSPACED, lblVersion.getFont().getStyle(), addToProductionLogErrorTextArea.getFont().getSize()));
                JScrollPane addToProductionLogErrorScrollPane = new JScrollPane(addToProductionLogErrorTextArea);

                playAlertSound("error");
                loadingWindow.setAlwaysOnTop(false);

                int addToProductionLogErrorResponse = JOptionPane.showOptionDialog(qaHelperWindow, new Object[]{"<html><b>Failed to Add to Production Log</b><br/><br/></html>",
                    addToProductionLogErrorScrollPane,
                    "<html><br/><b>You must be connected to the internet to be able to add this computer to the production log.</b><br/><br/>"
                    + "Make sure you're connected to either a Wi-Fi network or plugged in with an Ethernet cable.<br/>"
                    + "If this computer does not have an Ethernet port, use an Ethernet adapter.<br/>"
                    + "Once you're connected to Wi-Fi or Ethernet, it may take a few moments for the internet connection to be established.<br/>"
                    + "If it takes more than a few minutes, consult an instructor or inform Free Geek I.T.</html>"},
                        "QA Helper  —  Add to Production Log Error", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, null, new String[]{"Try Again", "Continue Without Logging Automatically (Only Choose If Added Manually)"}, "Try Again");

                if (addToProductionLogErrorResponse == JOptionPane.NO_OPTION) { // Check for "JOptionPane.NO_OPTION" specifically because still want pressing Escape key to Try Again. Canceling must be manually clicked.
                    if (JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>Are you sure you want to continue WITHOUT automatically adding this computer to you production log?</b><br/><br/>This computer MUST still be manually added to your production log.<br/><br/><i>Only choose &quot;Yes&quot; if you have manually added this computer to your production log.</i></html>", "QA Helper  —  Confirm DO NOT Automatically Add to Production Log", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
                        sendErrorEmail("CHOSE TO CONTINUE WITHOUT AUTOMATICALLY ADDING DEVICE TO PRODUCTION LOG");

                        loadingWindow.setAlwaysOnTop(true);

                        break;
                    }
                }

                loadingWindow.setAlwaysOnTop(true);

                try {
                    TimeUnit.SECONDS.sleep(1);
                } catch (InterruptedException sleepException) {
                    // Ignore sleepException
                }
            }
        }
    }

    private String escapeStringForHTML(String inputString) {
        String htmlEscapedString = StringEscapeUtils.escapeHtml4(inputString); // This escapes all named HTML entities.

        if (htmlEscapedString.length() == htmlEscapedString.getBytes().length) {
            return htmlEscapedString;
        } else { // The following code escapes any other multi-byte character (such as emoji) to their decimal HTML entity (because PCsCRM DB doesn't support full Unicode including Emoji).
            StringBuilder htmlEscapedMutliByteStringBuilder = new StringBuilder();
            for (int charIndex = 0; charIndex < htmlEscapedString.length(); charIndex++) { // Based on: https://stackoverflow.com/a/6766497
                int codePoint = htmlEscapedString.codePointAt(charIndex);
                if (codePoint > 0xffff) { // Skip over the second char in a surrogate pair.
                    charIndex++;
                }

                htmlEscapedMutliByteStringBuilder.append((codePoint < 128) ? htmlEscapedString.charAt(charIndex) : ("&#" + codePoint + ";")); // Any codePoint 128 or greater is a multi-byte character: https://stackoverflow.com/a/69481791
            }

            return htmlEscapedMutliByteStringBuilder.toString();
        }
    }

    private String escapeMultiLineStringForHTML(String rawMultiLineString) {
        return escapeStringForHTML(rawMultiLineString.replace("<br/>", "\n").replace("<br />", "\n").replace("<br>", "\n").trim()).replaceAll("\\R", "<br/>").replace("  ", "&nbsp;&nbsp;").replace("<br/> ", "<br/>&nbsp;").replace("\t", "&nbsp;&nbsp;&nbsp;&nbsp;").replaceAll("[\\p{Cntrl}]", " ").trim();
        // https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#lineending & https://howtodoinjava.com/java/regex/java-clean-ascii-text-non-printable-chars/
    }

    private String escapeSingleLineSpecStringForHTML(String rawSpecString) {
        return escapeSingleLineSpecStringForHTML(rawSpecString, 0);
    }

    private String escapeSingleLineSpecStringForHTML(String rawSpecString, int maxLength) {
        rawSpecString = rawSpecString.replaceAll("[\\p{Cntrl}]", " ").trim().replaceAll("\\s{2,}", " "); // https://howtodoinjava.com/java/regex/java-clean-ascii-text-non-printable-chars/
        String specStringEscapedForHTML = escapeStringForHTML(rawSpecString);

        if ((maxLength > 0) && (specStringEscapedForHTML.length() > maxLength)) {
            return rawSpecString; // If escaping for HTML would make the string too long, just return the original string.
        }

        return specStringEscapedForHTML;
    }

    private void sendErrorEmail(String errorMessage) {
        sendEmail("Error", errorMessage);
    }

    private void sendNoticeEmail(String noticeMessage) {
        sendEmail("Notice", noticeMessage);
    }

    private void sendEmail(String emailType, String emailMessage) {
        (new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                try {
                    String emailPID = pid;
                    if (emailPID.equals("N/A") && (txtPID != null)) {
                        String possiblePID = txtPID.getText().replaceAll("\\s", "").toUpperCase();
                        if (!possiblePID.isEmpty()) {
                            emailPID = possiblePID;
                        }
                    }

                    String locationInfo = new WebReader(privateStrings.getFreeGeekAPI("location", isTestMode)).getFirstOutputLine();
                    if (locationInfo.isEmpty()) {
                        locationInfo = "UNKNOWN CITY,UNKNOWN STATE";
                    }

                    String remoteIP = new WebReader(privateStrings.getFreeGeekAPI("ip", isTestMode)).getFirstOutputLine();
                    if (remoteIP.isEmpty()) {
                        remoteIP = "UNKNOWN IP";
                    }

                    boolean isIntern = false;
                    if (isLoggedIn) {
                        if (new String(pswPassword.getPassword()).equals("intern")) {
                            isIntern = true;
                        }
                    }

                    String fullEmailMessage = "<b>QA Helper Version:</b> " + appVersion + (isPeripheralTestMode ? " (Peripheral Test Mode)" : "") + "<br/>"
                            + "<b>Java Version:</b> " + System.getProperty("java.version") + "<br/><br/>"
                            + "<b>OS:</b> " + (((computerSpecs != null) && !computerSpecs.getFullOS().equals("N/A")) ? computerSpecs.getFullOS() : (System.getProperty("os.name") + " " + System.getProperty("os.version"))) + "<br/>"
                            + "<b>Serial:</b> " + ((computerSpecs != null) ? escapeSingleLineSpecStringForHTML((deviceTypeIsMotherboard ? computerSpecs.getFullMotherboardSerial() : computerSpecs.getFullSerial())) : "Specs Not Loaded") + "<br/><br/>"
                            + "<b>ID:</b> " + (emailPID.equals("N/A") ? "N/A" : ("<a href=\"" + privateStrings.getFreeGeekSpecsURL(emailPID, isTestMode) + "\" target=\"_blank\">" + emailPID + "</a>")) + (isTestMode ? " (Test Mode)" : "") + "<br/>"
                            + "<b>User:</b> " + username + (isIntern ? " (Intern)" : "") + "<br/>"
                            + "<b>Email:</b> " + (loggedInUserInfo.containsKey("email") ? loggedInUserInfo.get("email") : "N/A") + "<br/>"
                            + "<b>Location:</b> " + locationInfo.replace(",", ", ") + "<br/>"
                            + "<b>IP:</b> " + remoteIP + "<br/>"
                            + "<b>System Time:</b> " + new SimpleDateFormat("MM/dd/yyyy h:mm:ss a z").format(new Date()) + "<br/><br/>"
                            + "<b>" + emailType + " Message:</b><br/><span style=\"font-family:monospace\">" + escapeMultiLineStringForHTML(emailMessage) + "</span>";

                    LinkedHashMap<String, String> sendEmailParameters = new LinkedHashMap<>();
                    sendEmailParameters.put("key", privateStrings.getEmailPrivateKey());
                    sendEmailParameters.put("from_email", privateStrings.getEmailFromAddress());
                    sendEmailParameters.put("from_name", "QA Helper " + emailType);
                    sendEmailParameters.put("to_email", privateStrings.getEmailToAddress());
                    sendEmailParameters.put("subject", "QA Helper " + emailType);
                    sendEmailParameters.put("body", fullEmailMessage);

                    String sendEmailResult = new WebReader(privateStrings.getFreeGeekAPI("email", isTestMode), sendEmailParameters).getOutputLinesAsString();
                    //System.out.println("sendEmailResult: " + sendEmailResult); // DEBUG
                } catch (Exception sendEmailException) {
                    if (isTestMode) {
                        System.out.println("sendEmailException: " + sendEmailException);
                    }
                }

                return null;
            }
        }).execute();
    }

    private void reload() {
        reload(true);
    }

    private void reload(boolean reloadSpecs) {
        if (!isReloading) {
            isReloading = true;
            setActionsEnabled(false);

            if (reloadSpecs || (isLinux && (adminPassword.equals("*UNKNOWN*") || !new CommandReader("printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk echo '<CORRECT>'").getFirstOutputLine().equals("<CORRECT>")))) {
                loadingWindow.setLoadingTextAndDisplay("QA Helper is Loading Computer Specs", "Loading");

                boolean wasFirstLoad = isFirstLoad;

                if (!reloadSpecs) {
                    displayComputerSpecs(); // To display updated status before fully reloading
                }

                long startLoadTime = System.currentTimeMillis();

                (new SwingWorker<String[], Void>() {
                    @Override
                    protected String[] doInBackground() throws Exception {
                        String previousAdminPassword = adminPassword;
                        getAdminPassword("Load Computer Specs");
                        boolean gotNewAdminPassword = !adminPassword.equals(previousAdminPassword);

                        String possibleSudo = (isLinux && !adminPassword.equals("*UNKNOWN*") ? "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk " : "");

                        if (wasFirstLoad) {
                            autoUpdateApp(); // Only check for updates on first load

                            if (isLinux) {
                                new LinuxAutoScripts("Launch", adminPassword); // Only run launch auto scripts on first load

                                try {
                                    // I've noticed a cellular modem may not be listed immediately on boot, but it will be shortly after running a manual scan (which is asyncronous).
                                    // So, always start a scan when QA Helper is launched, to hopefully have the cellular modem available by the time "mmcli --list-modems" is run during specs load.
                                    // NOTE: It doesn't seem like this actually helps detect cellular modems any faster, but it doesn't hurt so keeping in anyways.

                                    Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", possibleSudo + "/usr/bin/mmcli --scan-modems"});
                                } catch (IOException mmcliScanModemsException) {
                                    System.out.println("mmcliScanModemsException: " + mmcliScanModemsException);
                                }
                            }
                        }

                        if (!isPeripheralTestMode && (reloadSpecs || gotNewAdminPassword)) {
                            if (computerSpecs == null) {
                                computerSpecs = new GetComputerSpecs(adminPassword, isTestMode);
                            } else {
                                computerSpecs.reloadSpecs(adminPassword, isTestMode);
                            }
                        }

                        if (isLinuxFirstLaunch) {
                            try {
                                File linuxFlagsDirectory = new File(System.getProperty("user.home") + "/.local/qa-helper/flags/");
                                linuxFlagsDirectory.mkdirs();

                                if (!linuxFlagsDirectory.exists()) {
                                    Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", possibleSudo + "/bin/mkdir -p '" + linuxFlagsDirectory.getPath().replace("'", "'\\''") + "' && " + possibleSudo + "/bin/chmod 777 '" + linuxFlagsDirectory.getPath().replace("'", "'\\''") + "'"});
                                }

                                new File(linuxFlagsDirectory, "launched-before.flag").createNewFile();
                            } catch (IOException createLaunchedBeforeFlagException) {
                                if (isTestMode) {
                                    System.out.println("createLaunchedBeforeFlagException: " + createLaunchedBeforeFlagException);
                                }
                            }

                            if (isLinuxUbiquityMode && !isPeripheralTestMode) {
                                if (new File("/tmp/post_install_time.sh").exists()) {
                                    try {
                                        String postInstallTimesScriptContents = Files.readString(Paths.get("/tmp/post_install_time.sh"));

                                        if (!postInstallTimesScriptContents.contains("serial=" + (deviceTypeIsMotherboard ? computerSpecs.getFullMotherboardSerial() : computerSpecs.getFullSerial()))) {
                                            try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(new File("/tmp/post_install_time.sh"), true))) {
                                                bufferedWriter.write(
                                                        "--data-urlencode \"serial=" + (deviceTypeIsMotherboard ? computerSpecs.getFullMotherboardSerial() : computerSpecs.getFullSerial()) + "\" \\" + "\n"
                                                        + "--data-urlencode \"cpu=" + computerSpecs.getFullCPU() + "\" \\" + "\n"
                                                        + "--data-urlencode \"ram=" + computerSpecs.getFullRAM() + "\" \\" + "\n"
                                                );
                                            } catch (IOException logSpecsForInstallTimingLogException) {
                                                if (isTestMode) {
                                                    System.out.println("logSpecsForInstallTimingLogException: " + logSpecsForInstallTimingLogException);
                                                }
                                            }
                                        }
                                    } catch (IOException readPostInstallTimesScriptContentsException) {
                                        if (isTestMode) {
                                            System.out.println("readPostInstallTimesScriptContentsException: " + readPostInstallTimesScriptContentsException);
                                        }
                                    }
                                }

                                if (!new File("/tmp/detailed_hostname.txt").exists()) {
                                    String detailedHostname = "FreeGeek-" + manualDeviceType.replace("-in-", "In") + "-" + (deviceTypeIsMotherboard ? computerSpecs.getMotherboardSerial() : computerSpecs.getSerial()).replaceAll("[^A-Za-z0-9]", "") + "-" + (deviceTypeIsMotherboard ? computerSpecs.getMotherboardModel() : computerSpecs.getModel()).replaceAll("[^A-Za-z0-9]", "");
                                    if (detailedHostname.length() > 64) {
                                        detailedHostname = detailedHostname.substring(0, 64);
                                    }

                                    try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(new File("/tmp/detailed_hostname.txt")))) {
                                        bufferedWriter.write(detailedHostname);

                                        loadingWindow.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); // Allow closing loading window to quit now that the important file has been made.
                                    } catch (IOException saveDetailedHostNameException) {
                                        if (isTestMode) {
                                            System.out.println("saveDetailedHostNameException: " + saveDetailedHostNameException);
                                        }
                                    }
                                }
                            }
                        } else if (isWindows) {
                            createWindowsDriversCacheModelNameFile();
                            loadingWindow.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); // Allow closing loading window to quit now that the important file has been made.
                        }

                        return (isLoggedIn ? loadStatusHistory(false) : null);
                    }

                    @Override
                    protected void done() {
                        String[] currentStatusAndTech = null;

                        String loadWindowExceptionString = "UNKNOWN LOAD WINDOW ERROR";
                        try {
                            currentStatusAndTech = get();
                        } catch (InterruptedException | ExecutionException loadWindowException) {
                            System.out.println("loadWindowException: " + loadWindowException);
                            loadWindowExceptionString = loadWindowException.toString();
                        }

                        long endLoadTime = System.currentTimeMillis();

                        if (isMacOS && wasFirstLoad && new File("/Users/fg-demo/Applications/Free Geek Setup.app").exists()) {
                            // Do this check AFTER checking for updates so that if things change I can change behavior with an update instead of loading being blocked because this was hit before updating.

                            loadingWindow.closeWindow();

                            JOptionPane.showMessageDialog(null, "<html><b><i>Free Geek Setup</i> Hasn't Been Run Yet</b><br/><br/>Please run <i>Free Geek Setup</i> and then try running <i>QA Helper</i> again.</html>", "QA Helper  —  Free Geek Setup Not Run", JOptionPane.ERROR_MESSAGE);

                            try {
                                Runtime.getRuntime().exec(new String[]{"/usr/bin/open", "-na", "/Users/fg-demo/Applications/Free Geek Setup.app"});
                            } catch (IOException launchFreeGeekSetupError) {
                                System.out.println("launchFreeGeekSetupError: " + launchFreeGeekSetupError);
                            }
                            System.exit(0);
                        }

                        displayComputerSpecs(currentStatusAndTech);

                        if (isLinuxFirstLaunch && !lastStatus.equals("UNKNOWN STATUS")) {
                            new LinuxAutoScripts(lastStatus, adminPassword);

                            isLinuxFirstLaunch = false;
                        }

                        if (!isVisible()) {
                            logSpecsAction("Launch (" + (endLoadTime - startLoadTime) + " ms)");

                            ignoreWindowMovesUntilTime = System.currentTimeMillis() + 1500;

                            setLocationRelativeTo(null);
                            setActionsEnabled(true);

                            loadingWindow.closeWindow();
                            loadingWindow.setAlwaysOnTop(true);
                        } else {
                            setActionsEnabled(true, false);
                            loadingWindow.closeWindow();
                        }

                        focusNextTestTaskVerifyButton(null);
                        focusWindow();

                        if (wasFirstLoad) {
                            if (isLinux) {
                                // On Linux, when loading the window before it is visible, the Verify buttons on the right side of the
                                // window end up not horizontally aligned (1 pixel below) with their Test buttons for some reason.
                                // When adding text size adjustments, I found that changing the text size fixed this alignment issue.
                                // From testing, I found that the alignment got fixed even when resetting the default font size.
                                // So, to force the alignment to be fixed right away, reset the default font size after making the window visible.
                                // Not sure why exactly this works, but it does!

                                menResetTextSizeActionPerformed(null);
                            }

                            // If the resolution is small enough to have scrollbars visible on first load,
                            // automatically reduce text size until scroll bars are no longer visible.
                            setActionsEnabled(false);

                            (new SwingWorker<Void, String>() {
                                @Override
                                protected Void doInBackground() throws Exception {
                                    while (themeUpdated) { // Make sure the initial display update is fully done before checking for scrollbars.
                                        TimeUnit.MILLISECONDS.sleep(10);
                                    }

                                    while ((UIManager.getFont("defaultFont").getSize() > 6) && (contentScrollPane.getHorizontalScrollBar().isVisible() || contentScrollPane.getVerticalScrollBar().isVisible())) {
                                        themeUpdated = true; // Must set "themeUpdated" to "true" before calling "menDecreaseTextSizeActionPerformed" on the main thread since it might not get updated in this background thread immediately causing the wait loop would never get hit.

                                        publish("decrease-text-size"); // The size change must happen on the main thread, but we want to wait for the display update in the background.

                                        while (themeUpdated) { // Wait until the display update is completely finished before checking whether or not scrollbars are visible and decreasing again if necessary.
                                            TimeUnit.MILLISECONDS.sleep(10);
                                        }
                                    }

                                    return null;
                                }

                                @Override
                                protected void process(java.util.List<String> tasks) {
                                    menDecreaseTextSizeActionPerformed(null);
                                }

                                @Override
                                protected void done() {
                                    setActionsEnabled(true);
                                    isReloading = false;
                                }
                            }).execute();
                        } else {
                            isReloading = false;
                        }

                        String finalLoadWindowExceptionString = loadWindowExceptionString;

                        (new SwingWorker<Void, Void>() {
                            @Override
                            protected Void doInBackground() throws Exception {
                                TimeUnit.MILLISECONDS.sleep(400); // Always sleep a a bit before showing any launch dialogs.

                                while (isReloading) {
                                    TimeUnit.MILLISECONDS.sleep(10); // Keep sleeping until window has been resized (if necessary).
                                }

                                return null;
                            }

                            @Override
                            protected void done() {
                                if (wasFirstLoad && (isLinuxUbiquityMode || isWindowsPE)) {
                                    List<String> allowedJavaVersions = Arrays.asList("21.0.8");
                                    String runningJavaVersion = System.getProperty("java.version");
                                    if (!allowedJavaVersions.contains(runningJavaVersion)) {
                                        playAlertSound("error");
                                        sendErrorEmail("Outdated " + (isLinuxUbiquityMode ? "Linux" : "Windows") + " Installer\n\nRunning Java Version: " + runningJavaVersion + "\nAllowed Java Version(s): " + String.join(", ", allowedJavaVersions));
                                        JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>This Installer Is Outdated</b><br/><br/>Please deliver this USB installer to Free Geek I.T.</html>", "QA Helper  —  Outdated Installer", JOptionPane.ERROR_MESSAGE);
                                    }
                                }

                                if (!isPeripheralTestMode) {
                                    if (computerSpecs == null) {
                                        playAlertSound("error");
                                        sendErrorEmail("Failed to Load Computer Specs (computerSpecs IS NULL): " + finalLoadWindowExceptionString);
                                        JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Failed to Load Computer Specs</b><br/><br/><pre>" + finalLoadWindowExceptionString + "</pre><br/>This should not have happened, please inform Free Geek I.T.</html>", "QA Helper  —  Load Specs Failed", JOptionPane.ERROR_MESSAGE);
                                    } else if (!computerSpecs.getLoadSpecsException().isEmpty()) {
                                        playAlertSound("error");
                                        sendErrorEmail("Error Loading Computer Specs: " + computerSpecs.getLoadSpecsException());
                                        JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Error Loading Computer Specs</b><br/><br/><pre>" + computerSpecs.getLoadSpecsException() + "</pre><br/>This should not have happened, please inform Free Geek I.T.</html>", "QA Helper  —  Load Specs Error", JOptionPane.ERROR_MESSAGE);
                                    } else if (wasFirstLoad) {
                                        if ((isLinuxUbiquityMode || isWindowsPE) && computerSpecs.getFullStorage().contains(" eMMC")) {
                                            playAlertSound("error");
                                            int eMMCDetectedResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html><b>eMMC Storage Detected:</b><br/>" + computerSpecs.getFullStorage() + "<br/><br/><i>All computers with eMMC storage are below build specifications.</i><br/><br/><b>This computer left SDA by accident and the eMMC drive WAS NOT SECURELY ERASED.</b><br/><br/><u>This computer with un-erased eMMC storage must be reported and sent back to SDA.</u></html>", "QA Helper  —  eMMC Detected", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, null, new String[]{"Shut Down", "Certify This eMMC Has Been Securely Erased"}, "Shut Down");

                                            if (eMMCDetectedResponse != JOptionPane.NO_OPTION) { // Check for "JOptionPane.NO_OPTION" specifically because still want pressing Escape key to Shut Down. Certifying must be manually clicked.
                                                if (isLinux) {
                                                    try {
                                                        while (!new CommandReader(new String[]{"/usr/bin/pgrep", "-fn", "/auto-scripts/.*\\+(user|root)\\.sh$"}).getFirstOutputLine().isEmpty()) {
                                                            TimeUnit.SECONDS.sleep(2);
                                                        }

                                                        Runtime.getRuntime().exec(new String[]{"/bin/systemctl", "poweroff"}).waitFor();
                                                        TimeUnit.SECONDS.sleep(2);
                                                    } catch (IOException | InterruptedException systemctlPowerOffException) {
                                                        if (isTestMode) {
                                                            System.out.println("systemctlPowerOffException: " + systemctlPowerOffException);
                                                        }
                                                    }
                                                } else if (isWindows) {
                                                    try {
                                                        Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "Stop-Computer"}).waitFor();
                                                        TimeUnit.SECONDS.sleep(2);
                                                    } catch (IOException | InterruptedException stopComputerException) {
                                                        if (isTestMode) {
                                                            System.out.println("stopComputerException: " + stopComputerException);
                                                        }
                                                    }
                                                }

                                                System.exit(0);
                                            }
                                        }

                                        if (isWindows && (computerSpecs.getSerialIsMAC() || computerSpecs.getFullSerial().isEmpty() || computerSpecs.getFullSerial().equals("N/A"))) {
                                            String[] noSerialDialogButtons = new String[]{"Shut Down", "Reboot", "Keep Using QA Helper"};

                                            playAlertSound("error");
                                            int noSerialDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html><b>No Serial Number to License Windows with Digital Product Key</b><br/><br/>Since this computer does not have a computer or motherboard serial number available via software,<br/><u>it cannot have a Digital Product Key applied to it to license Windows.</u></html>", "QA Helper  —  No Serial Number to License Windows", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, noSerialDialogButtons, noSerialDialogButtons[0]);

                                            String noSerialDialogResponseString = "Keep Using QA Helper";
                                            if (noSerialDialogResponse > -1) {
                                                noSerialDialogResponseString = noSerialDialogButtons[noSerialDialogResponse];
                                            }

                                            switch (noSerialDialogResponseString) {
                                                case "Shut Down":
                                                    try {
                                                        Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "Stop-Computer"}).waitFor();
                                                        TimeUnit.SECONDS.sleep(2);
                                                    } catch (IOException | InterruptedException stopComputerException) {
                                                        if (isTestMode) {
                                                            System.out.println("stopComputerException: " + stopComputerException);
                                                        }
                                                    }

                                                    System.exit(0);
                                                    break;
                                                case "Reboot":
                                                    try {
                                                        Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "Restart-Computer"}).waitFor();
                                                        TimeUnit.SECONDS.sleep(2);
                                                    } catch (IOException | InterruptedException restartComputerException) {
                                                        if (isTestMode) {
                                                            System.out.println("restartComputerException: " + restartComputerException);
                                                        }
                                                    }

                                                    System.exit(0);
                                                    break;
                                                default:
                                                    break;
                                            }
                                        }

                                        if (!manuallySetDeviceType && computerSpecs.getPossibleCustomDesktopOrBareMotherboard()) {
                                            String[] customDesktopOrBareMotherboardDialogButtons = new String[]{"Custom Desktop", "Bare Motherboard"};

                                            playAlertSound("beep");
                                            int customDesktopOrBareMotherboardDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html><b>Are you testing a fully built <u>custom desktop</u> or just a <u>bare motherboard</u>?</b></html>", "QA Helper  —  Specify Device Type", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, customDesktopOrBareMotherboardDialogButtons, customDesktopOrBareMotherboardDialogButtons[0]);

                                            String customDesktopOrBareMotherboardDialogResponseString = "Custom Desktop";
                                            if (customDesktopOrBareMotherboardDialogResponse > -1) {
                                                customDesktopOrBareMotherboardDialogResponseString = customDesktopOrBareMotherboardDialogButtons[customDesktopOrBareMotherboardDialogResponse];
                                            }

                                            if (customDesktopOrBareMotherboardDialogResponseString.equals("Bare Motherboard")) {
                                                menDeviceTypeMotherboardActionPerformed(null);
                                            }
                                        }
                                    }
                                }
                            }
                        }).execute();
                    }
                }).execute();
            } else {
                displayComputerSpecs();

                if (!loadingWindow.isVisible()) {
                    setActionsEnabled(true);
                    focusNextTestTaskVerifyButton(null);
                    focusWindow();
                }

                isReloading = false;
            }
        } else {
            loadingWindow.setVisible(true);
        }
    }

    private void getAdminPassword(String passwordPromptReason) {
        try {
            if (!isLinux) {
                adminPassword = "*MacDoesNotNeedAdmin*"; // Mac doesn't need admin password, change it from "*UNKNOWN*" so reload() doesn't keep trying
                adminPasswordQuotedForShell = "'" + adminPassword + "'";
                return;
            }

            // Make sure previous admin password is still correct (it gets changed at the end of Free Geek builds).
            if (!adminPassword.equals("*UNKNOWN*") && new CommandReader("printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk echo '<CORRECT>'").getFirstOutputLine().equals("<CORRECT>")) {
                return;
            }

            List<String> currentUserGroups = Arrays.asList(new CommandReader(new String[]{"/usr/bin/groups"}).getFirstOutputLine().split(" "));

            if (currentUserGroups.contains("root")) {
                if (new CommandReader("echo '' | /usr/bin/sudo -Sk echo '<CORRECT>'").getFirstOutputLine().equals("<CORRECT>")) {
                    adminPassword = "";
                    adminPasswordQuotedForShell = "''";
                    return;
                }
            } else if (!currentUserGroups.contains("adm") && !currentUserGroups.contains("admin") && !currentUserGroups.contains("sudo") && !currentUserGroups.contains("sudoers")) {
                loadingWindow.setAlwaysOnTop(false);
                playAlertSound("error");
                JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>You must be logged in as an Admin or Sudo user to be able to <i>" + passwordPromptReason + "</i>.</b></html>", "QA Helper  —  Admin Warning", JOptionPane.WARNING_MESSAGE);
                loadingWindow.setAlwaysOnTop(true);
                return;
            }

            ArrayList<String> possibleAdminPasswords = new ArrayList<>();

            String configFile = "";
            ArrayList<String> configLines = new ArrayList<>();

            try {
                String launchPath = new File(QAHelper.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getPath();

                if (launchPath.endsWith(".jar")) {
                    String launchDirectory = launchPath.substring(0, launchPath.lastIndexOf("/"));
                    String defaultDirectory = System.getProperty("user.home") + "/.local/qa-helper";

                    configFile = launchDirectory + "/qa-helper.config";
                    if (!new File(configFile).exists()) {
                        configFile = defaultDirectory + "/qa-helper.config";
                    }

                    if (new File(configFile).exists()) {
                        configLines.addAll(Arrays.asList(new CommandReader(new String[]{"/usr/bin/unzip", "-P", configPassword, "-p", configFile}).getOutputLines()));
                    }
                }
            } catch (URISyntaxException readConfigFileException) {
                if (isTestMode) {
                    System.out.println("readConfigFileException: " + readConfigFileException);
                }
            }

            configLines.forEach((thisConfigLine) -> {
                if (thisConfigLine.startsWith("Admin Password: ")) {
                    possibleAdminPasswords.add(thisConfigLine.substring(16));
                }
            });

            String shortCurrentUsername = new CommandReader(new String[]{"/usr/bin/id", "-un"}).getFirstOutputLine();

            if (possibleAdminPasswords.isEmpty()) {
                // If no passwords are in the config, try some known passwords.
                if (shortCurrentUsername.equals("oem")) {
                    // This will always be the Free Geek username.
                    possibleAdminPasswords.add(privateStrings.getInsecureFreeGeekPassword());
                    possibleAdminPasswords.add(privateStrings.getCurrentFreeGeekPassword());
                    possibleAdminPasswords.add(privateStrings.getPreviousFreeGeekPassword());
                    possibleAdminPasswords.add(privateStrings.getOlderFreeGeekPassword());
                }

                possibleAdminPasswords.add(privateStrings.getGenericPassword());
                possibleAdminPasswords.add(""); // Always check empty string to see if no password is needed (like on live boots).
            } else if ((possibleAdminPasswords.contains(privateStrings.getPreviousFreeGeekPassword()) && possibleAdminPasswords.size() == 3) || (possibleAdminPasswords.contains(privateStrings.getOlderFreeGeekPassword()) && possibleAdminPasswords.size() == 2)) {
                possibleAdminPasswords.add(privateStrings.getCurrentFreeGeekPassword()); // Make sure the current Store password gets included if an old config is loaded.
            }
            for (String thisPossibleAdminPassword : possibleAdminPasswords) {
                String thisPossibleAdminPasswordQuotedForShell = "'" + thisPossibleAdminPassword.replace("'", "'\\''") + "'";
                if (new CommandReader("printf '%s\\n' " + thisPossibleAdminPasswordQuotedForShell + " | /usr/bin/sudo -Sk echo '<CORRECT>'").getFirstOutputLine().equals("<CORRECT>")) {
                    adminPassword = thisPossibleAdminPassword;
                    adminPasswordQuotedForShell = thisPossibleAdminPasswordQuotedForShell;
                    return;
                }
            }

            String fullCurrentUsername = new CommandReader(new String[]{"/usr/bin/getent", "passwd", shortCurrentUsername}).getFirstOutputLine().split(":")[4].replace(",", "");

            while (true) {
                JPasswordField passwordField = new JPasswordField();
                passwordField.putClientProperty("JTextField.showClearButton", true);

                JCheckBox saveAdminPasswordCheckbox = new JCheckBox("Save Admin Password in QA Helper's encrypted configuration file for future use.");
                saveAdminPasswordCheckbox.setSelected(true);

                Object[] passwordPromptFields = new Object[]{
                    "<html><b>Enter Admin Password for \"" + fullCurrentUsername + "\" to <i>" + passwordPromptReason + "</i>:</b></html>",
                    passwordField,
                    (configFile.isEmpty() ? "" : saveAdminPasswordCheckbox)
                };

                JOptionPane passwordPromptPane = new JOptionPane(passwordPromptFields, JOptionPane.PLAIN_MESSAGE, JOptionPane.OK_CANCEL_OPTION) {
                    @Override
                    public void selectInitialValue() {
                        passwordField.requestFocusInWindow();
                    }
                };

                loadingWindow.setAlwaysOnTop(false);
                passwordPromptPane.createDialog(qaHelperWindow, "QA Helper  —  Admin Password").setVisible(true);
                loadingWindow.setAlwaysOnTop(true);

                if (passwordPromptPane.getValue() != null && (int) passwordPromptPane.getValue() == JOptionPane.OK_OPTION) {
                    String possibleAdminPassword = new String(passwordField.getPassword());
                    String possibleAdminPasswordQuotedForShell = "'" + possibleAdminPassword.replace("'", "'\\''") + "'";

                    if (new CommandReader("printf '%s\\n' " + possibleAdminPasswordQuotedForShell + " | /usr/bin/sudo -Sk echo '<CORRECT>'").getFirstOutputLine().equals("<CORRECT>")) {
                        adminPassword = possibleAdminPassword;
                        adminPasswordQuotedForShell = possibleAdminPasswordQuotedForShell;

                        if (!configFile.isEmpty() && saveAdminPasswordCheckbox.isSelected()) {
                            try {
                                configLines.add(0, "Admin Password: " + adminPassword); // Add new passwords to front so they are tried first.
                                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "printf '%s\\n' '" + String.join("\n", configLines).replace("'", "'\\''") + "' | /usr/bin/zip -P '" + configPassword.replace("'", "'\\''") + "' > '" + configFile.replace("'", "'\\''") + "'"});
                            } catch (IOException updateConfigFileException) {
                                if (isTestMode) {
                                    System.out.println("updateConfigFileException: " + updateConfigFileException);
                                }
                            }
                        }

                        break;
                    } else {
                        playAlertSound("error");
                    }
                } else {
                    break;
                }
            }
        } catch (HeadlessException | SecurityException getAdminPasswordException) {
            playAlertSound("error");
            if (isTestMode) {
                System.out.println("getAdminPasswordException: " + getAdminPasswordException);
            }
            adminPassword = "*UNKNOWN*";
            adminPasswordQuotedForShell = "'" + adminPassword + "'";
        }
    }

    private boolean isValidAppVersion(String thisVersion) {
        return thisVersion.matches("^[0-9]+[.][0-9]+[.][0-9]+-[0-9]+$");
    }

    private int compareAppVersions(String thisVersion, String thatVersion) {
        if (thisVersion.equals(thatVersion)) {
            return 0;
        } else if (isValidAppVersion(thisVersion) && isValidAppVersion(thatVersion)) {
            String[] thisVersionParts = thisVersion.split("-");
            String[] thatVersionParts = thatVersion.split("-");

            try {
                SimpleDateFormat versionDateFormat = new SimpleDateFormat("yyyy.MM.dd");
                Date thisVersionDate = versionDateFormat.parse(thisVersionParts[0]);
                Date thatVersionDate = versionDateFormat.parse(thatVersionParts[0]);
                int versionDateComparison = thatVersionDate.compareTo(thisVersionDate);

                if (versionDateComparison == 1 || ((versionDateComparison == 0) && (Integer.parseInt(thatVersionParts[1]) > Integer.parseInt(thisVersionParts[1])))) {
                    return 1;
                }
            } catch (NumberFormatException | ParseException parseVersionDatesException) {

            }
        }

        return -1;
    }

    private void autoUpdateApp() {
        try {
            if (!isLinuxUbiquityMode && !isWindowsPE) {
                boolean shouldCheckForUpdates = false;

                URI launchURI = QAHelper.class.getProtectionDomain().getCodeSource().getLocation().toURI();
                String launchURIString = launchURI.toString();

                String launchPath;
                if (isWindows && launchURIString.startsWith("file://")) {
                    launchPath = new File(launchURIString.replace("file://", "//").replace("%20", " ")).getPath(); // To fix server (or Parallels shared folder) paths on Windows.
                } else {
                    launchPath = new File(launchURI).getPath();
                }

                String launchDirectory = launchPath.substring(0, launchPath.lastIndexOf((isWindows ? "\\" : "/")));
                String javaPath = launchDirectory + "/java-jre/bin/java";

                if (isLinux) {
                    String runningJarInfo = new CommandReader(new String[]{"/usr/bin/pgrep", "-fa", "QA_Helper\\.jar"}).getFirstOutputLineNotContaining("sudo ");
                    String runningJarInfoFirstPart = runningJarInfo.split(" -jar ")[0];
                    javaPath = runningJarInfoFirstPart.substring(runningJarInfoFirstPart.indexOf(" ") + 1);
                } else if (isWindows) {
                    javaPath = new CommandReader(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "(Get-CimInstance Win32_Process -Filter \\\"Name LIKE 'java%.exe' AND CommandLine LIKE '%QA_Helper.jar%'\\\" | Select-Object -First 1).Path"}).getFirstOutputLine();
                    if (javaPath.endsWith("java.exe") && new File(javaPath.replace("java.exe", "javaw.exe")).exists()) {
                        javaPath = javaPath.replace("java.exe", "javaw.exe");
                    }
                }

                if (!isLinux && (launchPath.endsWith(".app/Contents/Java/QA_Helper.jar") || launchPath.endsWith(".app/Contents/app/QA_Helper.jar"))) {
                    launchPath = launchPath.replace("/Contents/Java/QA_Helper.jar", "").replace("/Contents/app/QA_Helper.jar", "");
                    launchDirectory = launchPath.substring(0, launchPath.lastIndexOf("/"));

                    shouldCheckForUpdates = true;
                } else if (launchPath.endsWith(".jar")) {
                    if (!isWindows && (!new File(javaPath).exists() || !new File(javaPath).canExecute())) {
                        javaPath = "/usr/bin/java";
                    }

                    shouldCheckForUpdates = !javaPath.isEmpty();
                }

                if (shouldCheckForUpdates) {
                    // CANNOT use "computerSpecs.getFullOS()" here to pass the OS version during update check since it's not loaded yet.
                    String osFromJava = System.getProperty("os.name") + " " + System.getProperty("os.version");

                    LinkedHashMap<String, String> getLatestVersionParameters = new LinkedHashMap<>();
                    getLatestVersionParameters.put("os", osFromJava);
                    getLatestVersionParameters.put("version", appVersion);
                    String latestVersion = new WebReader("https://apps.freegeek.org/qa-helper/download/latest-version.php", getLatestVersionParameters, 15).getFirstOutputLine();

                    if (compareAppVersions(appVersion, latestVersion) == 1) {
                        loadingWindow.setLoadingTextAndDisplay("QA Helper is Updating Itself", "Updating", "CounterclockwiseArrowsButton");

                        String tempDirectory = System.getProperty("java.io.tmpdir");
                        if (!tempDirectory.endsWith(isWindows ? "\\" : "/")) {
                            tempDirectory += (isWindows ? "\\" : "/");
                        }

                        if (launchPath.endsWith(".jar")) {
                            String possibleSudo = (isLinux && !adminPassword.equals("*UNKNOWN*") ? "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk " : "");

                            String appUpdateZipFilename = (isLinux ? "QAHelper-linux-jar.zip" : (isWindows ? "QAHelper-windows-jar.zip" : "QAHelper-jar.zip"));
                            String appUpdateJarFilename = "QA_Helper.jar";

                            String appUpdateZipFilePath = tempDirectory + appUpdateZipFilename;
                            String appUpdateJarTempFilePath = tempDirectory + appUpdateJarFilename;

                            File appUpdateZipFile = new File(appUpdateZipFilePath);
                            if (appUpdateZipFile.exists()) {
                                appUpdateZipFile.delete();
                            }

                            File appUpdateJarTempFile = new File(appUpdateJarTempFilePath);
                            if (appUpdateJarTempFile.exists()) {
                                appUpdateJarTempFile.delete();
                            }

                            if (isWindows) {
                                if (new File(tempDirectory, "qa_helper-update_finisher.cmd").exists()) {
                                    new File(tempDirectory, "qa_helper-update_finisher.cmd").delete();
                                }

                                if (new File(tempDirectory, "qa-helper_update-finisher.cmd").exists()) { // OLD naming format
                                    new File(tempDirectory, "qa-helper_update-finisher.cmd").delete();
                                }

                                Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command",
                                    "$ProgressPreference = 'SilentlyContinue';" // Not showing progress makes "Invoke-WebRequest" downloads MUCH faster: https://stackoverflow.com/a/43477248
                                    + "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12, [Net.SecurityProtocolType]::Ssl3;"
                                    + "Invoke-WebRequest https://apps.freegeek.org/qa-helper/download/" + appUpdateZipFilename + " -OutFile '" + appUpdateZipFilePath + "';" // TODO: Do in Java. Eventually.
                                    + "Expand-Archive '" + appUpdateZipFilePath + "' -DestinationPath " + tempDirectory + " -Force;"
                                }).waitFor();
                            } else {
                                if (appUpdateZipFile.exists()) {
                                    Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", possibleSudo + "/bin/rm -f '" + appUpdateZipFilePath.replace("'", "'\\''") + "'"}).waitFor();
                                }
                                if (appUpdateJarTempFile.exists()) {
                                    Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", possibleSudo + "/bin/rm -f '" + appUpdateJarTempFilePath.replace("'", "'\\''") + "'"}).waitFor();
                                }

                                Runtime.getRuntime().exec(new String[]{"/usr/bin/curl", "--connect-timeout", "5", "-sfL", "https://apps.freegeek.org/qa-helper/download/" + appUpdateZipFilename, "-o", appUpdateZipFilePath}).waitFor(); // TODO: Do in Java. Eventually.
                                Runtime.getRuntime().exec(new String[]{"/usr/bin/unzip", "-o", "-j", appUpdateZipFilePath, appUpdateJarFilename, "-d", tempDirectory}).waitFor();
                            }

                            if (appUpdateZipFile.exists()) {
                                appUpdateZipFile.delete();
                            }

                            String downloadedJarVersion = "";

                            if (new File(appUpdateJarTempFilePath).exists()) {
                                if (isWindows) {
                                    downloadedJarVersion = new CommandReader(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command",
                                        "Add-Type -AssemblyName System.IO.Compression.FileSystem;"
                                        + "$qaHelperJar = [System.IO.Compression.ZipFile]::OpenRead('" + appUpdateJarTempFilePath + "');"
                                        + "$qaHelperJar.Entries | Where-Object { $_.Name -eq 'qa-helper-version.txt' } | Select-Object -First 1 { [System.IO.Compression.ZipFileExtensions]::ExtractToFile($_, '" + tempDirectory + "qa_helper-downloaded_version.txt', $true) } | Out-Null;"
                                        + "$qaHelperJar.Dispose();"
                                        + "$downloadedJarVersion = Get-Content '" + tempDirectory + "qa_helper-downloaded_version.txt' -First 1;"
                                        + "Remove-Item '" + tempDirectory + "qa_helper-downloaded_version.txt' -Force;"
                                        + "Write-Output $downloadedJarVersion;"
                                    }).getFirstOutputLine();
                                } else {
                                    downloadedJarVersion = new CommandReader(new String[]{"/usr/bin/unzip", "-p", appUpdateJarTempFilePath, "*/qa-helper-version.txt"}).getFirstOutputLine();
                                }
                            }

                            if (!downloadedJarVersion.isEmpty() && downloadedJarVersion.equals(latestVersion)) {
                                if (!isWindows) {
                                    // Windows needs the current process to quit before it will allow the file to be overwritten
                                    Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", possibleSudo + "/bin/mv -f '" + appUpdateJarTempFilePath.replace("'", "'\\''") + "' '" + launchPath.replace("'", "'\\''") + "'"}).waitFor(); // Would not get moved with sudo when app was quit before this command for some reason.
                                }
                                if (!isWindows && new File(launchPath).exists() && !new File(appUpdateJarTempFilePath).exists()) {
                                    Runtime.getRuntime().exec(new String[]{"/bin/bash", "-c", "/bin/sleep 0.5; while [[ \"$(/usr/bin/pgrep -fl 'QA_Helper\\.jar')\" == *java* ]]; do " + (isLinux ? "/usr/bin/wmctrl -Fc 'QA Helper  —  Updating' || /usr/bin/wmctrl -Fc 'QA Helper  —  Loading' || /usr/bin/wmctrl -Fc 'QA Helper'; " : "") + "/bin/sleep 0.5; done; '" + javaPath.replace("'", "'\\''") + "' -jar '" + launchPath.replace("'", "'\\''") + "' & disown"});

                                    System.exit(0);
                                } else if (isWindows && new File(launchPath).exists() && new File(appUpdateJarTempFilePath).exists()) {
                                    File windowsQAhelperUpdateFinisherFile = new File(tempDirectory, "qa_helper-update_finisher.cmd");

                                    try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(windowsQAhelperUpdateFinisherFile))) {
                                        bufferedWriter.write(
                                                "@ECHO OFF" + "\n"
                                                + "\n"
                                                + ":WaitForQuit" + "\n"
                                                + "\\Windows\\System32\\timeout.exe /t 1 /nobreak >NUL" + "\n"
                                                + "\\Windows\\System32\\tasklist.exe /nh /fi \"WINDOWTITLE eq QA Helper*\" | \\Windows\\System32\\find.exe \"No tasks are running\" >NUL" + "\n"
                                                + "IF ERRORLEVEL 1 (" + "\n"
                                                + "\t" + "\\Windows\\System32\\taskkill.exe /fi \"WINDOWTITLE eq QA Helper*\" >NUL" + "\n"
                                                + "\t" + "GOTO WaitForQuit" + "\n"
                                                + ")" + "\n"
                                                + "\n"
                                                + "MOVE /Y \"" + appUpdateJarTempFilePath + "\" \"" + launchPath + "\" >NUL" + "\n"
                                                + "\n"
                                                + "IF EXIST \"" + appUpdateJarTempFilePath + "\" (" + "\n"
                                                + "\t" + "\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoLogo -NoProfile -NonInteractive -Command Start-Process -WindowStyle Hidden -Verb RunAs \"" + windowsQAhelperUpdateFinisherFile.getPath() + "\"" + "\n"
                                                + ") ELSE (" + "\n"
                                                + "\t" + "START \"QA Helper Launcher\" \"" + javaPath + "\" -jar \"" + launchPath + "\"" + "\n"
                                                + ")" + "\n"
                                                + "\n"
                                                + "EXIT 0"
                                                + "\n"
                                        );
                                    } catch (IOException writeWindowsQAhelperUpdateFinisherFileException) {
                                        if (isTestMode) {
                                            System.out.println("writeWindowsQAhelperUpdateFinisherFileException: " + writeWindowsQAhelperUpdateFinisherFileException);
                                        }
                                    }

                                    if (windowsQAhelperUpdateFinisherFile.exists()) {
                                        // Need to create a CMD file and launch it with Start-Process so it doesn't get killed when QA Helper quits
                                        Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "Start-Process -WindowStyle Hidden '" + windowsQAhelperUpdateFinisherFile.getPath() + "'"}).waitFor();

                                        System.exit(0);
                                    } else {
                                        loadingWindow.closeWindow();
                                        playAlertSound("error");
                                        sendErrorEmail("App Update Error - Failed to create update finisher command file.");
                                        JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Error Updating <i>QA Helper</i></b><br/><br/><i>Failed to create update finisher command file.</i></html>", "QA Helper  —  Update Error", JOptionPane.ERROR_MESSAGE);
                                    }
                                } else {
                                    loadingWindow.closeWindow();
                                    playAlertSound("error");
                                    sendErrorEmail("App Update Error");
                                    JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Error Updating <i>QA Helper</i></b><br/><br/><i>You must re-download and re-install QA Helper.</i><br/><br/>Click \"OK\" to go to \"https://apps.freegeek.org/qa-helper/download\" to re-download QA Helper.</html>", "QA Helper  —  Update Error", JOptionPane.ERROR_MESSAGE);

                                    if (isLinux) {
                                        try {
                                            Runtime.getRuntime().exec(new String[]{"/usr/bin/google-chrome-stable", "--password-store=basic", "--start-maximized", "--incognito", "https://apps.freegeek.org/qa-helper/download"});
                                        } catch (IOException chromeException) {
                                            if (isTestMode) {
                                                System.out.println("chromeException: " + chromeException);
                                            }

                                            try {
                                                Runtime.getRuntime().exec(new String[]{"/usr/bin/firefox", "-private", "https://apps.freegeek.org/qa-helper/download"});
                                            } catch (IOException firefoxException) {
                                                if (isTestMode) {
                                                    System.out.println("firefoxException: " + firefoxException);
                                                }

                                                try {
                                                    Desktop.getDesktop().browse(new URI("https://apps.freegeek.org/qa-helper/download"));
                                                } catch (IOException | URISyntaxException openQAHelperDownloadException) {
                                                    if (isTestMode) {
                                                        System.out.println("openQAHelperDownloadException: " + openQAHelperDownloadException);
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        try {
                                            Desktop.getDesktop().browse(new URI("https://apps.freegeek.org/qa-helper/download"));
                                        } catch (IOException | URISyntaxException openQAHelperDownloadException) {
                                            if (isTestMode) {
                                                System.out.println("openQAHelperDownloadException: " + openQAHelperDownloadException);
                                            }
                                        }
                                    }

                                    System.exit(0);
                                }
                            } else {
                                playAlertSound("error");
                            }

                            loadingWindow.setLoadingTextAndDisplay("QA Helper is Loading Computer Specs", "Loading");

                            if (isWindows) {
                                new File(tempDirectory, "QA_Helper.jar").delete();
                            } else {
                                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", possibleSudo + "/bin/rm -f '" + tempDirectory.replace("'", "'\\''") + "QA_Helper.jar'"}).waitFor();
                            }
                        } else {
                            if (launchPath.contains("/AppTranslocation/")) {
                                // Need to get actual launch path before updating if app is currently quarantined (running from within an "AppTranslocation" folder).

                                String[] appPaths = new CommandReader(new String[]{"/usr/bin/mdfind", "kMDItemCFBundleIdentifier = org.freegeek.QA-Helper"}).getOutputLines();

                                if (appPaths.length > 0) {
                                    String mostRecentlyOpenedAppPath = launchPath;
                                    String mostRecentlyOpenedAppDate = "1984-01-24 00:00:00 +0000";

                                    for (String thisAppPath : appPaths) {
                                        if (!thisAppPath.contains("/AppTranslocation/")) {
                                            String appLastUsedDateString = new CommandReader(new String[]{"/usr/bin/mdls", "-raw", "-name", "kMDItemLastUsedDate", thisAppPath}).getFirstOutputLine();

                                            // kMDItemLastUsedDate will be "(null)" if it was never launched (which would happen when launching a quarantined app), so lets check the date added.
                                            if (appLastUsedDateString.isEmpty() || appLastUsedDateString.equals("(null)")) {
                                                appLastUsedDateString = new CommandReader(new String[]{"/usr/bin/mdls", "-raw", "-name", "kMDItemDateAdded", thisAppPath}).getFirstOutputLine();
                                            }

                                            if (appLastUsedDateString.compareTo(mostRecentlyOpenedAppDate) > 0) {
                                                mostRecentlyOpenedAppDate = appLastUsedDateString;
                                                mostRecentlyOpenedAppPath = thisAppPath;
                                            }
                                        }
                                    }

                                    if (!launchPath.equals(mostRecentlyOpenedAppPath)) {
                                        launchPath = mostRecentlyOpenedAppPath;
                                        launchDirectory = launchPath.substring(0, launchPath.lastIndexOf("/"));
                                    }
                                }
                            }

                            // If we're quarantined and for some reason we didn't get a proper path, don't update because it won't work.
                            if (!launchPath.contains("/AppTranslocation/")) {
                                // This Mac auto-update code was adapted from code I wrote for "IPSW Updater", so some of the variables
                                // may be excessive because that code had app name flexibility that isn't necessary here.
                                // But, I didn't want to change the code a lot since it will be easier to share back and forth if I make a valuable changes in the future. - Pico

                                String nameOfMe = "QA Helper";
                                String updatedAppFileName = nameOfMe + ".app";

                                // If is macOS Sierra or newer, allow to update to QA Helper built with Java 17 or newer (and is a Universal Binary).
                                String appUpdateZipFilename = (isMacOSsierraOrNewer ? "QAHelper-mac-universal.zip" : "QAHelper-mac-ElCapitan.zip");

                                String appUpdateZipFilePath = tempDirectory + appUpdateZipFilename;
                                String appUpdateTempFilePath = tempDirectory + updatedAppFileName;

                                new File(appUpdateZipFilePath).delete();
                                Runtime.getRuntime().exec(new String[]{"/bin/rm", "-rf", appUpdateTempFilePath}).waitFor();

                                Runtime.getRuntime().exec(new String[]{"/usr/bin/curl", "--connect-timeout", "5", "-sfL", "https://apps.freegeek.org/qa-helper/download/" + appUpdateZipFilename, "-o", appUpdateZipFilePath}).waitFor(); // TODO: Do in Java. Eventually.
                                Runtime.getRuntime().exec(new String[]{"/usr/bin/ditto", "-x", "-k", "--noqtn", appUpdateZipFilePath, tempDirectory}).waitFor();

                                new File(appUpdateZipFilePath).delete();

                                if (new File(appUpdateTempFilePath).exists() && new CommandReader(new String[]{"/usr/bin/unzip", "-p", appUpdateTempFilePath + "/Contents/" + (new File(appUpdateTempFilePath + "/Contents/Java/QA_Helper.jar").exists() ? "Java" : "app") + "/QA_Helper.jar", "*/qa-helper-version.txt"}).getFirstOutputLine().equals(latestVersion)) {
                                    new File(appUpdateTempFilePath).setLastModified(System.currentTimeMillis()); // Equivalent to touch command.

                                    Runtime.getRuntime().exec(new String[]{"/usr/bin/osascript",
                                        "-e", "use scripting additions",
                                        "-e", "use framework \"Foundation\"",
                                        "-e", "set currentAppFilePath to \"" + launchPath.replace("\\", "\\\\").replace("\"", "\\\"") + "\"",
                                        "-e", "delay 0.5",
                                        "-e", "repeat while (application currentAppFilePath is running)",
                                        "-e", "delay 0.5",
                                        "-e", "end repeat",
                                        "-e", "set versionedAppFilePath to \"" + launchDirectory.replace("\\", "\\\\").replace("\"", "\\\"") + "/" + nameOfMe.replace("\\", "\\\\").replace("\"", "\\\"") + " (" + appVersion.replace("\\", "\\\\").replace("\"", "\\\"") + ").app\"",
                                        "-e", "set appUpdateTempFilePath to \"" + appUpdateTempFilePath.replace("\\", "\\\\").replace("\"", "\\\"") + "\"",
                                        "-e", "set appInstallFilePath to \"" + launchDirectory.replace("\\", "\\\\").replace("\"", "\\\"") + "/" + updatedAppFileName.replace("\\", "\\\\").replace("\"", "\\\"") + "\"",
                                        "-e", "set actualInstallFilePath to appInstallFilePath",
                                        "-e", "set systemApplicationsFolder to (POSIX path of (path to applications folder from system domain))",
                                        "-e", "set appInSystemApplicationsFolder to (systemApplicationsFolder & \"" + updatedAppFileName.replace("\\", "\\\\").replace("\"", "\\\"") + "\")",
                                        "-e", "set userApplicationsFolder to (POSIX path of (path to applications folder from user domain))",
                                        "-e", "set appInUserApplicationsFolder to (userApplicationsFolder & \"" + updatedAppFileName.replace("\\", "\\\\").replace("\"", "\\\"") + "\")",
                                        "-e", "set userDownloadsFolder to (POSIX path of (path to downloads folder from user domain))",
                                        "-e", "set appInUserDownloadsFolder to (userDownloadsFolder & \"" + updatedAppFileName.replace("\\", "\\\\").replace("\"", "\\\"") + "\")",
                                        "-e", "set adminPermissionPrompt to \"“" + nameOfMe.replace("\\", "\\\\").replace("\"", "\\\"") + "” requires Admin Permission to update itself to version " + latestVersion.replace("\\", "\\\\").replace("\"", "\\\"") + ".\"",
                                        "-e", "try",
                                        "-e", "set fileManager to (defaultManager of NSFileManager of current application)",
                                        "-e", "try",
                                        "-e", "if (fileExistsAtPath_(appUpdateTempFilePath) of fileManager) then",
                                        "-e", "moveItemAtPath_toPath_error_(currentAppFilePath, versionedAppFilePath, missing value) of fileManager",
                                        "-e", "end if",
                                        "-e", "end try",
                                        "-e", "try",
                                        "-e", "if ((fileExistsAtPath_(appUpdateTempFilePath) of fileManager) and (fileExistsAtPath_(versionedAppFilePath) of fileManager)) then",
                                        "-e", "trashItemAtURL_resultingItemURL_error_((fileURLWithPath_(versionedAppFilePath) of NSURL of current application), missing value, missing value) of fileManager",
                                        "-e", "if (fileExistsAtPath_(versionedAppFilePath) of fileManager) then do shell script \"/bin/rm -rf \" & (quoted form of versionedAppFilePath) with prompt adminPermissionPrompt with administrator privileges",
                                        "-e", "end if",
                                        "-e", "end try",
                                        "-e", "try",
                                        "-e", "if ((fileExistsAtPath_(appUpdateTempFilePath) of fileManager) and (fileExistsAtPath_(currentAppFilePath) of fileManager)) then",
                                        "-e", "trashItemAtURL_resultingItemURL_error_((fileURLWithPath_(currentAppFilePath) of NSURL of current application), missing value, missing value) of fileManager",
                                        "-e", "if (fileExistsAtPath_(currentAppFilePath) of fileManager) then do shell script \"/bin/rm -rf \" & (quoted form of currentAppFilePath) with prompt adminPermissionPrompt with administrator privileges",
                                        "-e", "end if",
                                        "-e", "end try",
                                        "-e", "try",
                                        "-e", "if ((currentAppFilePath is not equal to appInstallFilePath) and (fileExistsAtPath_(appUpdateTempFilePath) of fileManager) and (fileExistsAtPath_(appInstallFilePath) of fileManager)) then",
                                        "-e", "trashItemAtURL_resultingItemURL_error_((fileURLWithPath_(appInstallFilePath) of NSURL of current application), missing value, missing value) of fileManager",
                                        "-e", "if (fileExistsAtPath_(appInstallFilePath) of fileManager) then do shell script \"/bin/rm -rf \" & (quoted form of appInstallFilePath) with prompt adminPermissionPrompt with administrator privileges",
                                        "-e", "end if",
                                        "-e", "end try",
                                        "-e", "try",
                                        "-e", "if ((currentAppFilePath is not equal to appInSystemApplicationsFolder) and (appInstallFilePath is not equal to appInSystemApplicationsFolder) and (fileExistsAtPath_(appUpdateTempFilePath) of fileManager) and (fileExistsAtPath_(appInSystemApplicationsFolder) of fileManager)) then",
                                        "-e", "trashItemAtURL_resultingItemURL_error_((fileURLWithPath_(appInSystemApplicationsFolder) of NSURL of current application), missing value, missing value) of fileManager",
                                        "-e", "if (fileExistsAtPath_(appInSystemApplicationsFolder) of fileManager) then do shell script \"/bin/rm -rf \" & (quoted form of appInSystemApplicationsFolder) with prompt adminPermissionPrompt with administrator privileges",
                                        "-e", "end if",
                                        "-e", "end try",
                                        "-e", "try",
                                        "-e", "if ((currentAppFilePath is not equal to appInUserApplicationsFolder) and (appInstallFilePath is not equal to appInUserApplicationsFolder) and (fileExistsAtPath_(appUpdateTempFilePath) of fileManager) and (fileExistsAtPath_(appInUserApplicationsFolder) of fileManager)) then",
                                        "-e", "trashItemAtURL_resultingItemURL_error_((fileURLWithPath_(appInUserApplicationsFolder) of NSURL of current application), missing value, missing value) of fileManager",
                                        "-e", "if (fileExistsAtPath_(appInUserApplicationsFolder) of fileManager) then do shell script \"/bin/rm -rf \" & (quoted form of appInUserApplicationsFolder) with prompt adminPermissionPrompt with administrator privileges",
                                        "-e", "end if",
                                        "-e", "end try",
                                        "-e", "try",
                                        "-e", "if ((currentAppFilePath is not equal to appInUserDownloadsFolder) and (appInstallFilePath is not equal to appInUserDownloadsFolder) and (fileExistsAtPath_(appUpdateTempFilePath) of fileManager) and (fileExistsAtPath_(appInUserDownloadsFolder) of fileManager)) then",
                                        "-e", "trashItemAtURL_resultingItemURL_error_((fileURLWithPath_(appInUserDownloadsFolder) of NSURL of current application), missing value, missing value) of fileManager",
                                        "-e", "if (fileExistsAtPath_(appInUserDownloadsFolder) of fileManager) then do shell script \"/bin/rm -rf \" & (quoted form of appInUserDownloadsFolder) with prompt adminPermissionPrompt with administrator privileges",
                                        "-e", "end if",
                                        "-e", "end try",
                                        "-e", "set appUpdateTempFileStructure to \"\"",
                                        "-e", "try",
                                        "-e", "set appUpdateTempFileStructure to (do shell script (\"cd \" & (quoted form of appUpdateTempFilePath) & \" && /bin/ls -Rsk\"))",
                                        "-e", "end try",
                                        "-e", "try",
                                        "-e", "if ((fileExistsAtPath_(appUpdateTempFilePath) of fileManager) and (not (fileExistsAtPath_(appInstallFilePath) of fileManager))) then",
                                        "-e", "moveItemAtPath_toPath_error_(appUpdateTempFilePath, appInstallFilePath, missing value) of fileManager",
                                        "-e", "if ((fileExistsAtPath_(appUpdateTempFilePath) of fileManager) and (not (fileExistsAtPath_(appInstallFilePath) of fileManager))) then do shell script \"/bin/mv -f \" & (quoted form of appUpdateTempFilePath) & \" \" & (quoted form of appInstallFilePath) with prompt adminPermissionPrompt with administrator privileges",
                                        "-e", "end if",
                                        "-e", "end try",
                                        "-e", "try",
                                        "-e", "if ((appInstallFilePath is not equal to appInSystemApplicationsFolder) and (fileExistsAtPath_(appUpdateTempFilePath) of fileManager) and (not (fileExistsAtPath_(appInSystemApplicationsFolder) of fileManager))) then",
                                        "-e", "moveItemAtPath_toPath_error_(appUpdateTempFilePath, appInSystemApplicationsFolder, missing value) of fileManager",
                                        "-e", "if ((fileExistsAtPath_(appUpdateTempFilePath) of fileManager) and (not (fileExistsAtPath_(appInSystemApplicationsFolder) of fileManager))) then do shell script \"/bin/mv -f \" & (quoted form of appUpdateTempFilePath) & \" \" & (quoted form of appInSystemApplicationsFolder) with prompt adminPermissionPrompt with administrator privileges",
                                        "-e", "set actualInstallFilePath to appInSystemApplicationsFolder",
                                        "-e", "end if",
                                        "-e", "end try",
                                        "-e", "try",
                                        "-e", "if ((appInstallFilePath is not equal to appInUserApplicationsFolder) and (fileExistsAtPath_(appUpdateTempFilePath) of fileManager) and (not (fileExistsAtPath_(appInUserApplicationsFolder) of fileManager))) then",
                                        "-e", "moveItemAtPath_toPath_error_(appUpdateTempFilePath, appInUserApplicationsFolder, missing value) of fileManager",
                                        "-e", "if ((fileExistsAtPath_(appUpdateTempFilePath) of fileManager) and (not (fileExistsAtPath_(appInUserApplicationsFolder) of fileManager))) then do shell script \"/bin/mv -f \" & (quoted form of appUpdateTempFilePath) & \" \" & (quoted form of appInUserApplicationsFolder) with prompt adminPermissionPrompt with administrator privileges",
                                        "-e", "set actualInstallFilePath to appInUserApplicationsFolder",
                                        "-e", "end if",
                                        "-e", "end try",
                                        "-e", "if ((fileExistsAtPath_(appUpdateTempFilePath) of fileManager) and (not (fileExistsAtPath_(appInUserDownloadsFolder) of fileManager))) then",
                                        "-e", "moveItemAtPath_toPath_error_(appUpdateTempFilePath, appInUserDownloadsFolder, missing value) of fileManager",
                                        "-e", "if ((fileExistsAtPath_(appUpdateTempFilePath) of fileManager) and (not (fileExistsAtPath_(appInUserDownloadsFolder) of fileManager))) then do shell script \"/bin/mv -f \" & (quoted form of appUpdateTempFilePath) & \" \" & (quoted form of appInUserDownloadsFolder) with prompt adminPermissionPrompt with administrator privileges",
                                        "-e", "set actualInstallFilePath to appInUserDownloadsFolder",
                                        "-e", "end if",
                                        "-e", "if (fileExistsAtPath_(actualInstallFilePath) of fileManager) then",
                                        // When working on auto-updating for MacLand Script's, Catalina seems to fail to launch if done too quickly after a move (with an "executable not found" error).
                                        // Generating the install path file structure alone seems to delay enough to avoid the issue, but this loop makes it extra safe.
                                        "-e", "repeat 30 times",
                                        "-e", "try",
                                        "-e", "set installAppFileStructure to \"\"",
                                        "-e", "try",
                                        "-e", "set installAppFileStructure to (do shell script (\"cd \" & (quoted form of actualInstallFilePath) & \" && /bin/ls -Rsk\"))",
                                        "-e", "on error",
                                        "-e", "try",
                                        "-e", "set installAppFileStructure to (do shell script (\"cd \" & (quoted form of actualInstallFilePath) & \" && /bin/ls -Rsk\") with prompt adminPermissionPrompt with administrator privileges)",
                                        "-e", "on error",
                                        "-e", "exit repeat",
                                        "-e", "end try",
                                        "-e", "end try",
                                        "-e", "if (appUpdateTempFileStructure is equal to installAppFileStructure) then exit repeat",
                                        "-e", "end try",
                                        "-e", "delay 0.5",
                                        "-e", "end repeat",
                                        "-e", "end if",
                                        "-e", "on error installError",
                                        "-e", "activate",
                                        "-e", "beep",
                                        "-e", "display alert \"Error Installing “" + nameOfMe.replace("\\", "\\\\").replace("\"", "\\\"") + "” After Update\" message installError as critical",
                                        "-e", "end try",
                                        "-e", "try",
                                        "-e", "do shell script \"/usr/bin/open -na \" & (quoted form of actualInstallFilePath)",
                                        "-e", "on error",
                                        "-e", "try",
                                        "-e", "do shell script \"/usr/bin/open -na \" & (quoted form of \"" + launchDirectory.replace("\\", "\\\\").replace("\"", "\\\"") + "/" + nameOfMe.replace("\\", "\\\\").replace("\"", "\\\"") + ".app\")",
                                        "-e", "on error",
                                        "-e", "try",
                                        "-e", "do shell script \"/usr/bin/open -na \" & (quoted form of currentAppFilePath)",
                                        "-e", "on error",
                                        "-e", "try",
                                        "-e", "do shell script \"/usr/bin/open -nb org.freegeek.QA-Helper\"",
                                        "-e", "on error launchError",
                                        "-e", "activate",
                                        "-e", "beep",
                                        "-e", "display alert \"Error Launching “" + nameOfMe.replace("\\", "\\\\").replace("\"", "\\\"") + "” After Update\" message launchError buttons {\"Quit\", \"Re-Download “" + nameOfMe.replace("\\", "\\\\").replace("\"", "\\\"") + "”\"} cancel button 1 default button 2 as critical",
                                        "-e", "do shell script \"/usr/bin/open 'https://apps.freegeek.org/qa-helper/download'\"",
                                        "-e", "end try",
                                        "-e", "end try",
                                        "-e", "end try",
                                        "-e", "end try"});

                                    System.exit(0);
                                } else {
                                    playAlertSound("error");
                                    Runtime.getRuntime().exec(new String[]{"/bin/rm", "-rf", appUpdateTempFilePath}).waitFor();
                                }
                            }
                        }
                    }
                }
            }
        } catch (HeadlessException | IOException | InterruptedException | NumberFormatException | URISyntaxException autoUpdateAppException) {
            if (isTestMode) {
                System.out.println("autoUpdateAppException: " + autoUpdateAppException);
            }
        }
    }

    public boolean createHelperLogFile() {
        boolean createdHelperLogFile = false;

        if (isLinux) {
            if (!adminPassword.equals("*UNKNOWN*")) {
                if (!new File(linuxBuildInfoPath).exists()) {
                    try {
                        Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /bin/mkdir '" + linuxBuildInfoPath.replace("'", "'\\''") + "'"}).waitFor();
                    } catch (IOException | InterruptedException createLinuxBuildInfoFolderException) {
                        if (isTestMode) {
                            System.out.println("createLinuxBuildInfoFolderException: " + createLinuxBuildInfoFolderException);
                        }
                    }
                }

                if (!new File(helperLogFilePath).exists()) {
                    try {
                        Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /usr/bin/touch '" + helperLogFilePath.replace("'", "'\\''") + "'"}).waitFor();
                        createdHelperLogFile = true;
                    } catch (IOException | InterruptedException createLinuxHelperLogFileException) {
                        if (isTestMode) {
                            System.out.println("createLinuxHelperLogFileException: " + createLinuxHelperLogFileException);
                        }
                    }
                }

                try {
                    // Always make sure helperLogFilePath is writable without sudo (in case it already exists because it was copied from the pre-install environment).
                    Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /bin/chmod 666 '" + helperLogFilePath.replace("'", "'\\''") + "'"}).waitFor();
                } catch (IOException | InterruptedException makeHelperLogFileWritableException) {
                    if (isTestMode) {
                        System.out.println("makeHelperLogFileWritableException: " + makeHelperLogFileWritableException);
                    }
                }
            }
        } else {
            if (isMacOS && !new File(macBuildInfoPath).exists()) {
                new File(macBuildInfoPath).mkdirs();
            } else if (isWindows && !new File(windowsBuildInfoPath).exists()) {
                new File(windowsBuildInfoPath).mkdirs();
            }

            if (!new File(helperLogFilePath).exists()) {
                try {
                    createdHelperLogFile = (new File(helperLogFilePath).createNewFile());
                } catch (IOException createMacHelperLogFileException) {
                    if (isTestMode) {
                        System.out.println("createHelperLogFileException: " + createMacHelperLogFileException);
                    }
                }
            }
        }

        return createdHelperLogFile;
    }

    public void writeToHelperLogFile(String newLogLine) {
        createHelperLogFile();

        try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(new File(helperLogFilePath), true))) {
            bufferedWriter.write(newLogLine + " - " + new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").format(new Date()) + "\n");
        } catch (IOException writeToHelperLogFileException) {
            if (isTestMode) {
                System.out.println("writeToHelperLogFileException: " + writeToHelperLogFileException);
            }
        }
    }

    public void createWindowsDriversCacheModelNameFile() {
        if (isWindows && !isPeripheralTestMode) {
            createHelperLogFile();

            File oldDriversCacheModelPathFile = new File(windowsBuildInfoPath + "Drivers Cache Model Path.txt");
            if (oldDriversCacheModelPathFile.exists()) {
                oldDriversCacheModelPathFile.delete();
            }

            File driversCacheModelNameFile = new File(windowsBuildInfoPath + "Drivers Cache Model Name.txt");
            if (!driversCacheModelNameFile.exists()) {
                String driversCacheModelName = ((deviceTypeIsMotherboard ? computerSpecs.getMotherboardBrand() : computerSpecs.getBrand()).replaceAll("[^A-Za-z0-9]", "")
                        + " "
                        + (deviceTypeIsMotherboard ? computerSpecs.getMotherboardModel() : computerSpecs.getModel()).replace(" / ", "+").replace(" (", "+").replaceAll("[^A-Za-z0-9+]", "")
                        + " "
                        + computerSpecs.getGPUids()
                        + " "
                        + computerSpecs.getAudioIDs());

                try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(driversCacheModelNameFile))) {
                    bufferedWriter.write(driversCacheModelName);
                } catch (IOException createWindowsDriversCacheModelNameFileException) {
                    if (isTestMode) {
                        System.out.println("createWindowsDriversCacheModelNameFileException: " + createWindowsDriversCacheModelNameFileException);
                    }
                }
            }
        }
    }

    private void displayComputerSpecs() {
        displayComputerSpecs(null);
    }

    private void displayComputerSpecs(String[] currentStatusAndTech) {
        long startDisplayComputerSpecsTime = System.currentTimeMillis();

        if (isTestMode) {
            System.out.println("Starting Display Computer Specs");
        }

        Font defaultFont = UIManager.getFont("defaultFont");
        int currentTextSize = defaultFont.getSize();

        String[] statusNames = privateStrings.getPCsCRMStatusNames();

        if (isFirstLoad) {
            isFirstLoad = false;

            if (isPeripheralTestMode) {
                forceShowAllTests = true;
            } else {
                helperLogFilePath = (isLinux ? linuxBuildInfoPath + "qa-helper-log.txt" : (isWindows ? windowsBuildInfoPath : macBuildInfoPath) + "QA Helper Log.txt");

                if (new File(helperLogFilePath).exists()) {
                    try {
                        Files.readAllLines(Paths.get(helperLogFilePath)).forEach(thisHelperLogLine -> {
                            if (thisHelperLogLine.startsWith("PID:") || thisHelperLogLine.startsWith("ID:")) {
                                pid = thisHelperLogLine.substring(thisHelperLogLine.indexOf(":") + 1).trim().split(" ")[0];
                                lastPIDscannedOrConfirmed = pid;
                                isTestMode = (thisHelperLogLine.contains("Test Mode"));
                                gotTestModeFromLog = isTestMode;
                            } else if (thisHelperLogLine.contains("Verified") || thisHelperLogLine.contains("UNVERIFIED")) {
                                boolean isVerified = (thisHelperLogLine.contains("Verified") && !thisHelperLogLine.contains("UNVERIFIED"));
                                if (thisHelperLogLine.contains("CPU")) {
                                    isCPUverified = isVerified;
                                } else if (thisHelperLogLine.contains("Drive Health")) {
                                    isDriveHealthVerified = isVerified;
                                } else if (thisHelperLogLine.contains("Disc Drive")) {
                                    isDiscDriveVerified = isVerified;
                                } else if (thisHelperLogLine.contains("Internet")) {
                                    isInternetVerified = isVerified;
                                } else if (thisHelperLogLine.contains("Screen")) {
                                    isScreenVerified = isVerified;
                                } else if (thisHelperLogLine.contains("Audio")) {
                                    isAudioVerified = isVerified;
                                } else if (thisHelperLogLine.contains("Microphone")) {
                                    isMicrophoneVerified = isVerified;
                                } else if (thisHelperLogLine.contains("Camera")) {
                                    isCameraVerified = isVerified;
                                } else if (thisHelperLogLine.contains("Keyboard")) {
                                    isKeyboardVerified = isVerified;
                                } else if (thisHelperLogLine.contains("Mouse")) {
                                    isMouseVerified = isVerified;
                                } else if (thisHelperLogLine.contains("BIOS")) {
                                    isBIOSverified = isVerified;
                                } else if (thisHelperLogLine.contains("Ports")) {
                                    isPortsVerified = isVerified;
                                } else if (thisHelperLogLine.contains("Drivers")) {
                                    isDriversVerified = isVerified;
                                } else if (thisHelperLogLine.contains("Updates")) {
                                    isUpdatesVerified = isVerified;
                                } else if (thisHelperLogLine.contains("Windows License") || thisHelperLogLine.contains("Windows Activation")) { // Prior to 2025.2.6-3 the task was called "Windows Activation" instead of "Windows License" as it is now.
                                    isWindowsLicenseVerified = isVerified;
                                } else if (thisHelperLogLine.contains("Remote Management")) {
                                    isRemoteManagementVerified = isVerified;
                                }
                            } else if (thisHelperLogLine.startsWith("Status:")) {
                                lastStatus = thisHelperLogLine.substring(thisHelperLogLine.indexOf(": ") + 2).split(" - ")[0];
                                undidOemConfigAfterLastStatus = false;
                            } else if (thisHelperLogLine.startsWith("Manual Device Type:")) {
                                manualDeviceType = thisHelperLogLine.substring(thisHelperLogLine.indexOf(": ") + 2).split(" - ")[0];
                                if (validDeviceTypes.contains(manualDeviceType)) {
                                    manuallySetDeviceType = true;
                                } else {
                                    manualDeviceType = "";
                                }
                            } else if (thisHelperLogLine.startsWith("Undo: oem-config-prepare")) {
                                undidOemConfigAfterLastStatus = true;
                            } else if (thisHelperLogLine.startsWith("Price:")) {
                                String possibleDisplayPrice = thisHelperLogLine.substring(thisHelperLogLine.indexOf(": ") + 2).split(" - ")[0]; // This will always get the latest price.

                                if (possibleDisplayPrice.startsWith("$")) {
                                    displayPrice = "$" + possibleDisplayPrice.replaceAll("[^0-9,]", "");
                                    isSold = false;
                                }
                            } else if (thisHelperLogLine.startsWith("Sold")) {
                                isSold = true;
                            }
                        });
                    } catch (IOException readLogException) {
                        if (isTestMode) {
                            System.out.println("readLogException: " + readLogException);
                        }
                    }

                    // Never hide login and tasks in Windows since QA Helper will never be shown in demo mode.
                    hideLoginAndTasks = (!isLinuxUbiquityMode && !isWindows && !undidOemConfigAfterLastStatus && lastStatus.equals(statusNames[12]));

                    if (!pid.equals("N/A")) {
                        txtPID.setText(pid);
                    }
                } else {
                    createHelperLogFile();
                }
            }

            defaultTextSize = currentTextSize;

            if (UIManager.getLookAndFeel().getName().startsWith("FlatLaf")) {
                themeUpdated = true;
            } else {
                // Remove extra button padding that's just for proper button sizing with FlatLaf
                btnDoneTesting.setMargin(btnReloadSpecs.getMargin());
            }
        } else if (themeUpdated) {
            FlatLaf.updateUI();

            // For some reason updateUI (updateComponentTreeUI) sets these null border buttons to FlatButtonBorder which makes them the wrong size (too wide)
            if (contentScrollPane.getBorder() != null) {
                contentScrollPane.setBorder(null);
            }
            if (btnTestMode.getBorder() != null) {
                btnTestMode.setBorder(null);
            }
            if (btnForgot.getBorder() != null) {
                btnForgot.setBorder(null);
            }
            if (btnCheckPID.getBorder() != null) {
                btnCheckPID.setBorder(null);
            }

            if (creditsWindow != null && creditsWindow.isVisible()) {
                creditsWindow.dispose(); // Close creditsWindow so that the JScrollPane border will be reset to null on next open for same reason as above.
            }
        }

        if (themeUpdated) {
            Color themeDefaultColor = lblVersion.getForeground();
            if (!themeDefaultColor.equals(defaultColor)) {
                defaultColor = themeDefaultColor;
            }

            Color themeBlue = UIManager.getColor("Actions.Blue");
            if ((themeBlue != null) && !themeBlue.equals(verifiedColor)) {
                verifiedColor = themeBlue;
                verifiedColorHTML = "#" + Integer.toHexString(verifiedColor.getRGB()).substring(2);
            }

            Color themeGreen = UIManager.getColor("Actions.Green");
            if ((themeGreen != null) && !themeGreen.equals(successColor)) {
                successColor = themeGreen;
                successColorHTML = "#" + Integer.toHexString(successColor.getRGB()).substring(2);
            }

            Color themeYellow = UIManager.getColor("Actions.Yellow");
            if ((themeYellow != null) && !themeYellow.equals(warningColor)) {
                warningColor = themeYellow;
                warningColorHTML = "#" + Integer.toHexString(warningColor.getRGB()).substring(2);
            }

            Color themeRed = UIManager.getColor("Actions.Red");
            if ((themeRed != null) && !themeRed.equals(errorColor)) {
                errorColor = themeRed;
                errorColorHTML = "#" + Integer.toHexString(errorColor.getRGB()).substring(2);
            }

            Color themePurple = UIManager.getColor("Objects.Purple");
            if ((themePurple != null) && !themePurple.equals(attentionColor)) {
                attentionColor = themePurple;
                attentionColorHTML = "#" + Integer.toHexString(attentionColor.getRGB()).substring(2);
            }

            Color linkColor = UIManager.getColor("Component.linkColor");
            if ((linkColor != null) && !btnTestMode.getForeground().equals(linkColor)) {
                btnTestMode.setForeground(linkColor);
                btnForgot.setForeground(linkColor);
                btnCheckPID.setForeground(linkColor);
            }

            btnForgot.setFont(defaultFont);
            btnCheckPID.setFont(defaultFont);

            btnLogIn.setFont(defaultFont.deriveFont(Font.BOLD));
            btnDoneTesting.setFont(defaultFont.deriveFont(Font.BOLD));

            txtUsername.setSize(new Dimension((currentTextSize * 10), (currentTextSize * 2)));
            txtUsername.setPreferredSize(txtUsername.getSize());
            pswPassword.setPreferredSize(txtUsername.getSize());
            txtPID.setPreferredSize(txtUsername.getSize());

            txtUsername.putClientProperty("JTextField.showClearButton", true);
            pswPassword.putClientProperty("JTextField.showClearButton", true);
            txtPID.putClientProperty("JTextField.showClearButton", true);
        }

        int textSizeDifference = Math.round(currentTextSize - defaultTextSize);

        float currentScaleFactor = UIScale.getUserScaleFactor();
        if (isLinux && (linuxInitialScaleFactor != 1.0f)) {
            currentScaleFactor = (currentScaleFactor / linuxInitialScaleFactor);
        }
        String currentScaleFactorPercentage = Math.round(currentScaleFactor * 100) + "%";

        String resetTextSizeMenuText = "Reset Text Size (Currently " + ((textSizeDifference >= 0) ? "+" : "") + textSizeDifference + " / " + currentScaleFactorPercentage + ")";

        if (!menResetTextSize.getText().equals(resetTextSizeMenuText)) {
            menResetTextSize.setText(resetTextSizeMenuText);
        }

        boolean hasDiscDrive = false;
        boolean hasCamera = false;
        boolean possibleCustomDesktopOrBareMotherboard = false;

        if (computerSpecs != null) {
            detectedDeviceType = (computerSpecs.isLaptop() ? "Laptop" : (computerSpecs.hasScreen() ? "All-in-One" : "Desktop"));

            if (manualDeviceType.isEmpty()) {
                manualDeviceType = detectedDeviceType;
            }

            hasDiscDrive = !computerSpecs.getDiscDriveArray().isEmpty();
            hasCamera = computerSpecs.hasCamera();
            possibleCustomDesktopOrBareMotherboard = computerSpecs.getPossibleCustomDesktopOrBareMotherboard();
        }

        deviceTypeIsLaptop = false;
        deviceTypeHasScreen = false;
        deviceTypeIsMotherboard = false;

        switch (manualDeviceType) {
            case "Laptop":
                deviceTypeIsLaptop = true;
                deviceTypeHasScreen = true;
                break;
            case "All-in-One":
                deviceTypeHasScreen = true;
                break;
            case "Motherboard":
                deviceTypeIsMotherboard = true;
                break;
            default:
                break;
        }

        menDeviceTypeLaptop.setSelected(manualDeviceType.equals("Laptop"));
        String menDeviceTypeLaptopText = "Laptop" + (detectedDeviceType.equals("Laptop") ? " (Detected)" : "");
        if (!menDeviceTypeLaptop.getText().equals(menDeviceTypeLaptopText)) {
            menDeviceTypeLaptop.setText(menDeviceTypeLaptopText);
        }

        menDeviceTypeDesktop.setSelected(manualDeviceType.equals("Desktop"));
        String menDeviceTypeDesktopText = "Desktop" + (possibleCustomDesktopOrBareMotherboard ? " (Possible)" : (detectedDeviceType.equals("Desktop") ? " (Detected)" : ""));
        if (!menDeviceTypeDesktop.getText().equals(menDeviceTypeDesktopText)) {
            menDeviceTypeDesktop.setText(menDeviceTypeDesktopText);
        }

        menDeviceTypeAllInOne.setSelected(manualDeviceType.equals("All-in-One"));
        String menDeviceTypeAllInOneText = "All-in-One" + (detectedDeviceType.equals("All-in-One") ? " (Detected)" : "");
        if (!menDeviceTypeAllInOne.getText().equals(menDeviceTypeAllInOneText)) {
            menDeviceTypeAllInOne.setText(menDeviceTypeAllInOneText);
        }

        menDeviceTypeMotherboard.setSelected(manualDeviceType.equals("Motherboard"));
        String menDeviceTypeMotherboardText = "Motherboard" + (possibleCustomDesktopOrBareMotherboard ? " (Possible)" : "");
        if (!menDeviceTypeMotherboard.getText().equals(menDeviceTypeMotherboardText)) {
            menDeviceTypeMotherboard.setText(menDeviceTypeMotherboardText);
        }

        boolean shouldShowDeviceTypeMenu = (!hideLoginAndTasks && (manuallySetDeviceType || isTestMode || !computerSpecs.getFullBrand().equals("Apple")));
        if (shouldShowDeviceTypeMenu != deviceTypeMenu.isVisible()) {
            deviceTypeMenu.setEnabled(shouldShowDeviceTypeMenu);
            deviceTypeMenu.setVisible(shouldShowDeviceTypeMenu);
        }

        boolean shouldShowOptionsMenu = isLoggedIn;
        if (shouldShowOptionsMenu != optionsMenu.isVisible()) {
            optionsMenu.setEnabled(shouldShowOptionsMenu);
            optionsMenu.setVisible(shouldShowOptionsMenu);

            menSetProductType.setText((pid.startsWith("FG") ? "Prompt" : "Open Inventory Manager on PCsCRM.com") + " to Set Product Type");
        }

        boolean shouldShowTestMenu = (!deviceTypeIsLaptop);
        menForceShowAllTests.setSelected(forceShowAllTests);
        if (shouldShowTestMenu != testsMenu.isVisible()) {
            testsMenu.setEnabled(shouldShowTestMenu);
            testsMenu.setVisible(shouldShowTestMenu);
        }

        boolean shouldShowInstallAppMenu = (isLoggedIn && ((isLinux && !isLinuxLiveBoot) || (isWindows && !isWindowsPE)));

        if (shouldShowInstallAppMenu && isWindows) {
            menInstallSpotify.setEnabled(false);
            menInstallSpotify.setVisible(false);

            menInstallFBReader.setEnabled(false);
            menInstallFBReader.setVisible(false);
        }

        if (shouldShowInstallAppMenu != installAppsMenu.isVisible()) {
            installAppsMenu.setEnabled(shouldShowInstallAppMenu);
            installAppsMenu.setVisible(shouldShowInstallAppMenu);
        }

        boolean shouldShowScriptsMenu = (isLoggedIn && isWindows && !isWindowsPE && new File("\\Install\\Scripts").exists());
        if (shouldShowScriptsMenu != scriptsMenu.isVisible()) {
            scriptsMenu.setEnabled(shouldShowScriptsMenu);
            scriptsMenu.setVisible(shouldShowScriptsMenu);
        }

        if (shouldShowScriptsMenu) {
            boolean shouldShowManuallyCacheDriversMenuItem = false;

            if (new File("\\Install\\Scripts\\Complete Windows.ps1").exists()) {
                try {
                    List<String> completeWindowsScriptLine = Files.readAllLines(Paths.get("\\Install\\Scripts\\Complete Windows.ps1"));

                    for (String thisCompleteWindowsScriptLine : completeWindowsScriptLine) {
                        if (thisCompleteWindowsScriptLine.startsWith("$onlyCacheDriversMode =")) {
                            shouldShowManuallyCacheDriversMenuItem = true;
                            break;
                        } else if (thisCompleteWindowsScriptLine.startsWith("$Host.UI.RawUI.WindowTitle =")) {
                            // $onlyCacheDriversMode will be set before setting the script window title, so stop searching if we got that far to not bother searching the whole script.
                            break;
                        }
                    }
                } catch (IOException readCompleteWindowsScriptException) {
                    if (isTestMode) {
                        System.out.println("readCompleteWindowsScriptException: " + readCompleteWindowsScriptException);
                    }
                }
            }

            if (shouldShowManuallyCacheDriversMenuItem != menCacheDriversWindowsScript.isVisible()) {
                scriptsMenuSeparator.setVisible(shouldShowManuallyCacheDriversMenuItem);

                menCacheDriversWindowsScript.setEnabled(shouldShowManuallyCacheDriversMenuItem);
                menCacheDriversWindowsScript.setVisible(shouldShowManuallyCacheDriversMenuItem);
            }
        }

        String menOpenTerminalOrCommandPromptText = "Open " + (isWindows ? "Command Prompt" : "Terminal");
        if (!menOpenTerminalOrCommandPromptText.equals(menOpenTerminalOrCommandPrompt.getText())) {
            menOpenTerminalOrCommandPrompt.setText(menOpenTerminalOrCommandPromptText);
        }

        boolean shouldOpenTerminalOrCommandPromptMenuItem = ((isLinux && isLinuxUbiquityMode) || (isWindows && isWindowsPE));
        if (shouldOpenTerminalOrCommandPromptMenuItem != menOpenTerminalOrCommandPrompt.isVisible()) {
            menOpenTerminalOrCommandPrompt.setEnabled(shouldOpenTerminalOrCommandPromptMenuItem);
            menOpenTerminalOrCommandPrompt.setVisible(shouldOpenTerminalOrCommandPromptMenuItem);
        }

        boolean shouldShowOpenFileExplorerMenuItem = (isWindows && isWindowsPE && new File("\\Install\\Diagnostic Tools\\File Explorer\\File Explorer (PE).exe").exists());
        if (shouldShowOpenFileExplorerMenuItem != menOpenFileExplorerPE.isVisible()) {
            menOpenFileExplorerPE.setEnabled(shouldShowOpenFileExplorerMenuItem);
            menOpenFileExplorerPE.setVisible(shouldShowOpenFileExplorerMenuItem);
        }

        boolean shouldShowLinuxUtilitiesMenuItems = (isLinux && !isLinuxLiveBoot);
        if (shouldShowLinuxUtilitiesMenuItems != menSetDvdDriveRegion.isVisible()) {
            menSetDvdDriveRegion.setEnabled(shouldShowLinuxUtilitiesMenuItems);
            menSetDvdDriveRegion.setVisible(shouldShowLinuxUtilitiesMenuItems);
        }

        boolean shouldShowUtilitiesMenu = (isLoggedIn && (shouldOpenTerminalOrCommandPromptMenuItem || shouldShowOpenFileExplorerMenuItem || shouldShowLinuxUtilitiesMenuItems));
        if (shouldShowUtilitiesMenu != utilitiesMenu.isVisible()) {
            utilitiesMenu.setEnabled(shouldShowUtilitiesMenu);
            utilitiesMenu.setVisible(shouldShowUtilitiesMenu);
        }

        /*
            // DEBUG: For convenient menu testing
            if (false) {
                optionsMenu.setEnabled(true);
                optionsMenu.setVisible(true);

                testsMenu.setEnabled(true);
                testsMenu.setVisible(true);

                installAppsMenu.setEnabled(true);
                installAppsMenu.setVisible(true);

                scriptsMenu.setEnabled(true);
                scriptsMenu.setVisible(true);

                utilitiesMenu.setEnabled(true);
                utilitiesMenu.setVisible(true);
            }
         */
        String lblStatusText;
        Color lblStatusColor = defaultColor;

        String btnDoneTestingText = "Quit";

        if (isLoggedIn) {
            if (currentStatusAndTech == null) {
                if (isTestMode) {
                    System.out.println("MAYBE RETRIEVING STATUS HISTORY ON MAIN THREAD (IF IT WASN'T CACHED)");
                }

                currentStatusAndTech = loadStatusHistory(false);
            }

            // Never hide login and tasks in Windows since QA Helper will never be shown in demo mode.
            hideLoginAndTasks = (!isLinuxUbiquityMode && !isWindows && !undidOemConfigAfterLastStatus && currentStatusAndTech[0].equals(statusNames[12]));

            boolean shouldShowReopenRepairMenuItem = (!currentStatusAndTech[0].equals(statusNames[3]) && !currentStatusAndTech[0].equals("UNKNOWN STATUS"));
            if (shouldShowReopenRepairMenuItem != menReopenRepair.isEnabled()) {
                menReopenRepair.setEnabled(shouldShowReopenRepairMenuItem);
                if (!isMacOS) { // If the menu item is hidden on macOS, it may not re-appear when made visible, so only disable/enable it instead.
                    menReopenRepair.setVisible(shouldShowReopenRepairMenuItem);
                }
            }

            boolean shouldShowRunOemConfigMenuItem = (isLinux && !isLinuxUbiquityMode && currentStatusAndTech[0].equals(statusNames[12]));
            if (shouldShowRunOemConfigMenuItem != menRunOemConfig.isVisible()) {
                menRunOemConfig.setEnabled(shouldShowRunOemConfigMenuItem);
                menRunOemConfig.setVisible(shouldShowRunOemConfigMenuItem);
            }

            lblStatusText = "<html><b style='font-size: larger'>" + escapeSingleLineSpecStringForHTML(pid) + ": <u>" + escapeSingleLineSpecStringForHTML(currentStatusAndTech[0]) + "</u>" + (currentStatusAndTech[1].equals("UNKNOWN TECH") ? "" : (" by <i>" + escapeSingleLineSpecStringForHTML(currentStatusAndTech[1]) + "</i>")) + "</b></html>";

            if (currentStatusAndTech[0].equals(statusNames[2]) || currentStatusAndTech[0].equals(statusNames[3])) {
                lblStatusColor = warningColor;

                btnDoneTestingText = "Done Testing";
            } else {
                lblStatusColor = (currentStatusAndTech[0].equals(statusNames[12]) ? successColor : attentionColor);

                if (isLinuxUbiquityMode || isWindowsPE) {
                    btnDoneTestingText = "Install OS";
                }
            }

            if (getRootPane().getDefaultButton() == null) {
                getRootPane().setDefaultButton(btnDoneTesting);
            }
        } else {
            lblStatusText = "<html><span style='font-size: larger'>"
                    + (isPeripheralTestMode
                            ? "<b><i>Peripheral Test Mode</i></b>"
                            : (hideLoginAndTasks
                                    ? (isSold
                                            ? "<b><u>SOLD</u></b> &nbsp;&mdash;&nbsp; "
                                            : "")
                                    + (!displayPrice.isEmpty()
                                    ? "<b>Price:</b> " + escapeSingleLineSpecStringForHTML(displayPrice) + " &nbsp;&mdash;&nbsp; <b>ID:</b> "
                                    : "<b>")
                                    + (pid.isEmpty()
                                    ? "<i>UNKNOWN ID</i>"
                                    : escapeSingleLineSpecStringForHTML(pid))
                                    + (displayPrice.isEmpty()
                                    ? "</b>"
                                    : "")
                                    : ""))
                    + "</span></html>";

            btnDoneTestingText = (hideLoginAndTasks
                    ? "Options"
                    : ((!isPeripheralTestMode && (isLinuxUbiquityMode || isWindowsPE))
                            ? "Install OS"
                            : "Quit"));

            if (getRootPane().getDefaultButton() == null) {
                getRootPane().setDefaultButton(btnLogIn);
            }
        }

        if (!lblStatus.getForeground().equals(lblStatusColor)) {
            lblStatus.setForeground(lblStatusColor);
        }

        if (!lblStatus.getText().equals(lblStatusText)) {
            if (historyWindow != null && historyWindow.isVisible()) {
                historyWindow.dispose();
            }

            lblStatus.setText(lblStatusText);
        }

        boolean shouldShowStatus = (isPeripheralTestMode || isLoggedIn || hideLoginAndTasks);
        if (shouldShowStatus != lblStatus.isVisible()) {
            lblStatus.setVisible(shouldShowStatus);
        }

        if (!btnDoneTesting.getText().equals(btnDoneTestingText)) {
            btnDoneTesting.setText(btnDoneTestingText);
        }

        String btnTestModeText = (isTestMode ? "Test Mode" : "Live Mode");
        if (!btnTestMode.getText().equals(btnTestModeText) || themeUpdated) {
            btnTestMode.setText(btnTestModeText);
            btnTestMode.setFont((isTestMode ? defaultFont.deriveFont(Font.BOLD) : defaultFont));
        }

        if (btnTestMode.getBorder() != null) {
            btnTestMode.setBorder(null);
        }

        boolean shouldShowLogin = !shouldShowStatus;
        if (shouldShowLogin != btnLogIn.isVisible()) {
            lblUsername.setVisible(shouldShowLogin);
            txtUsername.setEnabled(shouldShowLogin);
            txtUsername.setVisible(shouldShowLogin);

            lblPassword.setVisible(shouldShowLogin);
            pswPassword.setEnabled(shouldShowLogin);
            pswPassword.setVisible(shouldShowLogin);

            lblPID.setVisible(shouldShowLogin);
            txtPID.setEnabled(shouldShowLogin);
            txtPID.setVisible(shouldShowLogin);

            btnTestMode.setEnabled(shouldShowLogin);
            btnTestMode.setVisible(shouldShowLogin);

            btnForgot.setEnabled(shouldShowLogin);
            btnForgot.setVisible(shouldShowLogin);

            btnCheckPID.setEnabled(shouldShowLogin);
            btnCheckPID.setVisible(shouldShowLogin);

            lblVersion.setVisible(shouldShowLogin);

            btnLogIn.setEnabled(shouldShowLogin);
            btnLogIn.setVisible(shouldShowLogin);
        }

        if (isPeripheralTestMode && lblModelLabel.isVisible()) {
            JLabel[] allLabels = new JLabel[]{
                lblModelLabel, lblModel, lblSerial,
                lblCPULabel, lblCPU,
                lblRAMLabel, lblRAM, lblBatteryCapacity,
                lblStorageLabel, lblStorage,
                lblDiscDriveLabel, lblDiscDrive,
                lblWirelessLabel, lblWireless,
                lblScreen,
                lblGPULabel, lblGPU, lblOS,
                lblAudio
            };

            for (JLabel thisLabel : allLabels) {
                thisLabel.setVisible(false);
            }

            btnReloadSpecs.setEnabled(false);
            btnReloadSpecs.setVisible(false);
        }

        boolean shouldShowStressCPUandTasks = (!isPeripheralTestMode & (isLoggedIn || !hideLoginAndTasks));
        if (shouldShowStressCPUandTasks != lblTasks.isVisible()) {
            btnStressCPU.setEnabled(shouldShowStressCPUandTasks);
            btnStressCPU.setVisible(shouldShowStressCPUandTasks);

            btnVerifyCPU.setEnabled(shouldShowStressCPUandTasks);
            btnVerifyCPU.setVisible(shouldShowStressCPUandTasks);

            middleSeparator2.setVisible(shouldShowStressCPUandTasks);

            lblTasks.setVisible(shouldShowStressCPUandTasks);

            btnCheckPorts.setEnabled(shouldShowStressCPUandTasks);
            btnCheckPorts.setVisible(shouldShowStressCPUandTasks);

            btnVerifyPorts.setVisible(shouldShowStressCPUandTasks);
            btnVerifyPorts.setVisible(shouldShowStressCPUandTasks);
        }

        if (!isLinux) {
            String btnDriveHealthText = (isWindows ? "Open DiskInfo" : "Open DriveDx");
            if (!btnDriveHealthText.equals(btnDriveHealth.getText())) {
                btnDriveHealth.setText(btnDriveHealthText);
            }
        }

        boolean shouldShowDriveHealth = (!deviceTypeIsMotherboard && !isPeripheralTestMode && (isLinux || (isWindows && new File("\\Install\\Diagnostic Tools\\CrystalDiskInfo\\DiskInfo64.exe").exists()) || (isMacOS && (new File("/Applications/DriveDx.app").exists() || new File("/Users/fg-demo/Applications/DriveDx.app").exists()))));
        if (shouldShowDriveHealth != btnDriveHealth.isVisible()) {
            btnDriveHealth.setEnabled(shouldShowDriveHealth);
            btnDriveHealth.setVisible(shouldShowDriveHealth);
        }

        boolean shouldShowVerifyDriveHealth = (shouldShowDriveHealth && shouldShowStressCPUandTasks);
        if (shouldShowVerifyDriveHealth != btnVerifyDriveHealth.isVisible()) {
            btnVerifyDriveHealth.setEnabled(shouldShowVerifyDriveHealth);
            btnVerifyDriveHealth.setVisible(shouldShowVerifyDriveHealth);
        }

        boolean shouldShowDiscDrive = hasDiscDrive;
        if (shouldShowDiscDrive != btnEjectDiscDrive.isVisible()) {
            btnEjectDiscDrive.setEnabled(shouldShowDiscDrive);
            btnEjectDiscDrive.setVisible(shouldShowDiscDrive);
        }

        boolean shouldShowVerifyDiscDrive = (shouldShowStressCPUandTasks && (hasDiscDrive || (!deviceTypeIsLaptop && !deviceTypeIsMotherboard)));
        if (shouldShowVerifyDiscDrive != btnVerifyDiscDrive.isVisible()) { // Intentionally allowing the lack of a disc drive to be verified on Desktops to confirm the computer was manufactured without a disc drive.
            btnVerifyDiscDrive.setEnabled(shouldShowVerifyDiscDrive);
            btnVerifyDiscDrive.setVisible(shouldShowVerifyDiscDrive);
        }

        boolean shouldShowAudioTest = (!isWindowsPE || isWindowsRE);
        if (shouldShowAudioTest != btnTestAudio.isVisible()) {
            btnTestAudio.setEnabled(shouldShowAudioTest);
            btnTestAudio.setVisible(shouldShowAudioTest);
        }

        boolean shouldShowVerifyAudioTest = (shouldShowAudioTest && shouldShowStressCPUandTasks);
        if (shouldShowVerifyAudioTest != btnVerifyAudio.isVisible()) {
            btnVerifyAudio.setVisible(shouldShowVerifyAudioTest);
        }

        // Do not allow Audio Verification in WinPE (even though we can test when in WinRE) since we want it verified in OS after driver are installed.
        boolean shouldEnableVerifyAudio = (btnVerifyAudio.isVisible() && !isWindowsPE);
        if (shouldEnableVerifyAudio != btnVerifyAudio.isEnabled()) {
            btnVerifyAudio.setEnabled(shouldEnableVerifyAudio);
        }

        boolean shouldShowInternetTest = (!isPeripheralTestMode && !isWindowsPE);
        if (shouldShowInternetTest != btnTestInternet.isVisible()) {
            btnTestInternet.setEnabled(shouldShowInternetTest);
            btnTestInternet.setVisible(shouldShowInternetTest);
        }

        boolean shouldShowVerifyInternetTest = (shouldShowInternetTest && shouldShowStressCPUandTasks);
        if (shouldShowVerifyInternetTest != btnVerifyInternet.isVisible()) {
            btnVerifyInternet.setEnabled(shouldShowVerifyInternetTest);
            btnVerifyInternet.setVisible(shouldShowVerifyInternetTest);
        }

        boolean shouldShowMicrophoneTest = (!isWindowsPE);
        if (shouldShowMicrophoneTest != btnTestMicrophone.isVisible()) {
            btnTestMicrophone.setEnabled(shouldShowMicrophoneTest);
            btnTestMicrophone.setVisible(shouldShowMicrophoneTest);
        }

        boolean shouldShowVerifyMicrophoneTest = (shouldShowMicrophoneTest && shouldShowStressCPUandTasks);
        if (shouldShowVerifyMicrophoneTest != btnVerifyMicrophone.isVisible()) {
            btnVerifyMicrophone.setVisible(shouldShowVerifyMicrophoneTest);
        }

        // Do not enable btnVerifyMicrophone if no mic detected on macOS even though it will be visible for layout consistency since the Microphone Test button will be visible in this case.
        boolean shouldEnableVerifyMicrophone = (shouldShowVerifyMicrophoneTest && (!isMacOS || !new CommandReader(new String[]{"/usr/bin/osascript", "-e", "input volume of (get volume settings)"}).getFirstOutputLine().equals("missing value")));
        if (shouldEnableVerifyMicrophone != btnVerifyMicrophone.isEnabled()) {
            btnVerifyMicrophone.setEnabled(shouldEnableVerifyMicrophone);
        }

        // Do not show Camera Test on a Desktop with no camera detected, but always show it for Laptops and All-In-Ones even if no camera is detected to make it obvious that no camera was detected in case it should have been.
        boolean shouldShowCameraTest = (!isWindowsPE && ((hasCamera && !deviceTypeIsMotherboard) || deviceTypeHasScreen || forceShowAllTests));
        if (shouldShowCameraTest != btnTestCamera.isVisible()) {
            btnTestCamera.setEnabled(shouldShowCameraTest);
            btnTestCamera.setVisible(shouldShowCameraTest);
        }

        boolean shouldShowVerifyCameraTest = (shouldShowCameraTest && shouldShowStressCPUandTasks);
        if (shouldShowVerifyCameraTest != btnVerifyCamera.isVisible()) {
            btnVerifyCamera.setVisible(shouldShowVerifyCameraTest);
        }

        // Do not enable btnVerifyCamera if no camera detected and not on a Desktop even though it will be visible for layout consistency since the Camera Test button will be visible in this case.
        boolean shouldEnableVerifyCamera = (shouldShowVerifyCameraTest && hasCamera);
        if (shouldEnableVerifyCamera != btnVerifyCamera.isEnabled()) {
            btnVerifyCamera.setEnabled(shouldEnableVerifyCamera);
        }

        boolean shouldShowScreenTest = (deviceTypeHasScreen || forceShowAllTests);
        if (shouldShowScreenTest != btnTestScreen.isVisible()) {
            btnTestScreen.setEnabled(shouldShowScreenTest);
            btnTestScreen.setVisible(shouldShowScreenTest);
        }

        boolean shouldShowVerifyScreenTest = (shouldShowScreenTest && shouldShowStressCPUandTasks);
        if (shouldShowVerifyScreenTest != btnVerifyScreen.isVisible()) {
            btnVerifyScreen.setEnabled(shouldShowVerifyScreenTest);
            btnVerifyScreen.setVisible(shouldShowVerifyScreenTest);
        }

        boolean shouldShowKeyboardTest = (deviceTypeIsLaptop || forceShowAllTests);
        if (shouldShowKeyboardTest != btnTestKeyboard.isVisible()) {
            btnTestKeyboard.setEnabled(shouldShowKeyboardTest);
            btnTestKeyboard.setVisible(shouldShowKeyboardTest);
        }

        boolean shouldShowVerifyKeyboardTest = (shouldShowKeyboardTest && shouldShowStressCPUandTasks);
        if (shouldShowVerifyKeyboardTest != btnVerifyKeyboard.isVisible()) {
            btnVerifyKeyboard.setEnabled(shouldShowVerifyKeyboardTest);
            btnVerifyKeyboard.setVisible(shouldShowVerifyKeyboardTest);
        }

        boolean shouldShowMouseTest = (!isWindowsPE && (deviceTypeIsLaptop || forceShowAllTests));
        if (shouldShowMouseTest != btnTestMouse.isVisible()) {
            btnTestMouse.setEnabled(shouldShowMouseTest);
            btnTestMouse.setVisible(shouldShowMouseTest);
        }

        boolean shouldShowVerifyMouseTest = (shouldShowMouseTest && shouldShowStressCPUandTasks);
        if (shouldShowVerifyMouseTest != btnVerifyMouse.isVisible()) {
            btnVerifyMouse.setEnabled(shouldShowVerifyMouseTest);
            btnVerifyMouse.setVisible(shouldShowVerifyMouseTest);
        }

        boolean shouldShowMoreTestsLabel = (shouldShowMicrophoneTest || shouldShowCameraTest || shouldShowKeyboardTest || shouldShowMouseTest);
        if (shouldShowMoreTestsLabel != middleSeparator1.isVisible()) {
            middleSeparator1.setVisible(shouldShowMoreTestsLabel);
            lblMoreTests.setVisible(shouldShowMoreTestsLabel);
        }

        boolean shouldShowSetupBIOS = (!isMacOS && shouldShowStressCPUandTasks);
        if (shouldShowSetupBIOS != btnSetupBIOS.isVisible()) {
            btnSetupBIOS.setEnabled(shouldShowSetupBIOS);
            btnSetupBIOS.setVisible(shouldShowSetupBIOS);

            btnVerifyBIOS.setEnabled(shouldShowSetupBIOS);
            btnVerifyBIOS.setVisible(shouldShowSetupBIOS);
        }

        String btnSystemUpdatesText = (isWindows ? "Windows Update" : ((isLinux ? "Firmware" : "System") + " Updates"));
        if (!btnSystemUpdatesText.equals(btnSystemUpdates.getText())) {
            btnSystemUpdates.setText(btnSystemUpdatesText);
        }

        boolean shouldShowSystemUpdates = (!isLinuxLiveBoot && !isWindowsPE && shouldShowStressCPUandTasks);
        if (shouldShowSystemUpdates != btnSystemUpdates.isVisible()) {
            btnSystemUpdates.setEnabled(shouldShowSystemUpdates);
            btnSystemUpdates.setVisible(shouldShowSystemUpdates);

            btnVerifySystemUpdates.setVisible(shouldShowSystemUpdates);
        }

        boolean shouldEnableVerifySystemUpdates = (btnVerifySystemUpdates.isVisible() && (!isMacOS || !new File("/Users/Shared/.fgResetSnapshotCreated").exists()));
        if (shouldEnableVerifySystemUpdates != btnVerifySystemUpdates.isEnabled()) {
            btnVerifySystemUpdates.setEnabled(shouldEnableVerifySystemUpdates);
        }

        boolean shouldShowCheckDrivers = (!isMacOS && shouldShowSystemUpdates);
        if (shouldShowCheckDrivers != btnCheckDrivers.isVisible()) {
            btnCheckDrivers.setEnabled(shouldShowCheckDrivers);
            btnCheckDrivers.setVisible(shouldShowCheckDrivers);

            btnVerifyDrivers.setEnabled(shouldShowCheckDrivers);
            btnVerifyDrivers.setVisible(shouldShowCheckDrivers);
        }

        if (isWindows) {
            String btnCheckWindowsLicenseText = "Check Windows License" + (isLoggedIn ? " / License Windows" : "");
            if (!btnCheckWindowsLicenseText.equals(btnCheckWindowsLicense.getText())) {
                btnCheckWindowsLicense.setText(btnCheckWindowsLicenseText);
            }
        }

        boolean shouldShowWindowsLicense = (isWindows && !isWindowsPE && !deviceTypeIsMotherboard && shouldShowStressCPUandTasks);
        if (shouldShowWindowsLicense != btnCheckWindowsLicense.isVisible()) {
            btnCheckWindowsLicense.setEnabled(shouldShowWindowsLicense);
            btnCheckWindowsLicense.setVisible(shouldShowWindowsLicense);

            btnVerifyWindowsLicense.setEnabled(shouldShowWindowsLicense);
            btnVerifyWindowsLicense.setVisible(shouldShowWindowsLicense);
        }

        boolean shouldShowCheckRemoteManagement = (isMacOS && shouldShowStressCPUandTasks);
        if (shouldShowCheckRemoteManagement != btnCheckRemoteManagement.isVisible()) {
            btnCheckRemoteManagement.setEnabled(shouldShowCheckRemoteManagement);
            btnCheckRemoteManagement.setVisible(shouldShowCheckRemoteManagement);

            btnVerifyRemoteManagement.setVisible(shouldShowCheckRemoteManagement);
        }

        boolean shouldEnableVerifyRemoteManagement = (shouldShowCheckRemoteManagement && isLoggedIn);
        if (shouldEnableVerifyRemoteManagement != btnVerifyRemoteManagement.isEnabled()) {
            btnVerifyRemoteManagement.setEnabled(shouldEnableVerifyRemoteManagement);
        }

        boolean showConditionAndNotesButton = isLoggedIn;
        if (showConditionAndNotesButton != btnSetConditionAndNotes.isVisible() || conditionAndNotesUpdated || themeUpdated) {
            boolean conditionAndNotesAreEmpty = (currentConditionGrade.equals("N/A") && currentNotes.isEmpty());
            if (allowSettingConditionGrade) {
                btnSetConditionAndNotes.setText("<html><center>" + (conditionAndNotesAreEmpty ? "Add" : "Edit") + " Condition<br/>and Notes</center></html>");
            } else {
                btnSetConditionAndNotes.setText((conditionAndNotesAreEmpty ? "Add Notes" : "Edit Notes"));
            }
            btnSetConditionAndNotes.setFont(defaultFont.deriveFont(conditionAndNotesAreEmpty ? defaultFont.getStyle() : Font.BOLD));
            btnSetConditionAndNotes.setEnabled(showConditionAndNotesButton);
            btnSetConditionAndNotes.setVisible(showConditionAndNotesButton);
        }

        String btnSaveOrPrintSpecsText = ((isLoggedIn && !isWindows && loggedInUserInfo.containsKey("printerIPs")) ? ((isLinuxUbiquityMode ? "" : "Save or ") + "Print Specs") : "Save Specs");
        if (!btnSaveOrPrintSpecsText.equals(btnSaveOrPrintSpecs.getText())) {
            btnSaveOrPrintSpecs.setText(btnSaveOrPrintSpecsText);
        }

        boolean shouldShowSaveSpecs = ((!isLinuxUbiquityMode || btnSaveOrPrintSpecsText.equals("Print Specs")) && !isWindowsPE && shouldShowStressCPUandTasks);
        if (shouldShowSaveSpecs != btnSaveOrPrintSpecs.isVisible()) {
            btnSaveOrPrintSpecs.setEnabled(shouldShowSaveSpecs);
            btnSaveOrPrintSpecs.setVisible(shouldShowSaveSpecs);
        }

        boolean showSystemInfoButton = (!isPeripheralTestMode && !isWindowsPE);
        if (showSystemInfoButton != btnSystemInfo.isVisible()) {
            btnSystemInfo.setEnabled(showSystemInfoButton);
            btnSystemInfo.setVisible(showSystemInfoButton);
        }

        boolean showStatusHistoryButton = isLoggedIn;
        if (showStatusHistoryButton != btnStatusHistory.isVisible()) {
            btnStatusHistory.setEnabled(showStatusHistoryButton);
            btnStatusHistory.setVisible(showStatusHistoryButton);
        }

        if (isTestMode != lblTestModeT.isVisible()) {
            lblTestModeT.setVisible(isTestMode);
            lblTestModeE.setVisible(isTestMode);
            lblTestModeS.setVisible(isTestMode);
            lblTestModeT2.setVisible(isTestMode);
            lblTestModeM.setVisible(isTestMode);
            lblTestModeO.setVisible(isTestMode);
            lblTestModeD.setVisible(isTestMode);
            lblTestModeE2.setVisible(isTestMode);
        }

        long finishUpdatingVisibilityInDisplayComputerSpecsTime = System.currentTimeMillis();

        if (isTestMode) {
            System.out.println("Update Visiblity in Display Computer Specs MS: " + (finishUpdatingVisibilityInDisplayComputerSpecsTime - startDisplayComputerSpecsTime));
        }

        if ((isCPUverified != (btnVerifyCPU.getText().equals("Verified"))) || themeUpdated) {
            btnVerifyCPU.setText((isCPUverified ? "Verified" : "Verify"));
            btnVerifyCPU.setFont(defaultFont.deriveFont((isCPUverified ? Font.BOLD : defaultFont.getStyle())));
            btnVerifyCPU.setForeground(isCPUverified ? verifiedColor : defaultColor);
            btnVerifyCPU.setBorderPainted(!isCPUverified);
        }

        if ((isDriveHealthVerified != (btnVerifyDriveHealth.getText().equals("Verified"))) || themeUpdated) {
            btnVerifyDriveHealth.setText((isDriveHealthVerified ? "Verified" : "Verify"));
            btnVerifyDriveHealth.setFont(defaultFont.deriveFont((isDriveHealthVerified ? Font.BOLD : defaultFont.getStyle())));
            btnVerifyDriveHealth.setForeground(isDriveHealthVerified ? verifiedColor : defaultColor);
            btnVerifyDriveHealth.setBorderPainted(!isDriveHealthVerified);
        }

        if ((isDiscDriveVerified != (btnVerifyDiscDrive.getText().equals("Verified"))) || themeUpdated) {
            btnVerifyDiscDrive.setText((isDiscDriveVerified ? "Verified" : "Verify"));
            btnVerifyDiscDrive.setFont(defaultFont.deriveFont((isDiscDriveVerified ? Font.BOLD : defaultFont.getStyle())));
            btnVerifyDiscDrive.setForeground(isDiscDriveVerified ? verifiedColor : defaultColor);
            btnVerifyDiscDrive.setBorderPainted(!isDiscDriveVerified);
        }

        if ((isInternetVerified != (btnVerifyInternet.getText().equals("Verified"))) || themeUpdated) {
            btnVerifyInternet.setText((isInternetVerified ? "Verified" : "Verify"));
            btnVerifyInternet.setFont(defaultFont.deriveFont((isInternetVerified ? Font.BOLD : defaultFont.getStyle())));
            btnVerifyInternet.setForeground(isInternetVerified ? verifiedColor : defaultColor);
            btnVerifyInternet.setBorderPainted(!isInternetVerified);
        }

        if ((isScreenVerified != (btnVerifyScreen.getText().equals("Verified"))) || themeUpdated) {
            btnVerifyScreen.setText((isScreenVerified ? "Verified" : "Verify"));
            btnVerifyScreen.setFont(defaultFont.deriveFont((isScreenVerified ? Font.BOLD : defaultFont.getStyle())));
            btnVerifyScreen.setForeground(isScreenVerified ? verifiedColor : defaultColor);
            btnVerifyScreen.setBorderPainted(!isScreenVerified);
        }

        if ((isAudioVerified != (btnVerifyAudio.getText().equals("Verified"))) || themeUpdated) {
            btnVerifyAudio.setText((isAudioVerified ? "Verified" : "Verify"));
            btnVerifyAudio.setFont(defaultFont.deriveFont((isAudioVerified ? Font.BOLD : defaultFont.getStyle())));
            btnVerifyAudio.setForeground(isAudioVerified ? verifiedColor : defaultColor);
            btnVerifyAudio.setBorderPainted(!isAudioVerified);
        }

        if ((isMicrophoneVerified != (btnVerifyMicrophone.getText().equals("Verified"))) || themeUpdated) {
            btnVerifyMicrophone.setText((isMicrophoneVerified ? "Verified" : "Verify"));
            btnVerifyMicrophone.setFont(defaultFont.deriveFont((isMicrophoneVerified ? Font.BOLD : defaultFont.getStyle())));
            btnVerifyMicrophone.setForeground(isMicrophoneVerified ? verifiedColor : defaultColor);
            btnVerifyMicrophone.setBorderPainted(!isMicrophoneVerified);
        }

        if ((isCameraVerified != (btnVerifyCamera.getText().equals("Verified"))) || themeUpdated) {
            btnVerifyCamera.setText((isCameraVerified ? "Verified" : "Verify"));
            btnVerifyCamera.setFont(defaultFont.deriveFont((isCameraVerified ? Font.BOLD : defaultFont.getStyle())));
            btnVerifyCamera.setForeground(isCameraVerified ? verifiedColor : defaultColor);
            btnVerifyCamera.setBorderPainted(!isCameraVerified);
        }

        if ((isKeyboardVerified != (btnVerifyKeyboard.getText().equals("Verified"))) || themeUpdated) {
            btnVerifyKeyboard.setText((isKeyboardVerified ? "Verified" : "Verify"));
            btnVerifyKeyboard.setFont(defaultFont.deriveFont((isKeyboardVerified ? Font.BOLD : defaultFont.getStyle())));
            btnVerifyKeyboard.setForeground(isKeyboardVerified ? verifiedColor : defaultColor);
            btnVerifyKeyboard.setBorderPainted(!isKeyboardVerified);
        }

        if ((isMouseVerified != (btnVerifyMouse.getText().equals("Verified"))) || themeUpdated) {
            btnVerifyMouse.setText((isMouseVerified ? "Verified" : "Verify"));
            btnVerifyMouse.setFont(defaultFont.deriveFont((isMouseVerified ? Font.BOLD : defaultFont.getStyle())));
            btnVerifyMouse.setForeground(isMouseVerified ? verifiedColor : defaultColor);
            btnVerifyMouse.setBorderPainted(!isMouseVerified);
        }

        if ((isBIOSverified != (btnVerifyBIOS.getText().equals("Verified"))) || themeUpdated) {
            btnVerifyBIOS.setText((isBIOSverified ? "Verified" : "Verify"));
            btnVerifyBIOS.setFont(defaultFont.deriveFont((isBIOSverified ? Font.BOLD : defaultFont.getStyle())));
            btnVerifyBIOS.setForeground(isBIOSverified ? verifiedColor : defaultColor);
            btnVerifyBIOS.setBorderPainted(!isBIOSverified);
        }

        if ((isPortsVerified != (btnVerifyPorts.getText().equals("Verified"))) || themeUpdated) {
            btnVerifyPorts.setText((isPortsVerified ? "Verified" : "Verify"));
            btnVerifyPorts.setFont(defaultFont.deriveFont((isPortsVerified ? Font.BOLD : defaultFont.getStyle())));
            btnVerifyPorts.setForeground(isPortsVerified ? verifiedColor : defaultColor);
            btnVerifyPorts.setBorderPainted(!isPortsVerified);
        }

        if ((isDriversVerified != (btnVerifyDrivers.getText().equals("Verified"))) || themeUpdated) {
            btnVerifyDrivers.setText((isDriversVerified ? "Verified" : "Verify"));
            btnVerifyDrivers.setFont(defaultFont.deriveFont((isDriversVerified ? Font.BOLD : defaultFont.getStyle())));
            btnVerifyDrivers.setForeground(isDriversVerified ? verifiedColor : defaultColor);
            btnVerifyDrivers.setBorderPainted(!isDriversVerified);
        }

        if ((isUpdatesVerified != (btnVerifySystemUpdates.getText().equals("Verified"))) || themeUpdated) {
            btnVerifySystemUpdates.setText((isUpdatesVerified ? "Verified" : "Verify"));
            btnVerifySystemUpdates.setFont(defaultFont.deriveFont((isUpdatesVerified ? Font.BOLD : defaultFont.getStyle())));
            btnVerifySystemUpdates.setForeground(isUpdatesVerified ? verifiedColor : defaultColor);
            btnVerifySystemUpdates.setBorderPainted(!isUpdatesVerified);
        }

        if ((isWindowsLicenseVerified != (btnVerifyWindowsLicense.getText().equals("Verified"))) || themeUpdated) {
            btnVerifyWindowsLicense.setText((isWindowsLicenseVerified ? "Verified" : "Verify"));
            btnVerifyWindowsLicense.setFont(defaultFont.deriveFont((isWindowsLicenseVerified ? Font.BOLD : defaultFont.getStyle())));
            btnVerifyWindowsLicense.setForeground(isWindowsLicenseVerified ? verifiedColor : defaultColor);
            btnVerifyWindowsLicense.setBorderPainted(!isWindowsLicenseVerified);
        }

        if ((isRemoteManagementVerified != (btnVerifyRemoteManagement.getText().equals("Verified"))) || themeUpdated) {
            btnVerifyRemoteManagement.setText((isRemoteManagementVerified ? "Verified" : "Verify"));
            btnVerifyRemoteManagement.setFont(defaultFont.deriveFont((isRemoteManagementVerified ? Font.BOLD : defaultFont.getStyle())));
            btnVerifyRemoteManagement.setForeground(isRemoteManagementVerified ? verifiedColor : defaultColor);
            btnVerifyRemoteManagement.setBorderPainted(!isRemoteManagementVerified);
        }

        long finishVerifyInDisplayComputerSpecsTime = System.currentTimeMillis();

        if (isTestMode) {
            System.out.println("Update Verify Buttons in Display Computer Specs MS: " + (finishVerifyInDisplayComputerSpecsTime - finishUpdatingVisibilityInDisplayComputerSpecsTime));
        }

        String modelLabelText = "<html><b>Model:</b></html>";
        if (!manualDeviceType.isEmpty()) {
            modelLabelText = "<html><b>" + manualDeviceType + ":</b></html>";
        }

        if (!lblModelLabel.getText().equals(modelLabelText)) {
            lblModelLabel.setText(modelLabelText);
        }

        if (computerSpecs != null) {
            String toolTipFooter = "<br/><br/><center>" + new TwemojiImage("ComputerMouse", qaHelperWindow).toImgTag("left") + " <i>Right-Click to Copy or Search This Spec Value</i> " + new TwemojiImage("MagnifyingGlassTiltedLeft", qaHelperWindow).toImgTag("right") + "</center></html>";

            // BRAND & MODEL
            String lblModelText = "N/A";
            String lblModelToolTipText = "N/A";
            Color lblModelColor = defaultColor;

            String brand = computerSpecs.getBrand();
            String fullBrand = computerSpecs.getFullBrand();

            String model = computerSpecs.getModel();
            String fullModel = computerSpecs.getFullModel();

            if (deviceTypeIsMotherboard) {
                brand = computerSpecs.getMotherboardBrand();
                fullBrand = computerSpecs.getFullMotherboardBrand();

                model = computerSpecs.getMotherboardModel();
                fullModel = computerSpecs.getFullMotherboardModel();
            }

            boolean brandIsNA = brand.equals("N/A");
            boolean modelIsNA = model.equals("N/A");

            if (brandIsNA && modelIsNA) {
                if (isLinux && adminPassword.equals("*UNKNOWN*")) {
                    lblModelColor = warningColor;

                    lblModelText = "<html><i>Reload With Admin Password for <b>Model</b> and <b>Serial</b> Info</i></html>";
                } else {
                    lblModelColor = errorColor;
                }
            } else if (brandIsNA || modelIsNA) {
                lblModelColor = warningColor;

                lblModelText = "<html>" + (brandIsNA ? "<i>UNKNOWN BRAND</i>" : escapeSingleLineSpecStringForHTML(brand)) + " - " + (modelIsNA ? "<i>UNKNOWN MODEL</i>" : escapeSingleLineSpecStringForHTML(model)) + "</html>";
                lblModelToolTipText = (brandIsNA ? "<i>UNKNOWN BRAND</i>" : escapeSingleLineSpecStringForHTML(fullBrand)) + " - " + (modelIsNA ? "<i>UNKNOWN MODEL</i>" : escapeSingleLineSpecStringForHTML(fullModel));
            } else {
                lblModelText = brand + " " + model;
                if (isMacOS) {
                    if (lblModelText.contains("…") && fullModel.contains("POSSIBLE MODELS")) { // Some groups of possible Marketing Model Names can be long especially when including the warnings and we want to be sure to always display the whole thing with the warnings.
                        lblModelText = brand + " " + fullModel;
                    }

                    if (lblModelText.contains(" - UNKNOWN") || lblModelText.contains("POSSIBLE MODELS")) {
                        lblModelColor = warningColor;
                        lblModelText = "<html>" + escapeSingleLineSpecStringForHTML(lblModelText).replaceFirst(" - ", "<b> - ").replace(" or ", " <b>or</b> ") + "</b></html>";
                    }
                }

                lblModelToolTipText = escapeSingleLineSpecStringForHTML(fullBrand) + " " + escapeSingleLineSpecStringForHTML(fullModel).replace(" - ", "<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Note:</b> ");
            }

            lblModelToolTipText = lblModelLabel.getText().replace("</html>", "<br/>") + lblModelToolTipText + toolTipFooter;

            if (!lblModelLabel.getForeground().equals(lblModelColor)) {
                lblModelLabel.setForeground(lblModelColor);
                lblModel.setForeground(lblModelColor);
            }

            if ((lblModel.getToolTipText() == null) || !lblModel.getToolTipText().equals(lblModelToolTipText)) {
                lblModel.setText(lblModelText);
                lblModel.setToolTipText(lblModelToolTipText);
                lblModelLabel.setToolTipText(lblModelToolTipText);
            }

            // SERIAL
            String serial = computerSpecs.getSerial();
            String fullSerial = computerSpecs.getFullSerial();

            if (deviceTypeIsMotherboard) {
                serial = computerSpecs.getMotherboardSerial();
                fullSerial = computerSpecs.getFullMotherboardSerial();
            }

            String lblSerialText = escapeSingleLineSpecStringForHTML(serial);
            String lblSerialToolTipText = "<html><b>Serial:</b><br/>" + escapeSingleLineSpecStringForHTML(fullSerial) + toolTipFooter;
            Color lblSerialColor = (lblSerialText.equals("N/A") ? errorColor : defaultColor);

            if (!lblSerial.getForeground().equals(lblSerialColor)) {
                lblSerial.setForeground(lblSerialColor);
            }

            if ((lblSerial.getToolTipText() == null) || !lblSerial.getToolTipText().equals(lblSerialToolTipText)) {
                lblSerial.setText("<html><b>Serial:</b> " + lblSerialText + "</html>");
                lblSerial.setToolTipText(lblSerialToolTipText);
            }

            // CPU
            String lblCPUtext = computerSpecs.getCPU();
            String lblCPUtoolTipText = lblCPULabel.getText().replace("</html>", "<br/>") + escapeSingleLineSpecStringForHTML(computerSpecs.getFullCPU()) + toolTipFooter;
            Color lblCPUcolor = (lblCPUtext.equals("N/A") ? errorColor : defaultColor);

            if (!lblCPULabel.getForeground().equals(lblCPUcolor)) {
                lblCPULabel.setForeground(lblCPUcolor);
                lblCPU.setForeground(lblCPUcolor);
            }

            if ((lblCPU.getToolTipText() == null) || !lblCPU.getToolTipText().equals(lblCPUtoolTipText)) {
                lblCPU.setText(lblCPUtext);
                lblCPU.setToolTipText(lblCPUtoolTipText);
                lblCPULabel.setToolTipText(lblCPUtoolTipText);
            }

            // RAM
            String lblRAMtext = computerSpecs.getRAM();
            String lblRAMtoolTipText = escapeSingleLineSpecStringForHTML(computerSpecs.getFullRAM()).replace(" - ", "<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Note:</b> ");
            Color lblRAMcolor = defaultColor;

            if (lblRAMtext.equals("N/A")) {
                lblRAMcolor = errorColor;
            } else if (lblRAMtext.contains(" - ")) {
                String[] ramTextParts = escapeSingleLineSpecStringForHTML(lblRAMtext).split(" - ");
                lblRAMtext = "<html>" + ramTextParts[0] + " - <i>" + String.join("</i> - <i>", Arrays.copyOfRange(ramTextParts, 1, ramTextParts.length)) + "</i></html>";
            } else if (isLinux && adminPassword.equals("*UNKNOWN*")) {
                lblRAMcolor = warningColor;

                lblRAMtext = "<html>" + escapeSingleLineSpecStringForHTML(lblRAMtext) + " - <i>Reload With Admin Password for More <b>RAM</b> Info</i></html>";
                lblRAMtoolTipText += "<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Note:</b> Reload With Admin Password for More RAM Info";
            }

            lblRAMtoolTipText = lblRAMLabel.getText().replace("</html>", "<br/>") + lblRAMtoolTipText + toolTipFooter;

            if (!lblRAMLabel.getForeground().equals(lblRAMcolor)) {
                lblRAMLabel.setForeground(lblRAMcolor);
                lblRAM.setForeground(lblRAMcolor);
            }

            if ((lblRAM.getToolTipText() == null) || !lblRAM.getToolTipText().equals(lblRAMtoolTipText)) {
                lblRAM.setText(lblRAMtext);
                lblRAM.setToolTipText(lblRAMtoolTipText);
                lblRAMLabel.setToolTipText(lblRAMtoolTipText);
            }

            // BATTERY
            String lblBatteryText = escapeSingleLineSpecStringForHTML(computerSpecs.getBatteryHealthString());
            boolean hasBattery = (!deviceTypeIsMotherboard && (deviceTypeIsLaptop || !lblBatteryText.equals("N/A")));

            if (hasBattery) {
                Color lblBatteryColor = defaultColor;
                if (isWindowsPE && lblBatteryText.equals("N/A")) {
                    lblBatteryText += " - <b>CHECK AGAIN IN INSTALLED OS</b>";
                    lblBatteryColor = warningColor;
                }

                String batteryHealthErrorString = computerSpecs.getBatteryHealthErrorString().replace("<=", "&le;").replace(">=", "&ge;").replace("<", "&lt;").replace(">", "&gt;");
                String batteryHealthWarningString = computerSpecs.getBatteryHealthWarningString().replace("<=", "&le;").replace(">=", "&ge;").replace("<", "&lt;").replace(">", "&gt;");

                String lblBatteryToolTipText = lblBatteryText;
                ArrayList<String> batteryHealthArray = computerSpecs.getBatteryHealthArray();
                if (batteryHealthArray.size() > 1) {
                    lblBatteryToolTipText = escapeMultiLineStringForHTML("• " + String.join("\n• ", batteryHealthArray));
                }

                lblBatteryToolTipText = "<html><b>Battery Health:</b><br/>" + lblBatteryToolTipText + "<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Battery Health Warning:</b> " + (batteryHealthWarningString.isEmpty() ? "None" : batteryHealthWarningString) + "<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Battery Health Error:</b> " + (batteryHealthErrorString.isEmpty() ? "None" : batteryHealthErrorString) + (!computerSpecs.getPowerAdapter().isEmpty() ? "<br/><br/><b>Power Adapter:</b><br/>" + escapeSingleLineSpecStringForHTML(computerSpecs.getPowerAdapter()) : "") + toolTipFooter;
                lblBatteryColor = ((!batteryHealthErrorString.isEmpty() || lblBatteryText.equals("N/A")) ? errorColor : (!batteryHealthWarningString.isEmpty() ? warningColor : lblBatteryColor));

                if (computerSpecs.getBatteryHealthWarningArray().contains("Possibly Recalled")) {
                    lblBatteryText += " - <b>POSSIBLY RECALLED</b>";
                }

                if (computerSpecs.getBatteryHealthWarningArray().contains("Not Charging")) {
                    lblBatteryText += " - <b>NOT CHARGING</b>";
                }

                ArrayList<String> batteryHealthErrorArray = computerSpecs.getBatteryHealthErrorArray();
                for (String thisBatteryHealthError : batteryHealthErrorArray) {
                    if (thisBatteryHealthError.startsWith("Condition ")) {
                        lblBatteryText += " - <b>" + escapeSingleLineSpecStringForHTML(thisBatteryHealthError.toUpperCase()) + "</b>";
                        break;
                    }
                }

                String lblBatteryColorHTML = "";
                if (!computerSpecs.getPowerAdapter().isEmpty()) {
                    if (!lblBatteryColor.equals(defaultColor)) {
                        lblBatteryColorHTML = "<span style='color: " + (lblBatteryColor.equals(errorColor) ? errorColorHTML : warningColorHTML) + "'>";
                        lblBatteryText = lblBatteryText + "</span>";

                        if (!lblBatteryCapacity.getForeground().equals(defaultColor)) {
                            lblBatteryCapacity.setForeground(defaultColor);
                        }
                    }

                    lblBatteryText += "&nbsp;&nbsp;&nbsp;<b>Power Adapter:</b> " + escapeSingleLineSpecStringForHTML(computerSpecs.getPowerAdapter());
                } else if (!lblBatteryCapacity.getForeground().equals(lblBatteryColor)) {
                    lblBatteryCapacity.setForeground(lblBatteryColor);
                }

                if ((lblBatteryCapacity.getToolTipText() == null) || !lblBatteryCapacity.getToolTipText().equals(lblBatteryToolTipText)) {
                    lblBatteryCapacity.setText("<html>" + lblBatteryColorHTML + "<b>Battery Health:</b> " + lblBatteryText + "</html>");
                    lblBatteryCapacity.setToolTipText(lblBatteryToolTipText);
                }
            }

            if (hasBattery != lblBatteryCapacity.isVisible()) {
                lblBatteryCapacity.setVisible(hasBattery);
            }

            // STORAGE
            boolean shouldShowStorageLabel = (!deviceTypeIsMotherboard);
            if (shouldShowStorageLabel) {
                String lblStorageText = escapeSingleLineSpecStringForHTML(computerSpecs.getStorage()).replace("RAID", "<i style='color: " + warningColorHTML + "'>RAID</i>");

                String lblStorageToolTipText;
                ArrayList<String> storageArray = computerSpecs.getStorageArray();
                if (storageArray.size() > 1) {
                    lblStorageToolTipText = escapeMultiLineStringForHTML("• " + String.join("\n• ", storageArray));
                } else {
                    lblStorageToolTipText = escapeSingleLineSpecStringForHTML(computerSpecs.getFullStorage());
                }

                Color lblStorageColor = (lblStorageText.equals("N/A") ? errorColor : defaultColor);

                String disksFormattedWithoutPartitionTable = computerSpecs.getDisksFormattedWithoutPartitionTable();
                if (computerSpecs.getDriveHealthWarning() || computerSpecs.getDriveTrimWarning() || computerSpecs.getDriveRecalled() || !disksFormattedWithoutPartitionTable.isEmpty()) {
                    lblStorageColor = warningColor;

                    if (computerSpecs.getDriveRecalled()) {
                        // This is currently only set for some Macs
                        lblStorageText += " - <b>POSSIBLY RECALLED</b>";
                        lblStorageToolTipText += "<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Note:</b> POSSIBLY RECALLED";
                    }

                    if (computerSpecs.getDriveTrimWarning()) {
                        // This is currently only set on Mac
                        lblStorageText += " - <b>TRIM NOT ENABLED</b>";
                        lblStorageToolTipText += "<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Note:</b> TRIM NOT ENABLED";
                    }

                    if (!disksFormattedWithoutPartitionTable.isEmpty()) {
                        // This is currently only set on Linux
                        String disksFormattedWithoutPartitionTableNote = "<i>" + disksFormattedWithoutPartitionTable + "</i> " + (disksFormattedWithoutPartitionTable.contains(",") ? "are" : "is") + " Formatted Without a Partition Table";

                        lblStorageText += " - <b>" + disksFormattedWithoutPartitionTableNote + "</b>";
                        lblStorageToolTipText += "<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Note:</b> " + disksFormattedWithoutPartitionTableNote;
                    }
                }

                lblStorageText = "<html>" + lblStorageText + "</html>";

                String storageSerialToolTipText;
                ArrayList<String> storageSerialsArray = computerSpecs.getStorageSerialsArray();
                if (storageSerialsArray.size() > 1) {
                    storageSerialToolTipText = escapeMultiLineStringForHTML("• " + String.join("\n• ", storageSerialsArray));
                } else {
                    storageSerialToolTipText = escapeSingleLineSpecStringForHTML(computerSpecs.getFullStorageSerial());
                }

                if (!storageSerialToolTipText.isEmpty()) {
                    lblStorageToolTipText += "<br/><br/><b>Storage Serial:</b><br/>" + storageSerialToolTipText;
                }

                lblStorageToolTipText = lblStorageLabel.getText().replace("</html>", "<br/>") + lblStorageToolTipText + toolTipFooter;

                if (!lblStorageLabel.getForeground().equals(lblStorageColor)) {
                    lblStorageLabel.setForeground(lblStorageColor);
                    lblStorage.setForeground(lblStorageColor);
                }

                if ((lblStorage.getToolTipText() == null) || !lblStorage.getToolTipText().equals(lblStorageToolTipText)) {
                    lblStorage.setText(lblStorageText);
                    lblStorage.setToolTipText(lblStorageToolTipText);
                    lblStorageLabel.setToolTipText(lblStorageToolTipText);
                }
            }

            if (shouldShowStorageLabel != lblStorageLabel.isVisible()) {
                lblStorageLabel.setVisible(shouldShowStorageLabel);
                lblStorage.setVisible(shouldShowStorageLabel);
            }

            // DISC DRIVE
            boolean shouldShowDiscDriveLabel = (hasDiscDrive || (!deviceTypeIsLaptop && !deviceTypeIsMotherboard));
            if (shouldShowDiscDriveLabel) {
                String lblDiscDriveText = computerSpecs.getDiscDrive();

                String lblDiscDriveToolTipText;
                ArrayList<String> discDriveArray = computerSpecs.getDiscDriveArray();
                if (discDriveArray.size() > 1) {
                    lblDiscDriveToolTipText = escapeMultiLineStringForHTML("• " + String.join("\n• ", discDriveArray));
                } else {
                    lblDiscDriveToolTipText = escapeSingleLineSpecStringForHTML(computerSpecs.getFullDiscDrive());
                }

                Color lblDiscDriveColor = defaultColor;

                if (hasDiscDrive) {
                    String discDriveCapabilityNote;

                    if (computerSpecs.discDriveCanBurnCDs() && computerSpecs.discDriveCanBurnDVDs()) {
                        discDriveCapabilityNote = "Supports Writing CDs and DVDs";
                    } else {
                        if (computerSpecs.discDriveCanBurnCDs()) {
                            discDriveCapabilityNote = "Does <b>NOT</b> Support Writing DVDs";
                        } else if (computerSpecs.discDriveCanBurnDVDs()) {
                            discDriveCapabilityNote = "Does <b>NOT</b> Support Writing CDs";
                        } else {
                            discDriveCapabilityNote = "Does <b>NOT</b> Support Writing CDs or DVDs";
                        }

                        lblDiscDriveColor = warningColor;
                    }

                    lblDiscDriveText = "<html>" + escapeSingleLineSpecStringForHTML(lblDiscDriveText) + " <i>(" + discDriveCapabilityNote + ")</i></html>";
                    lblDiscDriveToolTipText += "<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Capability:</b> " + discDriveCapabilityNote;

                    if (computerSpecs.hasDiscInDiscDrive()) {
                        lblDiscDriveText = lblDiscDriveText.replace("</html>", " - <b>REMOVE DISC FROM DRIVE</b></html>");
                        lblDiscDriveToolTipText += "<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Note:</b> REMOVE DISC FROM DRIVE";

                        lblDiscDriveColor = errorColor;
                    }
                } else {
                    lblDiscDriveColor = (isDiscDriveVerified ? warningColor : errorColor);
                }

                lblDiscDriveToolTipText = lblDiscDriveLabel.getText().replace("</html>", "<br/>") + lblDiscDriveToolTipText + toolTipFooter;

                if (!lblDiscDriveLabel.getForeground().equals(lblDiscDriveColor)) {
                    lblDiscDriveLabel.setForeground(lblDiscDriveColor);
                    lblDiscDrive.setForeground(lblDiscDriveColor);
                }

                if ((lblDiscDrive.getToolTipText() == null) || !lblDiscDrive.getToolTipText().equals(lblDiscDriveToolTipText)) {
                    lblDiscDrive.setText(lblDiscDriveText);
                    lblDiscDrive.setToolTipText(lblDiscDriveToolTipText);
                    lblDiscDriveLabel.setToolTipText(lblDiscDriveToolTipText);
                }
            }

            if (shouldShowDiscDriveLabel != lblDiscDriveLabel.isVisible()) { // Completely hide disc drive line if is laptop without disc drive, since most are manufactured without them nowadays.
                lblDiscDriveLabel.setVisible(shouldShowDiscDriveLabel);
                lblDiscDrive.setVisible(shouldShowDiscDriveLabel);
            }

            // WIRELESS
            String lblWirelessText = computerSpecs.getWireless();

            String lblWirelessToolTipText;
            ArrayList<String> wirelessArray = computerSpecs.getWirelessArray();
            if (wirelessArray.size() > 1) {
                lblWirelessToolTipText = escapeMultiLineStringForHTML("• " + String.join("\n• ", wirelessArray));
            } else {
                lblWirelessToolTipText = escapeSingleLineSpecStringForHTML(lblWirelessText);
            }

            Color lblWirelessColor = defaultColor;

            if (lblWirelessText.equals("N/A")) {
                if (isWindowsPE) {
                    lblWirelessColor = warningColor;

                    String wirelessWinPEnote = "<i>Not Detected in Windows Preinstallation Environment (Check Again in Installed OS)</i>";

                    lblWirelessText = "<html>" + wirelessWinPEnote + "</html>";
                    lblWirelessToolTipText = wirelessWinPEnote;
                } else {
                    lblWirelessColor = (isInternetVerified ? warningColor : errorColor);
                }
            } else {
                String wirelessErrorString = escapeSingleLineSpecStringForHTML(computerSpecs.getWirelessErrorString());

                if (!wirelessErrorString.isEmpty()) {
                    lblWirelessColor = errorColor;

                    lblWirelessText = "<html>" + escapeSingleLineSpecStringForHTML(lblWirelessText) + " - <b>" + wirelessErrorString + "</b></html>";
                    lblWirelessToolTipText += "<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Note:</b> " + wirelessErrorString;
                }
            }

            lblWirelessToolTipText = lblWirelessLabel.getText().replace("</html>", "<br/>") + lblWirelessToolTipText + toolTipFooter;

            if (!lblWirelessLabel.getForeground().equals(lblWirelessColor)) {
                lblWirelessLabel.setForeground(lblWirelessColor);
                lblWireless.setForeground(lblWirelessColor);
            }

            if ((lblWireless.getToolTipText() == null) || !lblWireless.getToolTipText().equals(lblWirelessToolTipText)) {
                lblWireless.setText(lblWirelessText);
                lblWireless.setToolTipText(lblWirelessToolTipText);
                lblWirelessLabel.setToolTipText(lblWirelessToolTipText);
            }

            // SCREEN SIZE & RESOLUTION
            boolean shouldShowScreenLabel = (deviceTypeHasScreen || forceShowAllTests);
            if (shouldShowScreenLabel) {
                String lblScreenText = computerSpecs.getScreenSize();
                String lblScreenToolTipText = escapeSingleLineSpecStringForHTML(computerSpecs.getFullScreenSize());

                Color lblScreenColor = defaultColor;

                String screenErrorString = computerSpecs.getScreenErrorString();

                if (!screenErrorString.isEmpty()) {
                    lblScreenColor = warningColor;

                    lblScreenText = "<html>" + lblScreenText + " - <b>" + screenErrorString + "</b></html>";
                    lblScreenToolTipText += "<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Note:</b> " + escapeSingleLineSpecStringForHTML(screenErrorString);
                } else if (lblScreenText.endsWith("N/A")) {
                    if (isWindowsPE) {
                        lblScreenColor = warningColor;

                        String screenWinPEnote = (computerSpecs.getFullScreenSize().contains("-inch") ? "<i>" : "<i>Size and ") + "Resolution Not Available in Windows Preinstallation Environment<i>";

                        lblScreenText = "<html>" + escapeSingleLineSpecStringForHTML(lblScreenText).replace("N/A", screenWinPEnote) + "</html>";

                        int seperatorIndex = lblScreenText.lastIndexOf(": ");
                        if (seperatorIndex > 0) {
                            lblScreenText = lblScreenText.substring(0, seperatorIndex) + " - " + lblScreenText.substring(seperatorIndex + 2);
                        }

                        lblScreenToolTipText += "<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Note:</b> " + screenWinPEnote;
                    } else {
                        lblScreenColor = (lblScreenText.equals("N/A") ? errorColor : warningColor);
                    }
                }

                lblScreenToolTipText = lblScreenLabel.getText().replace("</html>", "<br/>") + lblScreenToolTipText + toolTipFooter;

                if (!lblScreenLabel.getForeground().equals(lblScreenColor)) {
                    lblScreenLabel.setForeground(lblScreenColor);
                    lblScreen.setForeground(lblScreenColor);
                }

                if ((lblScreen.getToolTipText() == null) || !lblScreen.getToolTipText().equals(lblScreenToolTipText)) {
                    lblScreen.setText(lblScreenText);
                    lblScreen.setToolTipText(lblScreenToolTipText);
                    lblScreenLabel.setToolTipText(lblScreenToolTipText);
                }
            }

            if (shouldShowScreenLabel != lblScreenLabel.isVisible()) {
                lblScreenLabel.setVisible(shouldShowScreenLabel);
                lblScreen.setVisible(shouldShowScreenLabel);
            }

            // GPU
            boolean shouldShowGPULabel = (!deviceTypeIsMotherboard);
            if (shouldShowGPULabel) {
                String lblGPUtext = computerSpecs.getGPU();

                String lblGPUtoolTipText;
                ArrayList<String> gpuArray = computerSpecs.getGPUarray();
                if (gpuArray.size() > 1) {
                    lblGPUtoolTipText = escapeMultiLineStringForHTML("• " + String.join("\n• ", gpuArray));
                } else {
                    lblGPUtoolTipText = escapeSingleLineSpecStringForHTML(computerSpecs.getFullGPU());
                }

                Color lblGPUcolor = defaultColor;

                String gpuErrorString = escapeSingleLineSpecStringForHTML(computerSpecs.getGPUerrorString());

                if (lblGPUtext.equals("N/A") || !gpuErrorString.isEmpty()) {
                    lblGPUcolor = (gpuErrorString.contains("RECALL") ? warningColor : errorColor);

                    if (!gpuErrorString.isEmpty()) {
                        lblGPUtext = "<html>" + escapeSingleLineSpecStringForHTML(lblGPUtext) + " - <b>" + gpuErrorString + "</b></html>";
                        lblGPUtoolTipText += "<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Note:</b> " + gpuErrorString;
                    }
                }

                lblGPUtoolTipText = lblGPULabel.getText().replace("</html>", "<br/>") + lblGPUtoolTipText + toolTipFooter;

                if (!lblGPULabel.getForeground().equals(lblGPUcolor)) {
                    lblGPULabel.setForeground(lblGPUcolor);
                    lblGPU.setForeground(lblGPUcolor);
                }

                if ((lblGPU.getToolTipText() == null) || !lblGPU.getToolTipText().equals(lblGPUtoolTipText)) {
                    lblGPU.setText(lblGPUtext);
                    lblGPU.setToolTipText(lblGPUtoolTipText);
                    lblGPULabel.setToolTipText(lblGPUtoolTipText);
                }
            }

            if (shouldShowGPULabel != lblGPULabel.isVisible()) {
                lblGPULabel.setVisible(shouldShowGPULabel);
                lblGPU.setVisible(shouldShowGPULabel);
            }

            // OS
            boolean shouldShowOSLabel = (!deviceTypeIsMotherboard);
            if (shouldShowOSLabel) {
                String lblOStext = escapeSingleLineSpecStringForHTML(computerSpecs.getOS());
                String lblOStoolTipText = "<html><b>OS:</b><br/>" + escapeSingleLineSpecStringForHTML(computerSpecs.getFullOS()) + toolTipFooter;
                Color lblOScolor = (lblOStext.equals("N/A") ? errorColor : defaultColor);

                if (!lblOS.getForeground().equals(lblOScolor)) {
                    lblOS.setForeground(lblOScolor);
                }

                if ((lblOS.getToolTipText() == null) || !lblOS.getToolTipText().equals(lblOStoolTipText)) {
                    lblOS.setText("<html><b>OS:</b> " + lblOStext + "</html>");
                    lblOS.setToolTipText(lblOStoolTipText);
                }
            }

            if (shouldShowOSLabel != lblOS.isVisible()) {
                lblOS.setVisible(shouldShowOSLabel);
                lblOS.setVisible(shouldShowOSLabel);
            }

            // AUDIO
            String lblAudioText = computerSpecs.getAudio();

            String lblAudioToolTipText;
            ArrayList<String> audioArray = computerSpecs.getAudioArray();
            if (audioArray.size() > 1) {
                lblAudioToolTipText = escapeMultiLineStringForHTML("• " + String.join("\n• ", audioArray));
            } else {
                lblAudioToolTipText = escapeSingleLineSpecStringForHTML(computerSpecs.getFullAudio());
            }

            Color lblAudioColor = defaultColor;

            String audioErrorString = escapeSingleLineSpecStringForHTML(computerSpecs.getAudioErrorString());

            if (lblAudioText.equals("N/A") || !audioErrorString.isEmpty()) {
                if (audioErrorString.equals("DRIVER MAY NOT BE INSTALLED")) {
                    lblAudioColor = warningColor;
                } else {
                    lblAudioColor = errorColor;
                }

                if (!audioErrorString.isEmpty()) {
                    lblAudioText = "<html>" + escapeSingleLineSpecStringForHTML(lblAudioText) + " - <b>" + audioErrorString + "</b></html>";
                    lblAudioToolTipText += "<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Note:</b> " + audioErrorString;
                }
            }

            lblAudioToolTipText = lblAudioLabel.getText().replace("</html>", "<br/>") + lblAudioToolTipText + toolTipFooter;

            if (!lblAudioLabel.getForeground().equals(lblAudioColor)) {
                lblAudioLabel.setForeground(lblAudioColor);
                lblAudio.setForeground(lblAudioColor);
            }

            if ((lblAudio.getToolTipText() == null) || !lblAudio.getToolTipText().equals(lblAudioToolTipText)) {
                lblAudio.setText(lblAudioText);
                lblAudio.setToolTipText(lblAudioToolTipText);
                lblAudioLabel.setToolTipText(lblAudioToolTipText);
            }
        }

        long finishUpdateSpecsTime = System.currentTimeMillis();

        if (isTestMode) {
            System.out.println("Update Specs in Display Computer Specs MS: " + (finishUpdateSpecsTime - finishVerifyInDisplayComputerSpecsTime));
        }

        long finishDisplayComputerSpecsTime = System.currentTimeMillis();

        if (isTestMode) {
            System.out.println("Display Computer Specs MS: " + (finishDisplayComputerSpecsTime - startDisplayComputerSpecsTime));
        }

        int fontBasedMinWidth = (currentTextSize * 50);
        int fontBasedMinHeight = (currentTextSize * 8);

        if (!isLinux) {
            fontBasedMinWidth = UIScale.scale(fontBasedMinWidth);
            fontBasedMinHeight = UIScale.scale(fontBasedMinHeight);
        }

        int minWidth = Math.min(fontBasedMinWidth, UIScale.scale(800));
        int minHeight = Math.min(fontBasedMinHeight, UIScale.scale(100));

        final Dimension prePackSize = getSize();

        // Don't allow pack() to go smaller than current width (but do allow wider) unless themeUpdated which could be a font size decrease.
        setMinimumSize(new java.awt.Dimension(((isVisible() && !themeUpdated) ? getSize().width : minWidth), minHeight));
        setPreferredSize(null);

        pack();

        long finishPackWindowTime = System.currentTimeMillis();

        if (isTestMode) {
            System.out.println("Pack Windows After Display Computer Specs MS: " + (finishPackWindowTime - finishDisplayComputerSpecsTime));
        }

        ignoreWindowMovesUntilTime = System.currentTimeMillis() + 1500;

        // Wait up to 1/2 second in the background before re-centering and/or reducing window size for screen size because pack() may not happen immediately.
        (new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                for (int waitForPack = 0; waitForPack < 50; waitForPack++) {
                    if (!prePackSize.equals(getSize())) {
                        break;
                    }

                    TimeUnit.MILLISECONDS.sleep(10);
                }
                return null;
            }

            @Override
            protected void done() {
                // setMaximumSize does not work. But do not want the windows to get larger than the screen.
                // The window contents are within a scroll pane, so if we set the window size to the screen size, the contents can still be scrolled.

                Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                Insets screenInsets = Toolkit.getDefaultToolkit().getScreenInsets(getGraphicsConfiguration());
                screenSize.height -= screenInsets.top + screenInsets.bottom;
                screenSize.width -= screenInsets.left + screenInsets.right;

                Dimension windowSize = getSize();
                Dimension reducedWindowSize = getSize();

                int scrollbarWidth = (isMacOS ? 12 : 10);
                if (UIManager.get("ScrollBar.width") != null) {
                    scrollbarWidth = (int) UIManager.get("ScrollBar.width");
                }

                boolean didReduceWidth = false;
                if (windowSize.width > screenSize.width) {
                    reducedWindowSize.width = screenSize.width;
                    didReduceWidth = true;

                    // If reduced width, add the height of the scrollbar to the window to not
                    // need to also scroll vertically since the scrollbar would block content.
                    reducedWindowSize.height += UIScale.scale(scrollbarWidth);

                    if (reducedWindowSize.height > screenSize.height) {
                        reducedWindowSize.height = screenSize.height;
                    }
                }

                if (windowSize.height > screenSize.height) {
                    reducedWindowSize.height = screenSize.height;

                    if (!didReduceWidth) {
                        // If reduced height, add the width of the scrollbar to the window to not
                        // need to also scroll horizonally since the scrollbar would block content.
                        reducedWindowSize.width += UIScale.scale(scrollbarWidth);

                        if (reducedWindowSize.width > screenSize.width) {
                            reducedWindowSize.width = screenSize.width;
                        }
                    }
                }

                if (!reducedWindowSize.equals(windowSize)) {
                    setMinimumSize(reducedWindowSize);
                    setPreferredSize(reducedWindowSize);
                    setSize(reducedWindowSize);

                    // Wait up to 1/2 second in the background before setting "themeUpdated" to false and re-centering (if necessary) because setSize() may not happen immediately.
                    (new SwingWorker<Void, Void>() {
                        @Override
                        protected Void doInBackground() throws Exception {
                            for (int waitForSetSize = 0; waitForSetSize < 50; waitForSetSize++) {
                                if (!windowSize.equals(getSize())) {
                                    break;
                                }

                                TimeUnit.MILLISECONDS.sleep(10);
                            }
                            return null;
                        }

                        @Override
                        protected void done() {
                            if (!windowMoved && ((prePackSize.width != getSize().width) || (prePackSize.height < getSize().height))) { // Only recenter if width changes, or height increases (but no need to recenter if height decreases).
                                setLocationRelativeTo(null);
                            }

                            themeUpdated = false;
                        }
                    }).execute();
                } else {
                    if (!windowMoved && ((prePackSize.width != getSize().width) || (prePackSize.height < getSize().height))) { // Only recenter if width changes, or height increases (but no need to recenter if height decreases).
                        setLocationRelativeTo(null);
                    }

                    themeUpdated = false;
                }
            }
        }).execute();
    }

    private void playAlertSound(String soundName) {
        switch (soundName) {
            case "beep":
                if (isLinux) {
                    // Java beep() doesn't do anything on Linux
                    try {
                        Runtime.getRuntime().exec(new String[]{"/usr/bin/paplay", "/usr/share/sounds/freedesktop/stereo/dialog-information.oga"});
                    } catch (IOException playDialogWarningException) {
                        if (isTestMode) {
                            System.out.println("playDialogWarningException: " + playDialogWarningException);
                        }
                    }
                } else {
                    Toolkit.getDefaultToolkit().beep();
                }

                break;
            case "error":
                if (isLinux) {
                    // Java AudioSystem is not reliable on Linux
                    try {
                        Runtime.getRuntime().exec(new String[]{"/usr/bin/paplay", "/usr/share/sounds/freedesktop/stereo/dialog-error.oga"});
                    } catch (IOException playErrorSoundException) {
                        if (isTestMode) {
                            System.out.println("playErrorSoundException: " + playErrorSoundException);
                        }
                    }
                } else {
                    (new SwingWorker<Void, Void>() {
                        @Override
                        protected Void doInBackground() throws Exception {
                            try (Clip errorSoundClip = AudioSystem.getClip()) {
                                errorSoundClip.open(AudioSystem.getAudioInputStream(new File((isWindows ? "\\Windows\\Media\\Windows Foreground.wav" : "/System/Library/Sounds/Basso.aiff"))));
                                errorSoundClip.start();
                                TimeUnit.SECONDS.sleep(3);
                            } catch (Error | Exception playErrorSoundErrorOrException) {
                                if (isTestMode) {
                                    System.out.println("playErrorSoundErrorOrException: " + playErrorSoundErrorOrException);
                                }

                                try {
                                    if (isWindows) {
                                        Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "(New-Object Media.SoundPlayer \"\\Windows\\Media\\Windows` Foreground.wav\").PlaySync();"});
                                    } else {
                                        Runtime.getRuntime().exec(new String[]{"/usr/bin/afplay", "/System/Library/Sounds/Basso.aiff"});
                                    }
                                } catch (IOException playBackupErrorSoundException) {
                                    if (isTestMode) {
                                        System.out.println("playBackupErrorSoundException: " + playBackupErrorSoundException);
                                    }
                                }
                            }

                            return null;
                        }
                    }).execute();
                }

                break;
            case "success":
                if (isLinux) {
                    // Java AudioSystem is not reliable on Linux
                    try {
                        Runtime.getRuntime().exec(new String[]{"/usr/bin/paplay", "/usr/share/sounds/freedesktop/stereo/complete.oga"});
                    } catch (IOException playSuccessSoundException) {
                        if (isTestMode) {
                            System.out.println("playSuccessSoundException: " + playSuccessSoundException);
                        }
                    }
                } else {
                    (new SwingWorker<Void, Void>() {
                        @Override
                        protected Void doInBackground() throws Exception {
                            try (Clip successSoundClip = AudioSystem.getClip()) {
                                successSoundClip.open(AudioSystem.getAudioInputStream(new File((isWindows ? "\\Windows\\Media\\Windows Exclamation.wav" : "/System/Library/Sounds/Glass.aiff"))));
                                successSoundClip.start();
                                TimeUnit.SECONDS.sleep(3);
                            } catch (Error | Exception playSuccessSoundErrorOrException) {
                                if (isTestMode) {
                                    System.out.println("playSuccessSoundErrorOrException: " + playSuccessSoundErrorOrException);
                                }

                                try {
                                    if (isWindows) {
                                        Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "(New-Object Media.SoundPlayer \"\\Windows\\Media\\Windows` Exclamation.wav\").PlaySync();"});
                                    } else {
                                        Runtime.getRuntime().exec(new String[]{"/usr/bin/afplay", "/System/Library/Sounds/Glass.aiff"});
                                    }
                                } catch (IOException playBackupSuccessSoundException) {
                                    if (isTestMode) {
                                        System.out.println("playBackupSuccessSoundException: " + playBackupSuccessSoundException);
                                    }
                                }
                            }

                            return null;
                        }
                    }).execute();
                }

                break;
            default:
                break;
        }
    }

    private void focusNextTestTaskVerifyButton(Component currentButton) {
        if (btnDoneTesting.getText().equals("Options")) {
            return;
        }

        Object[][] allTestButtonsAndVerifications = new Object[][]{
            {btnStressCPU, btnVerifyCPU, isCPUverified},
            {btnDriveHealth, btnVerifyDriveHealth, isDriveHealthVerified},
            {btnEjectDiscDrive, btnVerifyDiscDrive, isDiscDriveVerified},
            {btnTestInternet, btnVerifyInternet, isInternetVerified},
            {btnTestScreen, btnVerifyScreen, isScreenVerified},
            {btnTestAudio, btnVerifyAudio, isAudioVerified},
            {btnTestMicrophone, btnVerifyMicrophone, isMicrophoneVerified},
            {btnTestCamera, btnVerifyCamera, isCameraVerified},
            {btnTestKeyboard, btnVerifyKeyboard, isKeyboardVerified},
            {btnTestMouse, btnVerifyMouse, isMouseVerified},
            {btnSetupBIOS, btnVerifyBIOS, isBIOSverified},
            {btnCheckPorts, btnVerifyPorts, isPortsVerified},
            {btnCheckDrivers, btnVerifyDrivers, isDriversVerified},
            {btnSystemUpdates, btnVerifySystemUpdates, isUpdatesVerified},
            {btnCheckWindowsLicense, btnVerifyWindowsLicense, isWindowsLicenseVerified},
            {btnCheckRemoteManagement, btnVerifyRemoteManagement, isRemoteManagementVerified},
            {btnSetConditionAndNotes, btnSetConditionAndNotes, false}
        };

        boolean foundCurrentButton = (currentButton == null);

        for (Object[] thisTestButtonSet : allTestButtonsAndVerifications) {
            Component thisTestButton = (Component) thisTestButtonSet[0];
            Component thisVerifyButton = (Component) thisTestButtonSet[1];
            boolean thisTestIsVerified = (boolean) thisTestButtonSet[2];

            if (foundCurrentButton || (currentButton == thisTestButton) || (currentButton == thisVerifyButton)) {
                if (!thisTestIsVerified) {
                    if (foundCurrentButton || (currentButton == thisVerifyButton)) {
                        if (thisTestButton.isVisible() && thisTestButton.isEnabled() && (thisVerifyButton.isEnabled() || (currentButton != null))) {
                            thisTestButton.requestFocusInWindow();
                            return;
                        } else if (thisVerifyButton.isVisible() && thisVerifyButton.isEnabled()) {
                            thisVerifyButton.requestFocusInWindow();
                            return;
                        }
                    }
                }

                if (!foundCurrentButton) {
                    foundCurrentButton = true;
                }
            }
        }

        if (!isLoggedIn && ((!isLinuxUbiquityMode && !isWindowsPE) || (currentButton == btnLogIn))) {
            if (txtUsername.getText().trim().isEmpty()) {
                txtUsername.requestFocusInWindow();
            } else if (pswPassword.getPassword().length == 0) {
                pswPassword.requestFocusInWindow();
            } else if (txtPID.getText().replaceAll("\\s", "").isEmpty()) {
                txtPID.requestFocusInWindow();
            } else {
                btnLogIn.requestFocusInWindow();
            }
        } else {
            btnDoneTesting.requestFocusInWindow();
        }
    }

    // LOGIN METHODS
    public boolean authenticateUser() {
        boolean isAuthenticated = false;

        if (!isLoggedIn) {
            username = txtUsername.getText().toLowerCase();
            loggedInUserInfo.clear();
            PCsCRMManager.logOut();

            String loginPassword = new String(pswPassword.getPassword());

            if (!username.isEmpty() && !loginPassword.isEmpty()) {
                try {
                    isAuthenticated = PCsCRMManager.authenticateCredentials(username, loginPassword, isTestMode);

                    if (isAuthenticated) {
                        loggedInUserInfo = PCsCRMManager.getUserInfo(username, isTestMode);
                    } else {
                        loadingWindow.closeWindow();
                        playAlertSound("error");
                        JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Incorrect Username or Password</b></html>", "QA Helper  —  Login Error", JOptionPane.WARNING_MESSAGE);
                    }
                } catch (Exception authenticateUserException) {
                    if (isTestMode) {
                        System.out.println("authenticateUserException: " + authenticateUserException);
                    }

                    sendErrorEmail("authenticateUserException: " + authenticateUserException);

                    loadingWindow.closeWindow();
                    playAlertSound("error");
                    JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Failed to Connect to <i>PCsCRM</i> to <i>Authenticate User</i></b></html>", "QA Helper  —  Authenticate User Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }

        return isAuthenticated;
    }

    public String[] checkPID(boolean isOnlyChecking) {
        if (!isLoggedIn) {
            String thisPID = txtPID.getText().replaceAll("\\s", "").toUpperCase();
            if (thisPID.matches("^[0-9]+-[0-9]+$")) {
                thisPID = "FG" + thisPID;
            }

            if (!txtPID.getText().equals(thisPID)) {
                txtPID.setText(thisPID);
            }

            boolean pidExists = false;
            boolean isAuthenticated = false;

            String loggedStatus = "ERROR";
            String latestTech = "UNKNOWN TECH";

            if (!thisPID.isEmpty()) {
                if (thisPID.matches("^[A-Z]+[0-9]+-[0-9]+$") || thisPID.matches("^[0-9]+$")) { // Also allow only digits for company acquired by PCs4P in Feb 2025 where they imported their old IDs and continued using them until they ran out.
                    String statusHistoryDataContent = "UNKNOWN STATUS HISTORY ERROR";

                    try {
                        pidExists = PCsCRMManager.pidExists(thisPID, isTestMode);

                        if (!pidExists) {
                            loadingWindow.closeWindow();
                            playAlertSound("error");
                            JOptionPane.showMessageDialog(qaHelperWindow, "<html>" + new TwemojiImage("CrossMark", qaHelperWindow).toImgTag("left") + " <b style='color: " + errorColorHTML + "'>ID \"" + thisPID + "\" Does Not Exist</b><br/><br/><i>Double-check the ID or create it at PCsCRM.com.</i></html>", "QA Helper  —  ID Error", JOptionPane.WARNING_MESSAGE, new TwemojiImage("IDButton", qaHelperWindow).toImageIcon(32));
                        } else {
                            isAuthenticated = authenticateUser();

                            String loggedBrand = "ERROR";
                            String loggedModel = "ERROR";
                            String loggedSerial = "ERROR";
                            String loggedConditionGrade = "ERROR";
                            String loggedNotes = "ERROR";
                            String loggedSetByAppName = "";
                            String loggedSetByVersion = "";

                            try {
                                LinkedHashMap<String, String> loggedSpecs = PCsCRMManager.getSpecsForPID(thisPID, isTestMode, true);

                                loggedStatus = loggedSpecs.get("Status");
                                loggedBrand = loggedSpecs.get("Brand");
                                loggedModel = loggedSpecs.get("Model");

                                loggedSerial = loggedSpecs.get("Serial").replaceAll("^[. /]+", "").replaceAll("[. /]+$", ""); // Trim all leading and trailing spaces, periods, and slashes (in case the serial was logged from different PCs for People software that doesn't clean it like this does).
                                if (computerSpecs.ignoreSpecsPlaceholders(loggedSerial)) { // Check and ignore if a placeholder value was logged for the serial in case the serial was logged from different PCs for People software that doesn't clean it like this does.
                                    loggedSerial = "NOT LOGGED";
                                }

                                loggedConditionGrade = loggedSpecs.get("Condition Grade");
                                loggedNotes = loggedSpecs.get("Notes");

                                if (loggedSpecs.containsKey("Set By")) { // This is an EXTRA field which may not exist.
                                    String loggedSetBy = loggedSpecs.get("Set By");
                                    if ((loggedSetBy != null) && !loggedSetBy.isEmpty()) {
                                        String loggedSetByAppAndVersionPart = loggedSetBy;
                                        int setByTimestampSeparatorIndex = loggedSetBy.indexOf(" @ ");
                                        if (setByTimestampSeparatorIndex != -1) {
                                            loggedSetByAppAndVersionPart = loggedSetBy.substring(0, setByTimestampSeparatorIndex).trim();
                                        }

                                        int appNameAndVersionSpaceSeparatorIndex = loggedSetByAppAndVersionPart.lastIndexOf(" ");
                                        if (appNameAndVersionSpaceSeparatorIndex != -1) {
                                            loggedSetByAppName = loggedSetByAppAndVersionPart.substring(0, appNameAndVersionSpaceSeparatorIndex).trim();
                                            loggedSetByVersion = loggedSetByAppAndVersionPart.substring(appNameAndVersionSpaceSeparatorIndex + 1).trim();
                                            if (!isValidAppVersion(loggedSetByVersion)) { // TODO: Could iterate each word checking for a valid version string instead.
                                                System.out.println("INVALID Set By Version: |" + loggedSetByVersion + "|"); // DEBUG
                                                loggedSetByVersion = "";
                                            }

                                            if (isTestMode) {
                                                System.out.println("loggedSetBy: |" + loggedSetBy + "|"); // DEBUG
                                                System.out.println("loggedSetByAppName: |" + loggedSetByAppName + "|"); // DEBUG
                                                System.out.println("loggedSetByVersion: |" + loggedSetByVersion + "|"); // DEBUG
                                            }
                                        }
                                    }
                                }
                            } catch (Exception parseLoggedSpecsException) {
                                System.out.println("parseLoggedSpecsException: " + parseLoggedSpecsException);
                                sendErrorEmail("parseLoggedSpecsException: " + parseLoggedSpecsException);
                            }

                            if (isAuthenticated) {
                                statusHistoryDataContent = PCsCRMManager.getStatusHistoryContentForPID(thisPID, isTestMode);
                                latestTech = new StatusHistoryWindow(statusHistoryDataContent, null, PCsCRMManager, isTestMode).getLatestTech();
                            }

                            if (isOnlyChecking) {
                                if (!isLoggedIn) {
                                    loggedInUserInfo.clear();
                                    PCsCRMManager.logOut();
                                }

                                loadingWindow.closeWindow();
                                playAlertSound("success");
                                JOptionPane.showMessageDialog(qaHelperWindow, "<html>"
                                        + new TwemojiImage("CheckMarkButton", qaHelperWindow).toImgTag("left") + " <b style='color: " + successColorHTML + "'>ID \"" + thisPID + "\" Exists" + (loggedStatus.equals("ERROR") ? "" : " with Status <u>" + loggedStatus + "</u>" + ((!isAuthenticated || latestTech.equals("UNKNOWN TECH")) ? "" : (" by <i>" + latestTech + "</i>"))) + "</b>"
                                        + ((loggedBrand.equals("ERROR") && loggedModel.equals("ERROR") && loggedSerial.equals("ERROR"))
                                        ? ""
                                        : "<br/><br/>"
                                        + "<i>Logged Specs Summary for " + thisPID + ":</i>"
                                        + "<br/>"
                                        + "<b>Brand:</b> " + loggedBrand + "<br/>"
                                        + "<b>Model:</b> " + loggedModel + "<br/>"
                                        + "<b>Serial:</b> " + loggedSerial + "<br/>")
                                        + "</html>", "QA Helper  —  Check ID", JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("IDButton", qaHelperWindow).toImageIcon(32));
                            } else if (isAuthenticated) {
                                if (!loggedSerial.isEmpty() && !loggedSerial.equals("NOT LOGGED") && !loggedSerial.equals((deviceTypeIsMotherboard ? computerSpecs.getMotherboardSerial() : computerSpecs.getSerial()))) {
                                    loadingWindow.closeWindow();

                                    playAlertSound("error");
                                    ArrayList<String> pidAlreadyLoggedDialogButtons = new ArrayList<>();
                                    pidAlreadyLoggedDialogButtons.add("Cancel Login");
                                    if (isTestMode) { // TODO: Add some way to allow login in Live Mode.
                                        pidAlreadyLoggedDialogButtons.add("Log In Anyway");
                                    } else {
                                        sendErrorEmail("ID \"" + thisPID + "\" Already Logged for DIFFERENT Serial \"" + loggedSerial + "\" with Status \"" + loggedStatus + "\" by \"" + latestTech + "\"");
                                    }

                                    int pidAlreadyLoggedDialogReturn = JOptionPane.showOptionDialog(qaHelperWindow, "<html>"
                                            + "<b style='color: " + errorColorHTML + "'>ID \"" + thisPID + "\" Already Logged for <u>DIFFERENT</u> Serial with Status <u>" + loggedStatus + "</u>" + (latestTech.equals("UNKNOWN TECH") ? "" : (" by <i>" + latestTech + "</i>")) + "</b>"
                                            + "<br/><br/>"
                                            + "<b style='color: " + warningColorHTML + "'>Double-check the ID. <u style='color: " + warningColorHTML + "'>Most likely, you or a previous technician mistyped the ID.</u></b>"
                                            + "<br/><br/>"
                                            + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <b style='color: " + attentionColorHTML + "'>If the ID is correct, CONSULT YOUR MANAGER (or I.T.) to be able to complete this computer.</b> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")
                                            + "<br/><br/>"
                                            + "<i>Logged Specs Summary for " + thisPID + ":</i>"
                                            + "<br/>"
                                            + "<b>Brand:</b> " + loggedBrand + "<br/>"
                                            + "<b>Model:</b> " + loggedModel + "<br/>"
                                            + "<b>Serial:</b> " + loggedSerial + "<br/>"
                                            + "</html>", "QA Helper  —  ID Already Logged for Different Serial", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, new TwemojiImage("Collision", qaHelperWindow).toImageIcon(32), pidAlreadyLoggedDialogButtons.toArray(), pidAlreadyLoggedDialogButtons.get(0));

                                    if (pidAlreadyLoggedDialogReturn != JOptionPane.NO_OPTION) {
                                        loggedInUserInfo.clear();
                                        PCsCRMManager.logOut();

                                        return null;
                                    }

                                    loadingWindow.setLoadingTextAndDisplay("QA Helper is Logging In", "Working", "Key");
                                }

                                if (isLinux) {
                                    String previousAdminPassword = adminPassword;
                                    getAdminPassword("Save ID to Disk"); // Double-check that admin password is still correct.

                                    if (!adminPassword.equals(previousAdminPassword)) {
                                        computerSpecs.reloadSpecs(adminPassword, isTestMode);

                                        // Will displayComputerSpecs on main thread after login complete.
                                    }
                                }

                                if (createHelperLogFile() || !pid.equals(thisPID) || !Objects.equals(isTestMode, gotTestModeFromLog)) {
                                    writeToHelperLogFile("ID: " + thisPID + (isTestMode ? " (Test Mode)" : ""));
                                    gotTestModeFromLog = isTestMode;
                                }

                                pid = thisPID;

                                // TODO: ENABLE FOR FG WHEN FINALIZED AND DOCUMENTED OUR DESIRED CONDITION GRADES: allowSettingConditionGrade = pid.startsWith("FG"); // NOTE: NOT allowing setting "Condition Grade" for non-Free Geek IDs, because PCs for People uses the field for specific R2 grading which is used in audits.
                                if (allowSettingConditionGrade && fgConditionGradesAndDescriptions.containsKey(loggedConditionGrade) && (!loggedConditionGrade.equals("B") || !loggedSetByVersion.isEmpty())) {
                                    // For Free Geek IDs, ignore default condition grade of "B" if specs have not been logged yet,
                                    // or were logged by a version of QA Helper (or FG API/Specs) older than SOME FUTURE VERSION
                                    // which did not have the option to set Condition Grade (and older than SOME FUTURE VERSION did not fill the EXTRA "Set By" field).

                                    currentConditionGrade = loggedConditionGrade;
                                } else {
                                    currentConditionGrade = "N/A";
                                }

                                currentNotes = StringEscapeUtils.unescapeHtml4(loggedNotes.replace("<br/>", "\n").replace("<br />", "\n").replace("<br>", "\n").replace("&nbsp;&nbsp;&nbsp;&nbsp;", "\t").replace("&nbsp;", " ")).trim();
                                if (currentNotes.equals("NOT LOGGED") || currentNotes.equals("ERROR") || currentNotes.equals("N/A")) {
                                    currentNotes = "";
                                }

                                conditionAndNotesUpdated = true;
                            }
                        }
                    } catch (Exception checkPIDException) {
                        if (isTestMode) {
                            System.out.println("checkPIDException: " + checkPIDException + "\n\nstatusHistoryDataContent: " + statusHistoryDataContent);
                        }

                        sendErrorEmail("checkPIDException: " + checkPIDException + "\n\nstatusHistoryDataContent: " + statusHistoryDataContent);

                        loadingWindow.closeWindow();
                        playAlertSound("error");
                        JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Failed to Connect to <i>PCsCRM</i> to <i>Check ID</i></b></html>", "QA Helper  —  Check ID Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    loadingWindow.closeWindow();
                    playAlertSound("error");
                    JOptionPane.showMessageDialog(qaHelperWindow, "<html>" + new TwemojiImage("CrossMark", qaHelperWindow).toImgTag("left") + " <b style='color: " + errorColorHTML + "'>ID \"" + thisPID + "\" Is Not Valid</b><br/><br/><i>Double-check the ID or create it at PCsCRM.com.</i></html>", "QA Helper  —  ID Error", JOptionPane.WARNING_MESSAGE, new TwemojiImage("IDButton", qaHelperWindow).toImageIcon(32));
                }
            } else {
                playAlertSound("beep");
            }

            if (pidExists && isAuthenticated) {
                return new String[]{loggedStatus, latestTech};
            }
        }

        return null;
    }

    // METHODS AFTER LOGIN
    private String getCurrentStatus() {
        return getCurrentStatusAndProductType().get("Status");
    }

    private String getCurrentProductType() {
        return getCurrentStatusAndProductType().get("Product Type");
    }

    private HashMap<String, String> getCurrentStatusAndProductType() {
        HashMap<String, String> currentStatusAndProductType = new HashMap<>();
        currentStatusAndProductType.put("Status", "UNKNOWN STATUS");
        currentStatusAndProductType.put("Product Type", "UNKNOWN PRODUCT TYPE");

        if (isLoggedIn) {
            try {
                LinkedHashMap<String, String> currentSpecs = PCsCRMManager.getSpecsForPID(pid, isTestMode, true);

                String currentStatus = currentSpecs.get("Status");
                currentStatusAndProductType.put("Status", currentStatus);

                if (currentStatus.startsWith("NEW Status")) {
                    sendErrorEmail(currentStatus);
                }

                String currentProductType = currentSpecs.get("Product Type");
                currentStatusAndProductType.put("Product Type", currentProductType);

                if (currentProductType.startsWith("NEW Product Type")) {
                    sendErrorEmail(currentProductType);
                }
            } catch (Exception getCurrentStatusAndProductTypeException) {
                if (isTestMode) {
                    System.out.println("getCurrentStatusAndProductTypeException: " + getCurrentStatusAndProductTypeException);
                }

                sendErrorEmail("getCurrentStatusAndProductTypeException: " + getCurrentStatusAndProductTypeException);

                loadingWindow.closeWindow();

                if (!themeUpdated) { // No need to show blocking error if only updating theme such as changing font size.
                    playAlertSound("error");
                    JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Failed to Connect to <i>PCsCRM</i> to <i>Get Current Status</i></b></html>", "QA Helper  —  Current Status Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }

        return currentStatusAndProductType;
    }

    private String[] loadStatusHistory(boolean showHistoryWindow) {
        if (isLoggedIn) {
            String statusHistoryDataContent = "UNKNOWN STATUS HISTORY ERROR";

            try {
                LinkedHashMap<String, String> currentSpecs = (showHistoryWindow ? PCsCRMManager.getSpecsForPID(pid, isTestMode) : null);
                String currentStatus = (((currentSpecs != null) && currentSpecs.containsKey("Status")) ? currentSpecs.get("Status") : getCurrentStatus());

                if (historyWindow != null && historyWindow.isVisible()) {
                    historyWindow.dispose();
                }

                statusHistoryDataContent = PCsCRMManager.getStatusHistoryContentForPID(pid, isTestMode);
                historyWindow = new StatusHistoryWindow(statusHistoryDataContent, currentSpecs, PCsCRMManager, isTestMode);

                if (showHistoryWindow) {
                    historyWindow.setLocationRelativeTo(null);
                    historyWindow.setVisible(true);
                }

                return new String[]{currentStatus, historyWindow.getLatestTech()};
            } catch (Exception loadStatusHistoryException) {
                if (isTestMode) {
                    System.out.println("loadStatusHistoryException: " + loadStatusHistoryException + "\n\nstatusHistoryDataContent: " + statusHistoryDataContent);
                }

                sendErrorEmail("loadStatusHistoryException: " + loadStatusHistoryException + "\n\nstatusHistoryDataContent: " + statusHistoryDataContent);

                loadingWindow.closeWindow();

                if (!themeUpdated) { // No need to show blocking error if only updating theme such as changing font size.
                    playAlertSound("error");
                    JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Failed to Connect to <i>PCsCRM</i> to <i>Get Status History</i></b></html>", "QA Helper  —  Status History Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            playAlertSound("beep");
        }

        return new String[]{"UNKNOWN STATUS", "UNKNOWN TECH"};
    }

    private boolean logComputerSpecs() {
        return logComputerSpecs(null, null, null, null, null, null);
    }

    private boolean updateStatus(String newStatusName, String previousStatusName) {
        return logComputerSpecs(newStatusName, previousStatusName, null, null, null, null);
    }

    private boolean setProductTypeID(String productTypeID) {
        return logComputerSpecs(null, null, productTypeID, null, null, null);
    }

    private boolean saveWindowsProductKeyToPCsCRM(String windowsDPKtypeCode, String windowsNewCoaID, String windowsProductKey) {
        return logComputerSpecs(null, null, null, windowsDPKtypeCode, windowsNewCoaID, windowsProductKey);
    }

    private boolean logComputerSpecs(String newStatusName, String previousStatusName, String productTypeID, String windowsDPKtypeCode, String windowsNewCoaID, String windowsProductKey) {
        if (isLoggedIn && !isReloading && !isPeripheralTestMode) {
            String pidPrefix = pid.replaceAll("[^A-Z]", "");

            (new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() throws Exception {
                    if (isMacOS) {
                        if (!new File(macBuildInfoPath).exists()) {
                            new File(macBuildInfoPath).mkdirs();
                        }

                        if (new File(macBuildInfoPath).exists()) {
                            String systemProfileOutputPath = (macBuildInfoPath + (!pidPrefix.isEmpty() ? ((pidPrefix.equals("FG") ? "Free Geek" : pidPrefix) + " - ") : "") + "System Profile.txt");

                            if (!new File(systemProfileOutputPath).exists()) {
                                String modelAndProcessorOutput = "Model Name:\n\t"
                                        + computerSpecs.getFullModel()
                                        + "\n\n"
                                        + "Processor Model:\n\t"
                                        + computerSpecs.getFullCPU()
                                        + (computerSpecs.getBatteryHealthArray().isEmpty() ? "" : "\n\nBattery Health:\n\t" + computerSpecs.getBatteryHealthString())
                                        + (computerSpecs.getPowerAdapter().isEmpty() ? "" : "\n\nPower Adapter:\n\t" + computerSpecs.getPowerAdapter());

                                boolean isAppleSiliconRosetta = (computerSpecs.getFullCPU().startsWith("Apple") && new CommandReader(new String[]{"/usr/sbin/sysctl", "-in", "sysctl.proc_translated"}).getFirstOutputLine().equals("1"));

                                ArrayList<String> systemProfilerCommand = new ArrayList<>();
                                if (isAppleSiliconRosetta) {
                                    systemProfilerCommand.addAll(Arrays.asList("/usr/bin/arch", "-arm64e"));
                                }
                                systemProfilerCommand.addAll(Arrays.asList("/usr/sbin/system_profiler", "SPHardwareDataType", "SPMemoryDataType", "SPNVMeDataType", "SPSerialATADataType", "SPDisplaysDataType", "SPAudioDataType", "SPDiscBurningDataType", "SPPowerDataType", "SPEthernetDataType", "SPAirPortDataType", "SPBluetoothDataType"));

                                String systemProfilerOutput = new CommandReader(systemProfilerCommand.toArray(String[]::new)).getOutputLinesAsString();

                                try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(new File(systemProfileOutputPath)))) {
                                    bufferedWriter.write(modelAndProcessorOutput + "\n\n\n" + systemProfilerOutput);
                                } catch (IOException saveSystemProfilerException) {
                                    if (isTestMode) {
                                        System.out.println("saveSystemProfilerException: " + saveSystemProfilerException);
                                    }
                                }
                            }
                        }
                    } else if (isLinux) {
                        String previousAdminPassword = adminPassword;
                        getAdminPassword("Save Specs to Disk"); // Double-check that admin password is still correct.

                        if (!adminPassword.equals(previousAdminPassword)) {
                            computerSpecs.reloadSpecs(adminPassword, isTestMode);

                            displayComputerSpecs();
                        }

                        if (!new File(linuxBuildInfoPath).exists()) {
                            try {
                                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /bin/mkdir '" + linuxBuildInfoPath.replace("'", "'\\''") + "'"}).waitFor();
                            } catch (IOException | InterruptedException createBuildInfoFolderException) {
                                if (isTestMode) {
                                    System.out.println("createBuildInfoFolderException: " + createBuildInfoFolderException);
                                }
                            }
                        }

                        if (new File(linuxBuildInfoPath).exists()) {
                            try {
                                String dmidecodeOutputPath = linuxBuildInfoPath + (!pidPrefix.isEmpty() ? ((pidPrefix.equals("FG") ? "free-geek" : pidPrefix.toLowerCase()) + "_") : "") + "dmidecode-output.txt";

                                if (!new File(dmidecodeOutputPath).exists()) {
                                    Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /usr/bin/touch '" + dmidecodeOutputPath.replace("'", "'\\''") + "' && printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /bin/chmod 666 '" + dmidecodeOutputPath.replace("'", "'\\''") + "' && printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /usr/sbin/dmidecode -q > '" + dmidecodeOutputPath.replace("'", "'\\''") + "'"}).waitFor();
                                }
                            } catch (IOException | InterruptedException saveDmidecodeException) {
                                if (isTestMode) {
                                    System.out.println("saveDmidecodeException: " + saveDmidecodeException);
                                }
                            }

                            try {
                                String lshwOutputPath = linuxBuildInfoPath + (!pidPrefix.isEmpty() ? ((pidPrefix.equals("FG") ? "free-geek" : pidPrefix.toLowerCase()) + "_") : "") + "lshw-output.txt";

                                if (!new File(lshwOutputPath).exists()) {
                                    Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /usr/bin/touch '" + lshwOutputPath.replace("'", "'\\''") + "' && printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /bin/chmod 666 '" + lshwOutputPath.replace("'", "'\\''") + "' && printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /usr/bin/lshw > '" + lshwOutputPath.replace("'", "'\\''") + "'"}).waitFor();
                                }
                            } catch (IOException | InterruptedException saveLshwException) {
                                if (isTestMode) {
                                    System.out.println("saveLshwException: " + saveLshwException);
                                }
                            }

                            try {
                                String hdsentinelOutputPath = linuxBuildInfoPath + (!pidPrefix.isEmpty() ? ((pidPrefix.equals("FG") ? "free-geek" : pidPrefix.toLowerCase()) + "_") : "") + "hdsentinel-output.txt";

                                if (!new File(hdsentinelOutputPath).exists()) {
                                    Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /usr/bin/touch '" + hdsentinelOutputPath + "' && printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /bin/chmod 666 '" + hdsentinelOutputPath.replace("'", "'\\''") + "' && printf '%s\\n' '" + computerSpecs.getDriveHealth().replace("'", "'\\''") + "' > '" + hdsentinelOutputPath.replace("'", "'\\''") + "'"}).waitFor();
                                }
                            } catch (IOException | InterruptedException saveHdsentinelException) {
                                if (isTestMode) {
                                    System.out.println("saveHdsentinelException: " + saveHdsentinelException);
                                }
                            }

                            if (deviceTypeIsLaptop || !computerSpecs.getBatteryHealthArray().isEmpty()) {
                                try {
                                    String upowerOutputPath = linuxBuildInfoPath + (!pidPrefix.isEmpty() ? ((pidPrefix.equals("FG") ? "free-geek" : pidPrefix.toLowerCase()) + "_") : "") + "upower-output.txt";

                                    if (!new File(upowerOutputPath).exists()) {
                                        Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /usr/bin/touch '" + upowerOutputPath.replace("'", "'\\''") + "' && printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /bin/chmod 666 '" + upowerOutputPath.replace("'", "'\\''") + "' && printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /usr/bin/upower --dump > '" + upowerOutputPath.replace("'", "'\\''") + "'"}).waitFor();
                                    }
                                } catch (IOException | InterruptedException saveUpowerException) {
                                    if (isTestMode) {
                                        System.out.println("saveUpowerException: " + saveUpowerException);
                                    }
                                }
                            }
                        }
                    } else if (isWindows) {
                        if (!new File(windowsBuildInfoPath).exists()) {
                            new File(windowsBuildInfoPath).mkdirs();
                        }

                        if (new File(windowsBuildInfoPath).exists()) {
                            // TODO: Save full GWMI specs to file
                        }
                    }

                    return null;
                }
            }).execute();

            try {
                HashMap<String, String> updateSpecs = new HashMap<>();

                // Use the Notes field to include EXTRA fields which there are not ACTUAL fields for.
                String notesAndExtraFields = (currentNotes.isEmpty() ? "N/A" : "<br/>" + escapeMultiLineStringForHTML(currentNotes))
                        + "\n<br/><br/>" // This EXACT sequence separate the actual notes (above) from the EXTRA fields (below).
                        // The extra fields are separated by "<br/>" tags and intentionally left visible in PCsCRM within the notes.
                        + "Wireless: " + escapeSingleLineSpecStringForHTML(computerSpecs.getWireless())
                        + ((!deviceTypeIsMotherboard && (deviceTypeIsLaptop || !computerSpecs.getBatteryHealthArray().isEmpty())) ? "<br/>Battery Health: " + escapeSingleLineSpecStringForHTML(computerSpecs.getBatteryHealthString()) : "")
                        + ((!computerSpecs.getPowerAdapter().isEmpty()) ? "<br/>Power Adapter: " + escapeSingleLineSpecStringForHTML(computerSpecs.getPowerAdapter()) : "")
                        + "<br/>Device Type: " + escapeSingleLineSpecStringForHTML(manualDeviceType); // Just want device type, don't need all the detail of "computerSpecs.getChassisType()".
                // Can also specify HIDDEN EXTRA fields as HTML comments (which are not visible in PCsCRM), separated by newlines instead of "<br/>" tags (to not add a visible extra empty lines when viewed in PCsCRM).
                //+ "\n<!-- Device Type: " + manualDeviceType + " -->" // Just want device type, don't need all the detail of "computerSpecs.getChassisType()".
                //+ "\n<!-- Set By: QA Helper " + appVersion + " @ " + Instant.now().toString() + " -->"; // SOME FUTURE VERSION is the first version which set the HIDDEN EXTRA "Set By" field.

                updateSpecs.put("Brand", escapeSingleLineSpecStringForHTML((deviceTypeIsMotherboard ? computerSpecs.getMotherboardBrand() : computerSpecs.getBrand()), 150));
                updateSpecs.put("Model", escapeSingleLineSpecStringForHTML((deviceTypeIsMotherboard ? computerSpecs.getMotherboardModel() : computerSpecs.getModel()), 150));
                updateSpecs.put("Serial", escapeSingleLineSpecStringForHTML((deviceTypeIsMotherboard ? computerSpecs.getMotherboardSerial() : computerSpecs.getSerial()), 150));
                updateSpecs.put("OS", ((isLinuxLiveBoot || isWindowsPE || isMacTestBoot || deviceTypeIsMotherboard) ? "N/A" : escapeSingleLineSpecStringForHTML(computerSpecs.getOS(), 150)));
                updateSpecs.put("CPU", escapeSingleLineSpecStringForHTML(computerSpecs.getCPU(), 150));
                updateSpecs.put("RAM", escapeSingleLineSpecStringForHTML(computerSpecs.getRAM(), 150));
                updateSpecs.put("Storage", (deviceTypeIsMotherboard ? "N/A" : escapeSingleLineSpecStringForHTML(computerSpecs.getStorage(), 150)));
                updateSpecs.put("Storage Serial", (deviceTypeIsMotherboard ? "N/A" : escapeSingleLineSpecStringForHTML(computerSpecs.getStorageSerial(), 75))); // Version 2025.7.18-1 was the first to set this field.
                updateSpecs.put("GPU", (deviceTypeIsMotherboard ? "N/A" : escapeSingleLineSpecStringForHTML(computerSpecs.getGPU(), 150)));
                updateSpecs.put("Audio", escapeSingleLineSpecStringForHTML(computerSpecs.getAudio(), 150));
                updateSpecs.put("Screen", (deviceTypeHasScreen ? escapeSingleLineSpecStringForHTML(computerSpecs.getScreenSize(), 150) : "N/A")); // Do not want to log a resolution on computers without built-in screens.
                updateSpecs.put("Disc Drive", (deviceTypeIsMotherboard ? "N/A" : escapeSingleLineSpecStringForHTML(computerSpecs.getDiscDrive(), 150)));
                updateSpecs.put("Notes", notesAndExtraFields);

                if (allowSettingConditionGrade) {
                    updateSpecs.put("Condition Grade", currentConditionGrade);
                }

                if (pid.startsWith("FG")) {
                    String fgSpecsURL = privateStrings.getFreeGeekSpecsURL(pid, isTestMode);
                    if (fgSpecsURL.length() > 200) { // This field has a 200 character limit, which we are not getting close to be keep this code here as a safeguard and reminder for any future additions.
                        fgSpecsURL = fgSpecsURL.substring(0, 200);
                    }

                    updateSpecs.put("FG Specs URL", fgSpecsURL); // Filling this field shows a link at the bottom of the specs list on the ID Search page on PCsCRM. (Version 2025.7.18-1 was the first to set this field.)
                }

                updateSpecs.put("Is Laptop", (deviceTypeIsLaptop ? "Y" : "N"));

                ArrayList<String> batteryHealthArray = computerSpecs.getBatteryHealthArray();
                if (!deviceTypeIsMotherboard && !batteryHealthArray.isEmpty()) {
                    int lowestBatteryCapacityRemainingPercentageInteger = -1; // If there are multiple batteries, always log the LOWEST percentage to log the most fair information.

                    for (String thisBatterySummary : batteryHealthArray) {
                        String batteryCapacityRemainingPercentage = thisBatterySummary.split(" ")[0];
                        if (batteryCapacityRemainingPercentage.endsWith("%")) {
                            try {
                                int thisBatteryCapacityRemainingPercentageInteger = (int) Math.round(Double.parseDouble(batteryCapacityRemainingPercentage.replace("%", "")));
                                if (lowestBatteryCapacityRemainingPercentageInteger == -1) {
                                    lowestBatteryCapacityRemainingPercentageInteger = thisBatteryCapacityRemainingPercentageInteger;
                                } else if (thisBatteryCapacityRemainingPercentageInteger < lowestBatteryCapacityRemainingPercentageInteger) {
                                    lowestBatteryCapacityRemainingPercentageInteger = thisBatteryCapacityRemainingPercentageInteger;
                                }
                            } catch (NumberFormatException parseBatteryCapacityRemaningPercentageException) {

                            }
                        }
                    }

                    if (lowestBatteryCapacityRemainingPercentageInteger >= 0) {
                        updateSpecs.put("Battery Capacity Remaining Percentage Integer", Integer.toString(lowestBatteryCapacityRemainingPercentageInteger)); // Version 2025.7.18-1 was the first to set this field.
                    }
                }

                String[] statusNames = privateStrings.getPCsCRMStatusNames();
                if (newStatusName != null) {
                    String newStatusCode = Integer.toString(Arrays.asList(statusNames).indexOf(newStatusName) + 1);

                    if (newStatusCode.equals("0")) { // If the "newStatusName" doesn't exist, then "indexOf" would return -1, but check for "0" since +1 is always added to convert from array index to "newStatusCode".
                        throw new Exception("INVALID STATUS NAME: " + newStatusName);
                    }

                    updateSpecs.put("Status", newStatusCode);
                }

                if (productTypeID != null) {
                    updateSpecs.put("Product Type", productTypeID);
                }

                if ((windowsDPKtypeCode != null) && windowsDPKtypeCode.endsWith("-DPK")) {
                    updateSpecs.put("Is Commercial Windows DPK", (windowsDPKtypeCode.endsWith("-COM-DPK") ? "true" : "false")); // bool ("true" and "false" as strings submit as booleans correctly)
                    updateSpecs.put("Windows DPK Type Code or Old COA ID", windowsDPKtypeCode);
                }

                if (windowsNewCoaID != null) {
                    updateSpecs.put("Windows New COA ID", windowsNewCoaID);
                }

                if (windowsProductKey != null) {
                    updateSpecs.put("Windows Product Key", windowsProductKey);
                }

                boolean logSpecsWasSuccessful = PCsCRMManager.setSpecsForPID(pid, username, isTestMode, updateSpecs); // This function will always THROW an exception rather than returning FALSE if it fails.

                if (logSpecsWasSuccessful) {
                    if (historyWindow != null && historyWindow.isVisible()) {
                        historyWindow.dispose();
                    }

                    if (newStatusName != null) {
                        if (pid.startsWith("FG") && (newStatusName.equals(statusNames[12]) || deviceTypeIsMotherboard)) { // Only add to Recent IDs when settings "statusNames[12]" or any status when "deviceTypeIsMotherboard" since those will never be set to "statusNames[12]" via QA Helper and will be completed on FG Specs.
                            (new SwingWorker<Void, Void>() {
                                @Override
                                protected Void doInBackground() throws Exception {
                                    try {
                                        LinkedHashMap<String, String> setRecentIDParameters = new LinkedHashMap<>();
                                        setRecentIDParameters.put("id", pid);
                                        setRecentIDParameters.put("action", "Set Status to \"" + newStatusName + "\"");
                                        setRecentIDParameters.put("value_format", "text");

                                        String setRecentIDResponseContent = new WebReader(privateStrings.getFreeGeekAPI("specs/set?recent_id", isTestMode), username, new String(pswPassword.getPassword()), setRecentIDParameters).getOutputLinesAsString();

                                        if (isTestMode) {
                                            System.out.println("setRecentIDResponseContent:\n" + setRecentIDResponseContent);
                                        }

                                        boolean didSetRecentID = false;

                                        JSONArray setRecentIDResponseArray = new JSONArray(setRecentIDResponseContent);
                                        for (int thisSetRecentIDResponseIndex = 0; thisSetRecentIDResponseIndex < setRecentIDResponseArray.length(); thisSetRecentIDResponseIndex++) {
                                            JSONObject thisSetRecentIDResponseObject = setRecentIDResponseArray.getJSONObject(thisSetRecentIDResponseIndex);

                                            if (thisSetRecentIDResponseObject.getString("result_type").equals("recent_id") && thisSetRecentIDResponseObject.getString("id").equals(pid)) {
                                                didSetRecentID = thisSetRecentIDResponseObject.has("success");
                                            }
                                        }

                                        if (!didSetRecentID) {
                                            throw new Exception("setRecentIDResponseContent:\n" + setRecentIDResponseContent);
                                        }
                                    } catch (Exception setRecentIDException) {
                                        if (isTestMode) {
                                            System.out.println("setRecentIDException:\n" + setRecentIDException);
                                        }

                                        sendErrorEmail("Failed to Set Recent ID via Free Geek API\n\nsetRecentIDException: " + setRecentIDException);
                                    }

                                    return null;
                                }
                            }).execute();

                            addToFreeGeekProductionLog(); // IMPORTANT: Intentionally having this function BLOCK until it returns.
                        }

                        undidOemConfigAfterLastStatus = false;

                        // Never hide login and tasks in Windows since QA Helper will never be shown in demo mode.
                        hideLoginAndTasks = (!isLinuxUbiquityMode && !isWindows && newStatusName.equals(statusNames[12]));

                        (new SwingWorker<Void, Void>() {
                            @Override
                            protected Void doInBackground() throws Exception {
                                TimeUnit.SECONDS.sleep(3);

                                return null;
                            }

                            @Override
                            protected void done() {
                                new LinuxAutoScripts(newStatusName, adminPassword); // Run status change auto-scripts after a delay to not interrupt other things happening at the same time.
                            }
                        }).execute();

                        String manualStatusNote = ((newStatusName.equals(statusNames[3]) && !Arrays.asList(privateStrings.getPCsCRMStatusNamesToAutoChangeOnLogin()).contains(previousStatusName)) ? " (Manual)" : "");
                        writeToHelperLogFile("Status: " + newStatusName + manualStatusNote);
                        logSpecsAction(newStatusName + manualStatusNote);

                        lastStatus = newStatusName;
                    }
                } else {
                    sendErrorEmail("FAILED TO LOG SPECS (SHOULD NOT HAVE GOTTEN HERE)");
                }

                return logSpecsWasSuccessful;
            } catch (Exception logComputerSpecsException) {
                if (isTestMode) {
                    System.out.println("logComputerSpecsException: " + logComputerSpecsException);
                }

                sendErrorEmail(((newStatusName == null) ? "" : "Failed to Update Status to \"" + newStatusName + "\" on PCsCRM\n\n") + "logComputerSpecsException: " + logComputerSpecsException);

                loadingWindow.closeWindow();
                playAlertSound("error");

                JTextArea logSpecsErrorTextArea = new JTextArea(20, 100);
                logSpecsErrorTextArea.setText(logComputerSpecsException.toString());
                logSpecsErrorTextArea.setEditable(false);
                logSpecsErrorTextArea.setLineWrap(true);
                logSpecsErrorTextArea.setWrapStyleWord(true);
                logSpecsErrorTextArea.setFont(new Font(Font.MONOSPACED, lblVersion.getFont().getStyle(), logSpecsErrorTextArea.getFont().getSize()));
                JScrollPane logSpecsErrorScrollPane = new JScrollPane(logSpecsErrorTextArea);

                JOptionPane.showMessageDialog(qaHelperWindow, new Object[]{"<html><b>Failed to Connect to <i>PCsCRM</i> to <i>Log Computer Specs</i> or Failed to <i>Verify Logged Specs</i></b><br/><br/></html>", logSpecsErrorScrollPane, "<html><br/>This should not have happened, please inform Free Geek I.T.</html>"}, "QA Helper  —  Log Computer Specs Error", JOptionPane.ERROR_MESSAGE);
            }
        }

        return false;
    }

    private void installOptionalApp(String appName) {
        installOptionalApps(new String[]{appName});
    }

    private void installOptionalApps(String[] appNames) {
        if (actionsEnabled && ((isLinux && !isLinuxLiveBoot) || (isWindows && !isWindowsPE))) {
            setActionsEnabled(false);

            boolean aptIsRunning = false;

            if (isLinux) {
                String[] aptProcesses = new CommandReader(new String[]{"/usr/bin/pgrep", "-fa", "(apt|mintUpdate)"}).getOutputLines();
                for (String thisAptProcess : aptProcesses) {
                    if (thisAptProcess.contains("apt-get") || thisAptProcess.contains("/bin/apt") || thisAptProcess.contains("/apt/methods/") || (thisAptProcess.contains("/mintUpdate/") && !thisAptProcess.endsWith("/mintUpdate/mintUpdate.py"))) {
                        aptIsRunning = true;
                        break;
                    }
                }
            }

            if (aptIsRunning) {
                playAlertSound("beep");
                JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Another installation process (such as \"apt\" or \"mintUpdate\") is currently running. <i>This process may be running in the background.</i></b><br/><br/><i>This other installation process could interrupt installating apps or installating apps may interrupt the other installation process.</i><br/><br/>Try again after the other installation process has finished.</html>", "QA Helper  —  App Install Warning", JOptionPane.WARNING_MESSAGE);
            } else {
                List<String> matchedAppNames = new ArrayList<>();

                String installCommands = "";

                if (isWindows) {
                    installCommands += "$ProgressPreference = 'SilentlyContinue';"; // Not showing progress makes "Invoke-WebRequest" downloads MUCH faster: https://stackoverflow.com/a/43477248
                }

                for (String thisAppName : appNames) {
                    switch (thisAppName) {
                        case "Google Chrome":
                            matchedAppNames.add(thisAppName);

                            if (isLinux) {
                                installCommands += "if [ -z \"$(/usr/bin/apt-cache policy google-chrome-stable)\" ]; then echo \"\n\nDOWNLOADING GOOGLE CHROME INSTALLER:\n\" && /usr/bin/curl --connect-timeout 5 --progress-bar -fL https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -o /tmp/qa_helper-google_chrome.deb; fi && echo \"\n\nINSTALLING GOOGLE CHROME:\n\" && /usr/bin/sudo /usr/local/bin/apt install --no-install-recommends -y $([ -f /tmp/qa_helper-google_chrome.deb ] && echo /tmp/qa_helper-google_chrome.deb || echo google-chrome-stable) && /bin/rm -f /tmp/qa_helper-google_chrome.deb && ";
                            } else if (isWindows) {
                                if (new File("\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Google Chrome.lnk").exists()) {
                                    installCommands += "Write-Host \\\"`n  Already Installed Google Chrome\\\" -ForegroundColor Yellow;";
                                } else {
                                    installCommands += "Write-Output \\\"`n  Downloading Google Chrome Installer...\\\"; Remove-Item \\\"$Env:TEMP\\QAHelper-GoogleChrome_Installer.exe\\\" -Force -ErrorAction SilentlyContinue; Invoke-WebRequest 'https://dl.google.com/chrome/install/chrome_installer.exe' -OutFile \\\"$Env:TEMP\\QAHelper-GoogleChrome_Installer.exe\\\" -ErrorAction Stop; Write-Output '  Installing Google Chrome...'; $appInstallExitCode = (Start-Process \\\"$Env:TEMP\\QAHelper-GoogleChrome_Installer.exe\\\" -NoNewWindow -Wait -PassThru -ArgumentList '/silent', '/install' -ErrorAction Stop).ExitCode; Remove-Item \\\"$Env:TEMP\\QAHelper-GoogleChrome_Installer.exe\\\" -Force -ErrorAction SilentlyContinue; if ($appInstallExitCode -ne 0) { throw \\\"Error Installing Google Chrome (Exit Code = $appInstallExitCode)\\\" } Write-Host '  Successfully Installed Google Chrome' -ForegroundColor Green; ";
                                    // NOTE: The EXE Chrome installer is MUCH FASTER to finish than the MSI. The EXE is a small initial download which then downloads more for the full installation when the EXE is run, and that isn't an issue since these installation require internet to begin with. 
                                    //installCommands += "Write-Output \\\"`n  Downloading Google Chrome Installer...\\\"; Remove-Item \\\"$Env:TEMP\\QAHelper-GoogleChrome_Installer.msi\\\" -Force -ErrorAction SilentlyContinue; Invoke-WebRequest 'https://dl.google.com/chrome/install/googlechromestandaloneenterprise64.msi' -OutFile \\\"$Env:TEMP\\QAHelper-GoogleChrome_Installer.msi\\\" -ErrorAction Stop; Write-Output '  Installing Google Chrome...'; $appInstallExitCode = (Start-Process '\\Windows\\System32\\msiexec.exe' -NoNewWindow -Wait -PassThru -ArgumentList '/i', \\\"$Env:TEMP\\QAHelper-GoogleChrome_Installer.msi\\\", '/qn' -ErrorAction Stop).ExitCode; Remove-Item \\\"$Env:TEMP\\QAHelper-GoogleChrome_Installer.msi\\\" -Force -ErrorAction SilentlyContinue; if ($appInstallExitCode -ne 0) { throw \\\"Error Installing Google Chrome (Exit Code = $appInstallExitCode)\\\" } Write-Host '  Successfully Installed Google Chrome' -ForegroundColor Green; ";
                                }
                            }

                            break;
                        case "Zoom":
                            matchedAppNames.add(thisAppName);

                            if (isLinux) {
                                installCommands += "if [ -z \"$(/usr/bin/apt-cache policy zoom)\" ]; then echo \"\n\nDOWNLOADING ZOOM INSTALLER:\n\" && /usr/bin/curl --connect-timeout 5 --progress-bar -fL https://zoom.us/client/latest/zoom_amd64.deb -o /tmp/qa_helper-zoom.deb; fi && echo \"\n\nINSTALLING ZOOM:\n\" && /usr/bin/sudo /usr/local/bin/apt install --no-install-recommends -y $([ -f /tmp/qa_helper-zoom.deb ] && echo /tmp/qa_helper-zoom.deb || echo zoom) && /bin/rm -f /tmp/qa_helper-zoom.deb && ";
                            } else if (isWindows) {
                                if (new File("\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Zoom\\Zoom.lnk").exists()) {
                                    installCommands += "Write-Host \\\"`n  Already Installed Zoom\\\" -ForegroundColor Yellow;";
                                } else {
                                    installCommands += "Write-Output \\\"`n  Downloading Zoom Installer...\\\"; Remove-Item \\\"$Env:TEMP\\QAHelper-Zoom_Installer.msi\\\" -Force -ErrorAction SilentlyContinue; Invoke-WebRequest 'https://zoom.us/client/latest/ZoomInstallerFull.msi?archType=x64' -OutFile \\\"$Env:TEMP\\QAHelper-Zoom_Installer.msi\\\" -ErrorAction Stop; Write-Output '  Installing Zoom...'; $appInstallExitCode = (Start-Process '\\Windows\\System32\\msiexec.exe' -NoNewWindow -Wait -PassThru -ArgumentList '/i', \\\"$Env:TEMP\\QAHelper-Zoom_Installer.msi\\\", '/qn' -ErrorAction Stop).ExitCode; Remove-Item \\\"$Env:TEMP\\QAHelper-Zoom_Installer.msi\\\" -Force -ErrorAction SilentlyContinue; if ($appInstallExitCode -ne 0) { throw \\\"Error Installing Zoom (Exit Code = $appInstallExitCode)\\\" } Write-Host '  Successfully Installed Zoom' -ForegroundColor Green; ";
                                }
                            }

                            break;
                        case "TeamViewer":
                            matchedAppNames.add(thisAppName);

                            if (isLinux) {
                                installCommands += "if [ -z \"$(/usr/bin/apt-cache policy teamviewer)\" ]; then echo \"\n\nDOWNLOADING TEAMVIEWER INSTALLER:\n\" && /usr/bin/curl --connect-timeout 5 --progress-bar -fL https://download.teamviewer.com/download/linux/teamviewer_amd64.deb -o /tmp/qa_helper-teamviewer.deb; fi && echo \"\n\nINSTALLING TEAMVIEWER:\n\" && /usr/bin/sudo /usr/local/bin/apt install --no-install-recommends -y $([ -f /tmp/qa_helper-teamviewer.deb ] && echo /tmp/qa_helper-teamviewer.deb || echo teamviewer) && /bin/rm -f /tmp/qa_helper-teamviewer.deb && ";
                            } else if (isWindows) {
                                if (new File("\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\TeamViewer.lnk").exists()) {
                                    installCommands += "Write-Host \\\"`n  Already Installed TeamViewer\\\" -ForegroundColor Yellow;";
                                } else {
                                    installCommands += "Write-Output \\\"`n  Downloading TeamViewer Installer...\\\"; Remove-Item \\\"$Env:TEMP\\QAHelper-TeamViewer_Installer.exe\\\" -Force -ErrorAction SilentlyContinue; Invoke-WebRequest 'https://download.teamviewer.com/download/TeamViewer_Setup_x64.exe' -OutFile \\\"$Env:TEMP\\QAHelper-TeamViewer_Installer.exe\\\" -ErrorAction Stop; Write-Output '  Installing TeamViewer...'; $appInstallExitCode = (Start-Process \\\"$Env:TEMP\\QAHelper-TeamViewer_Installer.exe\\\" -NoNewWindow -Wait -PassThru -ArgumentList '/S' -ErrorAction Stop).ExitCode; Remove-Item \\\"$Env:TEMP\\QAHelper-TeamViewer_Installer.exe\\\" -Force -ErrorAction SilentlyContinue; if ($appInstallExitCode -ne 0) { throw \\\"Error Installing TeamViewer (Exit Code = $appInstallExitCode)\\\" } Write-Host '  Successfully Installed TeamViewer' -ForegroundColor Green; ";
                                }
                            }

                            break;
                        case "Dropbox":
                            matchedAppNames.add(thisAppName);

                            if (isLinux) {
                                installCommands += "echo \"\n\nINSTALLING DROPBOX:\n\" && /usr/bin/sudo /usr/local/bin/apt install --no-install-recommends -y dropbox && ";
                            } else if (isWindows) {
                                if (new File("\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Dropbox\\Dropbox.lnk").exists()) {
                                    installCommands += "Write-Host \\\"`n  Already Installed Dropbox\\\" -ForegroundColor Yellow;";
                                } else {
                                    installCommands += "Write-Output \\\"`n  Downloading Dropbox Installer...\\\"; Remove-Item \\\"$Env:TEMP\\QAHelper-Dropbox_Installer.exe\\\" -Force -ErrorAction SilentlyContinue; Invoke-WebRequest \\\"https://www.dropbox.com/download?full=1&os=win\\\" -OutFile \\\"$Env:TEMP\\QAHelper-Dropbox_Installer.exe\\\" -ErrorAction Stop; Write-Output '  Installing Dropbox...'; $appInstallExitCode = (Start-Process \\\"$Env:TEMP\\QAHelper-Dropbox_Installer.exe\\\" -NoNewWindow -Wait -PassThru -ArgumentList '/NOLAUNCH' -ErrorAction Stop).ExitCode; Remove-Item \\\"$Env:TEMP\\QAHelper-Dropbox_Installer.exe\\\" -Force -ErrorAction SilentlyContinue; if ($appInstallExitCode -ne 0) { throw \\\"Error Installing Dropbox (Exit Code = $appInstallExitCode)\\\" } Write-Host '  Successfully Installed Dropbox' -ForegroundColor Green; ";
                                }
                            }

                            break;
                        case "Spotify":
                            // Spotify already pre-installed on Windows.

                            if (isLinux && !isLinuxLiveBoot) {
                                matchedAppNames.add(thisAppName);
                                installCommands += "echo \"\n\nINSTALLING SPOTIFY:\n\" && /usr/bin/curl --connect-timeout 5 -sS https://download.spotify.com/debian/pubkey_C85668DF69375001.gpg | /usr/bin/sudo /usr/bin/gpg --dearmor --yes -o /etc/apt/trusted.gpg.d/spotify.gpg && echo \"deb http://repository.spotify.com stable non-free\" | /usr/bin/sudo /usr/bin/tee /etc/apt/sources.list.d/spotify.list > /dev/null && /usr/bin/sudo /usr/local/bin/apt install --no-install-recommends -y spotify-client && ";
                                // The Spotify repository will fail with the following error, and needs the signature added manually with per the instructions on https://www.spotify.com/us/download/linux so just add that manually before all Spotify installations.
                                // W: GPG error: http://repository.spotify.com stable InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY C85668DF69375001
                                // E: The repository 'http://repository.spotify.com stable InRelease' is not signed.
                            }

                            break;
                        case "FBReader":
                            // DO NOT ALLOW INSTALLATION of FBReader on Windows because it only installs for the current user (which is "Administrator" in Audit Mode), so shortcuts on the Desktop and Start Menu would not be available for the customer after Sysprep.
                            // This can be worked around by moving the shortcuts to the global locations and setting their permissions for global access (setting permissions is require or the customer won't be able to launch the app with the shortcuts).
                            // But one quirk is that after moving the Desktop shortcut, explorer needs to be restarted to not display 2 shortcuts on the Administrator desktop which might confuse the technician before Sysprep.
                            // THE FINAL ISSUE that could not be worked around which caused us to decide to not pre-install FBReader on Windows is that
                            // if FBReader is uninstalled by the customer, the global shortcuts are not removed by the uninstaller since it is not aware of the shortcuts in the the global locations. This would just be sloppy and may confuse the customer.
                            // Here is the old FBReader installation code for Windows which was used while testing and discovering all of the issues stated above for historical purposes:
                            // installCommands += "Write-Output \\\"`n  Downloading FBReader Installer...\\\"; Remove-Item \\\"$Env:TEMP\\QAHelper-FBReader_Installer.exe\\\" -Force -ErrorAction SilentlyContinue; Invoke-WebRequest 'https://fbreader.org/files/win32/FBReaderSetup-0.12.10.exe' -OutFile \\\"$Env:TEMP\\QAHelper-FBReader_Installer.exe\\\" -ErrorAction Stop; Write-Output '  Installing FBReader...'; $appInstallExitCode = (Start-Process \\\"$Env:TEMP\\QAHelper-FBReader_Installer.exe\\\" -NoNewWindow -Wait -PassThru -ArgumentList '/S' -ErrorAction Stop).ExitCode; Remove-Item \\\"$Env:TEMP\\QAHelper-FBReader_Installer.exe\\\" -Force -ErrorAction SilentlyContinue; if ($appInstallExitCode -ne 0) { throw \\\"Error Installing FBReader (Exit Code = $appInstallExitCode)\\\" } if (Test-Path '\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\FBReader for Windows\\') { Remove-Item '\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\FBReader for Windows\\' -Recurse -ErrorAction Stop } Move-Item \\\"$Env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\FBReader for Windows\\\" '\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\' -Force -ErrorAction Stop; Set-Acl '\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\FBReader for Windows' -AclObject (Get-Acl '\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Accessories' -ErrorAction Stop) -ErrorAction Stop; Set-Acl (Get-ChildItem '\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\FBReader for Windows' -Recurse -ErrorAction Stop).FullName -AclObject (Get-Acl '\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Microsoft Edge.lnk' -ErrorAction Stop) -ErrorAction Stop; if (Test-Path '\\Users\\Public\\Desktop\\FBReader.lnk') { Remove-Item '\\Users\\Public\\Desktop\\FBReader.lnk' -ErrorAction Stop } Move-Item \\\"$([Environment]::GetFolderPath('Desktop'))\\FBReader.lnk\\\" '\\Users\\Public\\Desktop\\' -Force -ErrorAction Stop; Set-Acl '\\Users\\Public\\Desktop\\FBReader.lnk' -AclObject (Get-Acl '\\Users\\Public\\Desktop\\Microsoft Edge.lnk' -ErrorAction Stop) -ErrorAction Stop; Stop-Process -ProcessName 'explorer' -ErrorAction SilentlyContinue; Write-Host '  Successfully Installed FBReader' -ForegroundColor Green; ";

                            if (isLinux) {
                                matchedAppNames.add(thisAppName);
                                installCommands += "echo \"\n\nINSTALLING FBREADER:\n\" && /usr/bin/sudo /usr/local/bin/apt install --no-install-recommends -y fbreader && ";
                            }

                            break;
                        default:
                            break;
                    }
                }

                if (!installCommands.isEmpty()) {
                    String joinedMatchedAppNames = String.join(", ", matchedAppNames);

                    try {
                        if (isLinux) {
                            String possibleSudo = (!adminPassword.equals("*UNKNOWN*") ? "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk " : "");

                            Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", possibleSudo + "/usr/bin/" + (isLinuxMATE ? "mate" : "gnome") + "-terminal --window" + (isLinuxMATE ? "" : "-with-profile-internal-id '0'") + " --title 'QA Helper  —  Installing " + joinedMatchedAppNames + "' --hide-menubar --geometry '80x25+0+0' -x /bin/sh -c 'echo \"\nINSTALLING " + joinedMatchedAppNames + "...\"; " + installCommands + "echo \"\n\nFINISHED INSTALLING " + joinedMatchedAppNames + "\" || echo \"\n\n!!! ERROR DURING APP INSTALLATIONS - SOME APPS WERE NOT INSTALLED !!!\n\n>>> SEE ERROR MESSAGES ABOVE FOR MORE DETAILS <<<\"; echo \"\n\nPRESS ENTER TO CLOSE THIS WINDOW\"; read line; /usr/bin/wmctrl -a \"QA Helper\";'"});
                        } else if (isWindows) {
                            Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\cmd.exe", "/c", "START /MAX \\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoLogo -NoProfile -WindowStyle Maximized -Command $Host.UI.RawUI.WindowTitle = 'QA Helper  —  Installing " + joinedMatchedAppNames + "'; Write-Output \\\"`n  Installing " + joinedMatchedAppNames + "...`n`n`n\\\"; try {" + installCommands + "Write-Output \\\"`n`n  Finished Installing " + joinedMatchedAppNames + "`n\\\" } catch { Write-Host \\\"`n`n  ERROR INSTALLING APP: $_\\\" -ForegroundColor Red; Write-Host \\\"`n`n  !!! ERROR DURING APP INSTALLATIONS - SOME APPS WERE NOT INSTALLED !!!`n`n  >>> SEE ERROR MESSAGES ABOVE FOR MORE DETAILS <<<`n\\\" -ForegroundColor Red } $Host.UI.RawUI.FlushInputBuffer(); Read-Host -Prompt '  PRESS ENTER TO CLOSE THIS WINDOW'"});
                        }

                        TimeUnit.SECONDS.sleep(1);

                        String terminalOrPowerShell = (isLinux ? "Terminal" : "PowerShell");

                        focusWindow();
                        JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Started Installing " + joinedMatchedAppNames + " in " + terminalOrPowerShell + "</b><br/><br/><i>You can continue using QA Helper while " + joinedMatchedAppNames + " installs in " + terminalOrPowerShell + ".</i><br/><br/>When " + joinedMatchedAppNames + " is done installing, " + terminalOrPowerShell + " will stay open and you can press enter in the " + terminalOrPowerShell + " window to close it.</html>", "QA Helper  —  App Install", JOptionPane.INFORMATION_MESSAGE);
                    } catch (IOException | InterruptedException installOptionalAppException) {
                        if (isTestMode) {
                            System.out.println("installOptionalAppException: " + installOptionalAppException);
                        }
                        playAlertSound("error");
                    }
                } else {
                    playAlertSound("beep");
                }
            }

            setActionsEnabled(true);
        } else {
            playAlertSound("beep");
        }
    }

    private boolean runOemConfigPrepare() {
        if (new CommandReader(new String[]{"/usr/bin/id", "-un"}).getFirstOutputLine().equals("oem")) {
            getAdminPassword("Prepare for Shipping to End User (Run \"oem-config-prepare\")"); // Get password if needed.

            if (!new File("/usr/sbin/oem-config-prepare").exists()) {
                if (!adminPassword.equals("*UNKNOWN*")) {
                    try {
                        Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /usr/bin/apt-get install --no-install-recommends -qq oem-config-gtk"}).waitFor();
                    } catch (IOException | InterruptedException installOemConfigGtkException) {
                        if (isTestMode) {
                            System.out.println("installOemConfigGtkException: " + installOemConfigGtkException);
                        }
                    }

                    if (!new File("/usr/sbin/oem-config-prepare").exists() && !isLinuxUbiquityMode) {
                        try {
                            File waitForTerminalPIDtempFile = File.createTempFile("qa_helper-wait_for_terminal_pid", ".txt");
                            waitForTerminalPIDtempFile.deleteOnExit();

                            Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /usr/bin/" + (isLinuxMATE ? "mate" : "gnome") + "-terminal --window" + (isLinuxMATE ? "" : "-with-profile-internal-id '0'") + " --title 'QA Helper  —  Installing \"oem-config-gtk\"' --hide-menubar --geometry '80x25+0+0' -x /bin/bash -c 'orig_temp_owner=$(/usr/bin/stat -c %U " + waitForTerminalPIDtempFile.getPath() + "); /bin/chown root " + waitForTerminalPIDtempFile.getPath() + "; echo $$ > " + waitForTerminalPIDtempFile.getPath() + "; /bin/chown ${orig_temp_owner} " + waitForTerminalPIDtempFile.getPath() + "; echo \"\nINSTALLING \\\"oem-config-gtk\\\"\n\n\"; /usr/local/bin/apt install --no-install-recommends -y oem-config-gtk; echo \"\n\nFINISHED INSTALLING \\\"oem-config-gtk\\\"\nTHIS TERMINAL WINDOW WILL CLOSE IN 5 SECONDS - OR PRESS ENTER TO CLOSE NOW\"; read -t 5; /usr/bin/wmctrl -a \"QA Helper\"'"});

                            String waitForTerminalPID = "";

                            for (int i = 0; i < 10; i++) {
                                if (waitForTerminalPIDtempFile.exists()) {
                                    try {
                                        List<String> waitForTerminalPIDtempFileLines = Files.readAllLines(waitForTerminalPIDtempFile.toPath());

                                        if (!waitForTerminalPIDtempFileLines.isEmpty()) {
                                            waitForTerminalPID = waitForTerminalPIDtempFileLines.get(0);
                                            if (!waitForTerminalPID.isEmpty()) {
                                                break;
                                            }
                                        }
                                    } catch (IOException | IndexOutOfBoundsException getTerminalPIDException) {
                                        if (isTestMode) {
                                            System.out.println("getTerminalPIDException: " + getTerminalPIDException);
                                        }
                                    }
                                }

                                TimeUnit.MILLISECONDS.sleep(500);
                            }

                            if (waitForTerminalPIDtempFile.exists()) {
                                waitForTerminalPIDtempFile.delete();
                            }

                            if (!waitForTerminalPID.isEmpty()) {
                                while (!new CommandReader(new String[]{"/bin/ps", "-p", waitForTerminalPID, "-o", "pid="}).getFirstOutputLine().isEmpty()) {
                                    TimeUnit.MILLISECONDS.sleep(500);
                                }
                            }
                        } catch (IOException | InterruptedException installOemConfigGtkViaTerminalException) {
                            if (isTestMode) {
                                System.out.println("installOemConfigGtkViaTerminalException: " + installOemConfigGtkViaTerminalException);
                            }
                        }
                    }
                }
            }

            installUndoOemConfigPrepareScript();

            if (new File("/usr/sbin/oem-config-prepare").exists()) {
                String possibleSudo = (!adminPassword.equals("*UNKNOWN*") ? "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk " : "");

                try {
                    Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", possibleSudo + "/usr/sbin/oem-config-prepare --quiet"});

                    for (int i = 0; i < 10; i++) {
                        TimeUnit.SECONDS.sleep(1);
                        if (new File("/lib/systemd/system/oem-config.target").exists()) {
                            break;
                        }
                    }

                    boolean didRunOemConfigPrepare = new File("/lib/systemd/system/oem-config.target").exists();

                    if (didRunOemConfigPrepare) {
                        TimeUnit.SECONDS.sleep(1);
                        writeToHelperLogFile("Ran oem-config-prepare");
                        logSpecsAction("Ran oem-config-prepare");
                        new LinuxAutoScripts("Ran oem-config-prepare", adminPassword);
                    } else {
                        playAlertSound("error");
                    }

                    return didRunOemConfigPrepare;
                } catch (IOException | InterruptedException runOemConfigPrepareException) {
                    if (isTestMode) {
                        System.out.println("runOemConfigPrepareException: " + runOemConfigPrepareException);
                    }
                }
            } else {
                playAlertSound("error");
            }
        }

        return false;
    }

    private void installUndoOemConfigPrepareScript() {
        if (isLinux && new CommandReader(new String[]{"/usr/bin/id", "-un"}).getFirstOutputLine().equals("oem") && new File("/home/oem/").exists() && !new File("/home/oem/undo-oem-config-prepare.sh").exists()) {
            try (InputStream undoOemConfigPrepareInputStream = this.getClass().getClassLoader().getResourceAsStream("Resources/undo-oem-config-prepare.sh")) {
                File undoOemConfigPrepareShFile = new File("/home/oem/undo-oem-config-prepare.sh");
                if (undoOemConfigPrepareShFile.createNewFile()) {
                    try (FileOutputStream undoOemConfigPrepareShOutputStream = new FileOutputStream(undoOemConfigPrepareShFile)) {
                        byte[] buf = new byte[1024];
                        int bytesRead;

                        while ((bytesRead = undoOemConfigPrepareInputStream.read(buf)) > 0) {
                            undoOemConfigPrepareShOutputStream.write(buf, 0, bytesRead);
                        }

                        undoOemConfigPrepareShFile.setExecutable(true);

                        Runtime.getRuntime().exec(new String[]{"/bin/ln", "-s", undoOemConfigPrepareShFile.getPath(), "/home/oem/.local/bin/undo-oem-config-prepare"});
                    } catch (Exception writeUndoOemConfigPrepareShException) {
                        if (isTestMode) {
                            System.out.println("writeUndoOemConfigPrepareShException: " + writeUndoOemConfigPrepareShException);
                        }
                    }
                } else if (isTestMode) {
                    System.out.println("createUndoOemConfigPrepareShFileError: Failed to create undo-oem-config-prepare.sh file.");
                }
            } catch (Exception readUndoOemConfigPrepareShException) {
                if (isTestMode) {
                    System.out.println("readUndoOemConfigPrepareShException: " + readUndoOemConfigPrepareShException);
                }
            }
        }
    }

    private void promptToSetProductType() {
        if (isLoggedIn && pid.startsWith("FG")) {
            setActionsEnabled(false);

            String[] statusNames = privateStrings.getPCsCRMStatusNames();

            HashMap<String, String> currentStatusAndProductType = getCurrentStatusAndProductType();
            String currentStatus = currentStatusAndProductType.get("Status");
            String currentProductType = currentStatusAndProductType.get("Product Type");

            LinkedHashMap<String, String> productTypesForDeviceType = privateStrings.getFreeGeekProductTypesForDeviceTypeInPCsCRM((computerSpecs.getFullBrand().equals("Apple") ? "Mac " : "PC ") + manualDeviceType);
            String[] productTypeNamesForDeviceType = productTypesForDeviceType.values().toArray(String[]::new);

            if (productTypeNamesForDeviceType.length > 0) {
                JComboBox productTypesForDeviceTypeComboBox = new JComboBox<>(productTypeNamesForDeviceType);
                int currentProductTypeIndex = Arrays.asList(productTypeNamesForDeviceType).indexOf(currentProductType);
                if (currentProductTypeIndex >= 1) { // Don't want to pre-select index 0 which will always be "Unbuilt".
                    productTypesForDeviceTypeComboBox.setSelectedIndex(currentProductTypeIndex);
                } else if ((productTypeNamesForDeviceType.length > 1) && productTypeNamesForDeviceType[0].startsWith("Unbuilt ")) {
                    productTypesForDeviceTypeComboBox.setSelectedIndex(1);
                }

                String[] setProductTypePromptButtons = new String[]{"Set Selected Product Type", "Confirm Current Product Type", "Set Product Type on PCsCRM.com", "Cancel"};

                int setProductTypePromptResponse = JOptionPane.showOptionDialog(qaHelperWindow, new Object[]{"<html><b>Select New Product Type:</b></html>",
                    productTypesForDeviceTypeComboBox,
                    "<html><div style='font-size: smaller'>Current Product Type: <b>" + currentProductType + "</b></div></html>"
                }, "QA Helper  —  Set Product Type", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage("Laptop", qaHelperWindow).toImageIcon(32), setProductTypePromptButtons, setProductTypePromptButtons[0]);

                String setProductTypePromptResponseString = "Cancel";
                if (setProductTypePromptResponse > -1) {
                    setProductTypePromptResponseString = setProductTypePromptButtons[setProductTypePromptResponse];
                }

                switch (setProductTypePromptResponseString) {
                    case "Set Selected Product Type":
                        String selectedProductType = productTypesForDeviceTypeComboBox.getSelectedItem().toString();
                        String selectedProductTypeID = "";
                        for (Map.Entry<String, String> thisProductTypeIDandName : productTypesForDeviceType.entrySet()) {
                            if (thisProductTypeIDandName.getValue().equals(selectedProductType)) {
                                selectedProductTypeID = thisProductTypeIDandName.getKey();
                                break;
                            }
                        }

                        if (!selectedProductTypeID.isEmpty()) {
                            loadingWindow.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
                            setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

                            loadingWindow.setLoadingTextAndDisplay("QA Helper is Setting Product Type", "Working", "Laptop");

                            final String setProductTypeID = selectedProductTypeID;

                            (new SwingWorker<String, Void>() {
                                @Override
                                protected String doInBackground() throws Exception {
                                    setProductTypeID(setProductTypeID);

                                    return getCurrentProductType();
                                }

                                @Override
                                protected void done() {
                                    loadingWindow.closeWindow();

                                    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                                    loadingWindow.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                                    setActionsEnabled(true);

                                    try {
                                        String newProductType = get();
                                        if (newProductType.equals(selectedProductType)) {
                                            playAlertSound("success");
                                            writeToHelperLogFile("Set Product Type");

                                            JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Successfully Set Product Type for ID \"" + pid + "\" to <u>" + newProductType + "</u></b></html>", "QA Helper  —  Successfully Set Product Type", JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("Laptop", qaHelperWindow).toImageIcon(32));

                                            if (currentStatus.equals(statusNames[3])) {
                                                btnDoneTestingActionPerformed(null);
                                            }
                                        } else {
                                            playAlertSound("error");
                                            JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Failed to Set Product Type for ID \"" + pid + "\" to <u>" + newProductType + "</u></b></html>", "QA Helper  —  Set Product Type Error", JOptionPane.ERROR_MESSAGE);
                                            promptToSetProductType();
                                        }
                                    } catch (HeadlessException | InterruptedException | ExecutionException setProductTypeException) {
                                        if (isTestMode) {
                                            System.out.println("setProductTypeException: " + setProductTypeException);
                                        }
                                    }
                                }
                            }).execute();
                        } else {
                            playAlertSound("error");
                            autoLoginToPCsCRMInventoryManagerPage();
                        }

                        break;
                    case "Confirm Current Product Type":
                        writeToHelperLogFile("Set Product Type");
                        setActionsEnabled(true);
                        if (currentStatus.equals(statusNames[3])) {
                            btnDoneTestingActionPerformed(null);
                        }

                        break;
                    case "Set Product Type on PCsCRM.com":
                        autoLoginToPCsCRMInventoryManagerPage();
                        break;
                    default:
                        setActionsEnabled(true);
                        if (currentStatus.equals(statusNames[3])) {
                            btnDoneTestingActionPerformed(null);
                        }

                        break;
                }
            } else {
                playAlertSound("error");
                autoLoginToPCsCRMInventoryManagerPage();
            }
        } else {
            autoLoginToPCsCRMInventoryManagerPage();
        }
    }

    private void autoLoginToPCsCRMInventoryManagerPage() {
        if (isLoggedIn) {
            setActionsEnabled(false);

            loadingWindow.setLoadingTextAndDisplay("QA Helper is Opening Inventory Manager on PCsCRM.com", "Working", "Laptop");

            (new SwingWorker<String, Void>() {
                @Override
                protected String doInBackground() throws Exception {
                    boolean enoughRAMforInventoryManager = true;

                    if (isLinuxBootedToRAM) {
                        // There may not be enough free RAM for Firefox when booted "toram"
                        try {
                            enoughRAMforInventoryManager = (2000000000 <= Long.parseLong(new CommandReader("/usr/bin/free -b | /usr/bin/awk '($1 == \"Mem:\") { print $4; exit }'").getFirstOutputLine()));
                        } catch (NumberFormatException getFreeMemoryException) {
                            if (isTestMode) {
                                System.out.println("getFreeMemoryException: " + getFreeMemoryException);
                            }
                        }
                    }

                    String returnStatus = (enoughRAMforInventoryManager ? "enoughRAMforInventoryManager" : "");

                    if (enoughRAMforInventoryManager) {
                        String pcsCrmInventoryManagerURL = "https://" + (isTestMode ? "test." : "") + "pcscrm.com/inventory/editInventoryIDs";
                        String hiddenPCsCRMloginInputs = "";

                        for (int i = 0; i < 5; i++) {
                            hiddenPCsCRMloginInputs = String.join("\n", new WebReader(pcsCrmInventoryManagerURL).getOutputLinesContaining("<input type=\"hidden\""));

                            if (!hiddenPCsCRMloginInputs.isEmpty()) {
                                break;
                            }
                        }

                        if (!hiddenPCsCRMloginInputs.isEmpty()) {
                            try {
                                File pcsCrmInventoryManagerTempFile = File.createTempFile("qa_helper-pcscrm_inventory_manager", ".html");
                                pcsCrmInventoryManagerTempFile.deleteOnExit();

                                try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(pcsCrmInventoryManagerTempFile))) {
                                    String loginPassword = new String(pswPassword.getPassword());
                                    if (loginPassword.equals("intern")) {
                                        loginPassword = privateStrings.getInternPassword();
                                    }

                                    bufferedWriter.write("<!DOCTYPE html>"
                                            + "<html>"
                                            + "<head><title>New Login Page</title></head>"
                                            + "<body onload=\"javascript:document.getElementById('pcscrmLogInToInventoryManager').submit();\">"
                                            + "<form id=\"pcscrmLogInToInventoryManager\" action=\"https://" + (isTestMode ? "test." : "") + "pcscrm.com/login.aspx?ReturnUrl=%2finventory%2feditInventoryIDs\" method=\"post\">"
                                            + "<input type=\"hidden\" name=\"__EVENTTARGET\" id=\"__EVENTTARGET\" value=\"lbLogin\">"
                                            + hiddenPCsCRMloginInputs
                                            + "<input name=\"txtUsername\" type=\"hidden\" id=\"txtUsername\" value=\"" + username + "\" />"
                                            + "<input name=\"txtPassword\" type=\"hidden\" maxlength=\"15\" id=\"txtPassword\" value=\"" + loginPassword + "\" />"
                                            + "</form>"
                                            + "</body>"
                                            + "</html>");
                                } catch (Exception writePcsCrmInventoryManagerTempFileException) {
                                    if (isTestMode) {
                                        System.out.println("writePcsCrmInventoryManagerTempFileException: " + writePcsCrmInventoryManagerTempFileException);
                                    }
                                }

                                pcsCrmInventoryManagerURL = pcsCrmInventoryManagerTempFile.toURI().toString();
                                returnStatus += "+didAutoLoginToInventoryManager";
                            } catch (IOException createPcsCrmInventoryManagerTempFileException) {
                                if (isTestMode) {
                                    System.out.println("createPcsCrmInventoryManagerTempFileException: " + createPcsCrmInventoryManagerTempFileException);
                                }
                            }
                        }

                        boolean xclipWasInstalled = false;
                        boolean xclipIsInstalled = false;

                        if (isLinux) {
                            while (!new CommandReader(new String[]{"/usr/bin/pgrep", "-fn", "/auto-scripts/.*\\+(user|root)\\.sh$"}).getFirstOutputLine().isEmpty()) {
                                TimeUnit.SECONDS.sleep(2);
                            }

                            xclipWasInstalled = !new CommandReader("/usr/bin/xclip -version 2>&1").getFirstOutputLineContaining(".").isEmpty();
                            xclipIsInstalled = xclipWasInstalled;

                            if (!xclipIsInstalled) {
                                try {
                                    Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /usr/bin/apt-get install --no-install-recommends -qq xclip"}).waitFor();
                                    xclipIsInstalled = !new CommandReader("/usr/bin/xclip -version 2>&1").getFirstOutputLineContaining(".").isEmpty();
                                } catch (IOException | InterruptedException installXclipException) {
                                    if (isTestMode) {
                                        System.out.println("installXclipException: " + installXclipException);
                                    }
                                }
                            }
                        }

                        try {
                            if (xclipIsInstalled) {
                                // Java Clipboard get cleared when app quits on Linux. So use xclip instead.
                                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "printf '%s\\n' '" + pid.replace("'", "'\\''") + "' | /usr/bin/xclip -sel clip"}).waitFor();
                            } else {
                                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(pid + "\n"), null);
                            }

                            returnStatus += "+didSetPIDtoClipboard";
                        } catch (IllegalStateException | HeadlessException | IOException | InterruptedException setClipboardException) {
                            if (isTestMode) {
                                System.out.println("setClipboardException: " + setClipboardException);
                            }
                        }

                        if (!xclipWasInstalled && xclipIsInstalled) {
                            try {
                                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /usr/bin/apt-get purge --auto-remove -qq xclip"}).waitFor();
                            } catch (IOException | InterruptedException uninstallXclipException) {
                                if (isTestMode) {
                                    System.out.println("uninstallXclipException: " + uninstallXclipException);
                                }
                            }
                        }

                        if (isLinux) {
                            boolean didLaunchChrome = false;
                            if (new File("/usr/bin/google-chrome-stable").exists() && !isLinuxUbiquityMode) { // Do not try to launch Chrome and only use Firefox when in Ubiquity mode (even if it has been pre-installed) since Firefox is simpler to launch without the app showing prompts.
                                try {
                                    Runtime.getRuntime().exec(new String[]{"/usr/bin/google-chrome-stable", "--password-store=basic", "--start-maximized", "--incognito", pcsCrmInventoryManagerURL});
                                    didLaunchChrome = true;
                                } catch (IOException chromeException) {
                                    if (isTestMode) {
                                        System.out.println("chromeException: " + chromeException);
                                    }
                                }
                            }

                            if (!didLaunchChrome) {
                                try {
                                    if (isLinuxUbiquityMode) { // Sometimes Firefox hangs/freezes in Linux pre-install enviroment, so quit all Firefox instances before launching a new one.
                                        Runtime.getRuntime().exec(new String[]{"/usr/bin/pkill", "firefox"});
                                    }

                                    // Run Firefox as sudo in pre-install environment to fix an issue launching Firefox
                                    Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", (isLinuxUbiquityMode ? "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk " : "") + "/usr/bin/firefox -private " + pcsCrmInventoryManagerURL});
                                } catch (IOException firefoxException) {
                                    if (isTestMode) {
                                        System.out.println("firefoxException: " + firefoxException);
                                    }

                                    try {
                                        Runtime.getRuntime().exec(new String[]{"/usr/bin/xdg-open", pcsCrmInventoryManagerURL});
                                    } catch (IOException xdgOpenException) {
                                        if (isTestMode) {
                                            System.out.println("xdgOpenException: " + xdgOpenException);
                                        }
                                    }
                                }
                            }
                        } else if (isWindowsRE && new File("\\Install\\Diagnostic Tools\\Web Browser (PE).exe").exists()) {
                            if (new File("\\Windows\\System32\\links.xml").exists()) {
                                new File("\\Windows\\System32\\links.xml").delete();
                            }

                            File webBrowserPElinksFile = new File("\\Windows\\System32\\", "links.xml");

                            try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(webBrowserPElinksFile))) {
                                bufferedWriter.write("<Items version=\"1.0\" application=\"Web Browser (PE)\">\n"
                                        + "  <Homepage>\n"
                                        + "    <Home>" + pcsCrmInventoryManagerURL.replace("file:/", "file:///") + "</Home>\n"
                                        + "  </Homepage>\n"
                                        + "  <Favorites />\n"
                                        + "</Items>");
                            } catch (Exception writeWebBrowserPElinksFileException) {
                                if (isTestMode) {
                                    System.out.println("writeWebBrowserPElinksFileException: " + writeWebBrowserPElinksFileException);
                                }

                                playAlertSound("beep");
                            }

                            try {
                                Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\cmd.exe", "/c", "START /MAX \"Web Browser\" \"\\Install\\Diagnostic Tools\\Web Browser (PE).exe\""}).waitFor();
                            } catch (IOException | InterruptedException openWebBrowserPEexception) {
                                if (isTestMode) {
                                    System.out.println("openWebBrowserPEexception: " + openWebBrowserPEexception);
                                }
                            }
                        } else {
                            try {
                                Desktop.getDesktop().browse(new URI(pcsCrmInventoryManagerURL));
                            } catch (IOException | URISyntaxException openPcsCrmInventoryManagerException) {
                                if (isTestMode) {
                                    System.out.println("openPcsCrmInventoryManagerException: " + openPcsCrmInventoryManagerException);
                                }
                            }
                        }

                        TimeUnit.SECONDS.sleep(2);
                    }

                    return returnStatus;
                }

                @Override
                protected void done() {
                    try {
                        loadingWindow.closeWindow();

                        String returnValue = get();

                        if (isWindowsPE) {
                            // Do not focus window or present next prompt on WinRE since QA Helper should just be minimized to allow "Web Browser (PE)" to be frontmost instead.
                            setState(Frame.ICONIFIED);
                        } else {
                            focusWindow();

                            String[] openedInventoryManagerDialogButtons = (returnValue.contains("enoughRAMforInventoryManager")
                                    ? new String[]{"Bring Inventory Manager to Front", "Product Type Has Been Set", "Re-Log In to Inventory Manager", "Cancel"}
                                    : new String[]{"Product Type Has Been Set", "Cancel"});

                            playAlertSound((returnValue.contains("enoughRAMforInventoryManager") && returnValue.contains("didAutoLoginToInventoryManager") && returnValue.contains("didSetPIDtoClipboard") ? "success" : "beep"));

                            String openedInventoryManagerDialogMessage = "<html>"
                                    + (returnValue.contains("enoughRAMforInventoryManager")
                                    ? "<b>Opened " + (returnValue.contains("didAutoLoginToInventoryManager") ? "and Logged In to " : "") + "the Inventory Manager on PCsCRM.com</b>"
                                    + (returnValue.contains("didAutoLoginToInventoryManager") ? "" : "<br/><br/>"
                                    + new TwemojiImage("Warning", qaHelperWindow).toImgTag("left") + " <b style='color: " + warningColorHTML + "'>Failed to automatically log in to the Inventory Manager on PCsCRM.com.</b>"
                                    + "<br/>"
                                    + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>USE THE \"Re-Log In to Inventory Manager\" BUTTON BELOW TO TRY AGAIN</i>")
                                    + (returnValue.contains("didSetPIDtoClipboard")
                                    ? "<br/><br/>"
                                    + new TwemojiImage("Clipboard", qaHelperWindow).toImgTag("left") + " The ID \"" + pid + "\" has been copied to the clipboard so you can paste it into the \"Computer ID\" text area."
                                    : "<br/><br/>"
                                    + new TwemojiImage("Warning", qaHelperWindow).toImgTag("left") + " <b style='color: " + warningColorHTML + "'>Unable to copy the ID \"" + pid + "\" to the clipboard.</b>"
                                    + "<br/>"
                                    + new TwemojiImage("Keyboard", qaHelperWindow).toImgTag("left") + " <i>YOU WILL NEED TO TYPE IT IN MANUALLY TO THE \"Computer ID\" TEXT AREA</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right"))
                                    + "<br/><br/>"
                                    + new TwemojiImage("Keyboard", qaHelperWindow).toImgTag("left") + " <b style='color: " + attentionColorHTML + "'>NOW, YOU MUST MANUALLY SET THE PRODUCT TYPE TO THE CORRECT VALUE FOR ID \"" + pid + "\" IN THE INVENTORY MANAGER</b> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")
                                    : "<b>Not Enough Free RAM to Open the Inventory Manager on PCsCRM.com in Firefox</b><br/><br/><i>You must open the Inventory Manager on PCsCRM.com on another computer to set the Product Type before continuing.</i>")
                                    + "</html>";

                            for (;;) {
                                int openedInventoryManagerDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, openedInventoryManagerDialogMessage, "QA Helper  —  " + (returnValue.contains("enoughRAMforInventoryManager") ? "Opened" : "Cannot Open") + " Inventory Manager", JOptionPane.DEFAULT_OPTION, ((returnValue.contains("enoughRAMforInventoryManager") && returnValue.contains("didAutoLoginToInventoryManager") && returnValue.contains("didSetPIDtoClipboard")) ? JOptionPane.INFORMATION_MESSAGE : JOptionPane.WARNING_MESSAGE), new TwemojiImage("Laptop", qaHelperWindow).toImageIcon(32), openedInventoryManagerDialogButtons, openedInventoryManagerDialogButtons[0]);
                                String openedInventoryManagerDialogResponseString = "Cancel";
                                if (openedInventoryManagerDialogResponse > -1) {
                                    openedInventoryManagerDialogResponseString = openedInventoryManagerDialogButtons[openedInventoryManagerDialogResponse];
                                }

                                if (openedInventoryManagerDialogResponseString.equals("Bring Inventory Manager to Front")) {
                                    try {
                                        Runtime.getRuntime().exec((isWindows
                                                // Based On: https://stackoverflow.com/a/58548853
                                                // This new method is much better than the previous AppActivate method (which seems to not work with Legacy Edge), but still also do the AppActive method since it seems to maybe not work as well on Windows 11.
                                                ? new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "$focusWindowFunctionTypes = Add-Type -PassThru -Name FocusWindow -MemberDefinition @'\n"
                                                    + "[DllImport(\\\"user32.dll\\\")] public static extern bool SetForegroundWindow(IntPtr hWnd);\n"
                                                    + "[DllImport(\\\"user32.dll\\\")] public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);\n"
                                                    + "[DllImport(\\\"user32.dll\\\")] public static extern bool IsIconic(IntPtr hWnd);\n"
                                                    + "'@\n"
                                                    + "Start-Sleep 1\n"
                                                    + "$browserHandle = (Get-Process | Where-Object { ($_.MainWindowTitle -like '*New Login Page*') -or ($_.MainWindowTitle -like '*Edit InventoryIDs*') }).MainWindowHandle\n"
                                                    + "if ($browserHandle) {\n"
                                                    + "$browserHandle = $browserHandle[0]\n" // In case there are multiple matching windows open
                                                    + "$focusWindowFunctionTypes::SetForegroundWindow($browserHandle) | Out-Null\n"
                                                    + "if ($focusWindowFunctionTypes::IsIconic($browserHandle)) {\n"
                                                    + "$focusWindowFunctionTypes::ShowWindow($browserHandle, 9) | Out-Null\n"
                                                    + "}\n"
                                                    + "}\n"
                                                    + "$WshellScript = (New-Object -ComObject Wscript.Shell); if (-not $WshellScript.AppActivate('New Login Page')) { $WshellScript.AppActivate('Edit InventoryIDs') }\"}"
                                                }
                                                : new String[]{"/bin/sh", "-c", "/bin/sleep 1; " + (isLinux ? "/usr/bin/wmctrl -a 'New Login Page' || /usr/bin/wmctrl -a 'Edit InventoryIDs' || /usr/bin/wmctrl -a 'Firefox' || /usr/bin/xdg-open 'https://" + (isTestMode ? "test." : "") + "pcscrm.com/inventory/editInventoryIDs'" : "/usr/bin/open -b com.apple.Safari")}));

                                        TimeUnit.MILLISECONDS.sleep(500);
                                    } catch (IOException bringInventoryManagerToFrontException) {
                                        if (isTestMode) {
                                            System.out.println("bringInventoryManagerToFrontException: " + bringInventoryManagerToFrontException);
                                        }
                                    }
                                } else {
                                    if (openedInventoryManagerDialogResponseString.equals("Re-Log In to Inventory Manager")) {
                                        autoLoginToPCsCRMInventoryManagerPage();
                                    } else if (openedInventoryManagerDialogResponseString.equals("Product Type Has Been Set")) {
                                        writeToHelperLogFile("Set Product Type on PCsCRM.com");

                                        String[] statusNames = privateStrings.getPCsCRMStatusNames();
                                        if (getCurrentStatus().equals(statusNames[3])) {
                                            btnDoneTestingActionPerformed(null);
                                        }
                                    }

                                    break;
                                }
                            }
                        }
                    } catch (HeadlessException | InterruptedException | ExecutionException pcsCrmInventoryManagerException) {
                        if (isTestMode) {
                            System.out.println("pcsCrmInventoryManagerException: " + pcsCrmInventoryManagerException);
                        }
                    }

                    setActionsEnabled(true, !isWindowsPE);
                }
            }).execute();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        specValueRightClickMenu = new javax.swing.JPopupMenu();
        menCopySpecValue = new javax.swing.JMenuItem();
        menSearchSpecValue = new javax.swing.JMenuItem();
        contentScrollPane = new javax.swing.JScrollPane();
        contentPane = new javax.swing.JPanel();
        lblStatus = new javax.swing.JLabel();
        lblUsername = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        pswPassword = new javax.swing.JPasswordField();
        lblPID = new javax.swing.JLabel();
        txtPID = new javax.swing.JTextField();
        btnLogIn = new javax.swing.JButton();
        btnTestMode = new javax.swing.JButton();
        btnForgot = new javax.swing.JButton();
        btnCheckPID = new javax.swing.JButton();
        lblVersion = new javax.swing.JLabel();
        topSeparator = new javax.swing.JSeparator();
        lblModelLabel = new javax.swing.JLabel();
        lblModel = new javax.swing.JLabel();
        lblSerial = new javax.swing.JLabel();
        lblCPULabel = new javax.swing.JLabel();
        lblCPU = new javax.swing.JLabel();
        btnStressCPU = new javax.swing.JButton();
        btnVerifyCPU = new javax.swing.JButton();
        lblRAMLabel = new javax.swing.JLabel();
        lblRAM = new javax.swing.JLabel();
        lblBatteryCapacity = new javax.swing.JLabel();
        lblStorageLabel = new javax.swing.JLabel();
        lblStorage = new javax.swing.JLabel();
        btnDriveHealth = new javax.swing.JButton();
        btnVerifyDriveHealth = new javax.swing.JButton();
        lblDiscDriveLabel = new javax.swing.JLabel();
        lblDiscDrive = new javax.swing.JLabel();
        btnEjectDiscDrive = new javax.swing.JButton();
        btnVerifyDiscDrive = new javax.swing.JButton();
        lblWirelessLabel = new javax.swing.JLabel();
        lblWireless = new javax.swing.JLabel();
        btnTestInternet = new javax.swing.JButton();
        btnVerifyInternet = new javax.swing.JButton();
        lblScreenLabel = new javax.swing.JLabel();
        lblScreen = new javax.swing.JLabel();
        btnTestScreen = new javax.swing.JButton();
        btnVerifyScreen = new javax.swing.JButton();
        lblGPULabel = new javax.swing.JLabel();
        lblGPU = new javax.swing.JLabel();
        lblOS = new javax.swing.JLabel();
        lblAudioLabel = new javax.swing.JLabel();
        lblAudio = new javax.swing.JLabel();
        btnTestAudio = new javax.swing.JButton();
        btnVerifyAudio = new javax.swing.JButton();
        middleSeparator1 = new javax.swing.JSeparator();
        lblMoreTests = new javax.swing.JLabel();
        btnTestMicrophone = new javax.swing.JButton();
        btnVerifyMicrophone = new javax.swing.JButton();
        btnTestCamera = new javax.swing.JButton();
        btnVerifyCamera = new javax.swing.JButton();
        btnTestKeyboard = new javax.swing.JButton();
        btnVerifyKeyboard = new javax.swing.JButton();
        btnTestMouse = new javax.swing.JButton();
        btnVerifyMouse = new javax.swing.JButton();
        middleSeparator2 = new javax.swing.JSeparator();
        lblTasks = new javax.swing.JLabel();
        btnSetupBIOS = new javax.swing.JButton();
        btnVerifyBIOS = new javax.swing.JButton();
        btnCheckPorts = new javax.swing.JButton();
        btnVerifyPorts = new javax.swing.JButton();
        btnCheckDrivers = new javax.swing.JButton();
        btnVerifyDrivers = new javax.swing.JButton();
        btnSystemUpdates = new javax.swing.JButton();
        btnVerifySystemUpdates = new javax.swing.JButton();
        btnCheckWindowsLicense = new javax.swing.JButton();
        btnVerifyWindowsLicense = new javax.swing.JButton();
        btnCheckRemoteManagement = new javax.swing.JButton();
        btnVerifyRemoteManagement = new javax.swing.JButton();
        btnSetConditionAndNotes = new javax.swing.JButton();
        bottomSeparator = new javax.swing.JSeparator();
        btnReloadSpecs = new javax.swing.JButton();
        btnSaveOrPrintSpecs = new javax.swing.JButton();
        btnSystemInfo = new javax.swing.JButton();
        btnStatusHistory = new javax.swing.JButton();
        btnCredits = new javax.swing.JButton();
        lblTestModeT = new javax.swing.JLabel();
        lblTestModeE = new javax.swing.JLabel();
        lblTestModeS = new javax.swing.JLabel();
        lblTestModeT2 = new javax.swing.JLabel();
        lblTestModeM = new javax.swing.JLabel();
        lblTestModeO = new javax.swing.JLabel();
        lblTestModeD = new javax.swing.JLabel();
        lblTestModeE2 = new javax.swing.JLabel();
        btnDoneTesting = new javax.swing.JButton();
        mainMenubar = new javax.swing.JMenuBar();
        textSizeMenu = new javax.swing.JMenu();
        menResetTextSize = new javax.swing.JMenuItem();
        menIncreaseTextSize = new javax.swing.JMenuItem();
        menDecreaseTextSize = new javax.swing.JMenuItem();
        menMaxTextSizeForScreen = new javax.swing.JMenuItem();
        deviceTypeMenu = new javax.swing.JMenu();
        menDeviceTypeLaptop = new javax.swing.JRadioButtonMenuItem();
        menDeviceTypeDesktop = new javax.swing.JRadioButtonMenuItem();
        menDeviceTypeAllInOne = new javax.swing.JRadioButtonMenuItem();
        deviceTypeSeparator = new javax.swing.JPopupMenu.Separator();
        menDeviceTypeMotherboard = new javax.swing.JRadioButtonMenuItem();
        testsMenu = new javax.swing.JMenu();
        menForceShowAllTests = new javax.swing.JCheckBoxMenuItem();
        optionsMenu = new javax.swing.JMenu();
        menLogSpecs = new javax.swing.JMenuItem();
        menReopenRepair = new javax.swing.JMenuItem();
        menSetProductType = new javax.swing.JMenuItem();
        menRunOemConfig = new javax.swing.JMenuItem();
        menLogOut = new javax.swing.JMenuItem();
        installAppsMenu = new javax.swing.JMenu();
        menInstallGoogleChrome = new javax.swing.JMenuItem();
        menInstallZoom = new javax.swing.JMenuItem();
        menInstallTeamViewer = new javax.swing.JMenuItem();
        menInstallDropbox = new javax.swing.JMenuItem();
        menInstallSpotify = new javax.swing.JMenuItem();
        menInstallFBReader = new javax.swing.JMenuItem();
        installAppsMenuSeparator = new javax.swing.JPopupMenu.Separator();
        menInstallAllApps = new javax.swing.JMenuItem();
        scriptsMenu = new javax.swing.JMenu();
        menReRunSetupWindowsScript = new javax.swing.JMenuItem();
        menRunCompleteWindowsScript = new javax.swing.JMenuItem();
        scriptsMenuSeparator = new javax.swing.JPopupMenu.Separator();
        menCacheDriversWindowsScript = new javax.swing.JMenuItem();
        utilitiesMenu = new javax.swing.JMenu();
        menOpenTerminalOrCommandPrompt = new javax.swing.JMenuItem();
        menOpenFileExplorerPE = new javax.swing.JMenuItem();
        menSetDvdDriveRegion = new javax.swing.JMenuItem();

        menCopySpecValue.setIcon(new TwemojiImage("Clipboard", qaHelperWindow).toImageIcon(16));
        menCopySpecValue.setText("Copy This Spec Value to Clipboard");
        menCopySpecValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menCopySpecValueActionPerformed(evt);
            }
        });
        specValueRightClickMenu.add(menCopySpecValue);

        menSearchSpecValue.setIcon(new TwemojiImage("MagnifyingGlassTiltedLeft", qaHelperWindow).toImageIcon(16));
        menSearchSpecValue.setText("Search This Spec Value on the Web");
        menSearchSpecValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menSearchSpecValueActionPerformed(evt);
            }
        });
        specValueRightClickMenu.add(menSearchSpecValue);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("QA Helper");
        setIconImages(new TwemojiImage("AppIcon", this).toImageIconsForFrame());
        setLocationByPlatform(true);
        setName("mainFrame"); // NOI18N
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                formComponentMoved(evt);
            }
        });

        contentScrollPane.setBorder(null);

        lblStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblStatus.setText("<html><b style='font-size: larger'>ERROR</b></html>");
        lblStatus.setComponentPopupMenu(specValueRightClickMenu);

        lblUsername.setDisplayedMnemonic(KeyEvent.VK_U);
        lblUsername.setLabelFor(txtUsername);
        lblUsername.setText("Username:");

        txtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameActionPerformed(evt);
            }
        });

        lblPassword.setDisplayedMnemonic(KeyEvent.VK_P);
        lblPassword.setLabelFor(pswPassword);
        lblPassword.setText("Password:");

        pswPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pswPasswordActionPerformed(evt);
            }
        });

        lblPID.setDisplayedMnemonic(KeyEvent.VK_I);
        lblPID.setLabelFor(txtPID);
        lblPID.setText("ID:");

        txtPID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPIDActionPerformed(evt);
            }
        });
        txtPID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPIDKeyTyped(evt);
            }
        });

        btnLogIn.setMnemonic(KeyEvent.VK_L);
        btnLogIn.setText("Log In");
        btnLogIn.setMargin(new java.awt.Insets(0, 8, 0, 8));
        btnLogIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogInActionPerformed(evt);
            }
        });

        btnTestMode.setForeground(new java.awt.Color(0, 102, 204));
        btnTestMode.setMnemonic(KeyEvent.VK_M);
        btnTestMode.setText("Live Mode");
        btnTestMode.setBorder(null);
        btnTestMode.setBorderPainted(false);
        btnTestMode.setContentAreaFilled(false);
        btnTestMode.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnTestMode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnTestModeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btnTestModeFocusLost(evt);
            }
        });
        btnTestMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestModeActionPerformed(evt);
            }
        });

        btnForgot.setForeground(new java.awt.Color(0, 102, 204));
        btnForgot.setMnemonic(KeyEvent.VK_F);
        btnForgot.setText("Forgot Password");
        btnForgot.setBorder(null);
        btnForgot.setBorderPainted(false);
        btnForgot.setContentAreaFilled(false);
        btnForgot.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnForgotFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btnForgotFocusLost(evt);
            }
        });
        btnForgot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnForgotActionPerformed(evt);
            }
        });

        btnCheckPID.setForeground(new java.awt.Color(0, 102, 204));
        btnCheckPID.setMnemonic(KeyEvent.VK_C);
        btnCheckPID.setText("Check ID");
        btnCheckPID.setBorder(null);
        btnCheckPID.setBorderPainted(false);
        btnCheckPID.setContentAreaFilled(false);
        btnCheckPID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnCheckPIDFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btnCheckPIDFocusLost(evt);
            }
        });
        btnCheckPID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckPIDActionPerformed(evt);
            }
        });

        lblVersion.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblVersion.setText("<html><b>Version:</b> YYYY.MM.DD-R</html>");

        lblModelLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblModelLabel.setText("<html><b>Model:</b></html>");
        lblModelLabel.setComponentPopupMenu(specValueRightClickMenu);

        lblModel.setText("ERROR");
        lblModel.setComponentPopupMenu(specValueRightClickMenu);

        lblSerial.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSerial.setText("<html><b>Serial:</b> ERROR</html>");
        lblSerial.setComponentPopupMenu(specValueRightClickMenu);

        lblCPULabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCPULabel.setText("<html><b>CPU:</b></html>");
        lblCPULabel.setToolTipText("");
        lblCPULabel.setComponentPopupMenu(specValueRightClickMenu);

        lblCPU.setText("ERROR");
        lblCPU.setComponentPopupMenu(specValueRightClickMenu);

        btnStressCPU.setText("Stress CPU");
        btnStressCPU.setMargin(new java.awt.Insets(0, 8, 0, 8));
        btnStressCPU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStressCPUActionPerformed(evt);
            }
        });

        btnVerifyCPU.setText("Verify");
        btnVerifyCPU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerifyCPUActionPerformed(evt);
            }
        });

        lblRAMLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRAMLabel.setText("<html><b>RAM:</b></html>");
        lblRAMLabel.setComponentPopupMenu(specValueRightClickMenu);

        lblRAM.setText("ERROR");
        lblRAM.setComponentPopupMenu(specValueRightClickMenu);

        lblBatteryCapacity.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblBatteryCapacity.setText("<html><b>Battery Health:</b> ERROR</html>");
        lblBatteryCapacity.setComponentPopupMenu(specValueRightClickMenu);

        lblStorageLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblStorageLabel.setText("<html><b>Storage:</b></html>");
        lblStorageLabel.setComponentPopupMenu(specValueRightClickMenu);

        lblStorage.setText("ERROR");
        lblStorage.setComponentPopupMenu(specValueRightClickMenu);

        btnDriveHealth.setMnemonic(KeyEvent.VK_D);
        btnDriveHealth.setText("Drive Health");
        btnDriveHealth.setMargin(new java.awt.Insets(0, 8, 0, 8));
        btnDriveHealth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDriveHealthActionPerformed(evt);
            }
        });

        btnVerifyDriveHealth.setText("Verify");
        btnVerifyDriveHealth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerifyDriveHealthActionPerformed(evt);
            }
        });

        lblDiscDriveLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDiscDriveLabel.setText("<html><b>Disc Drive:</b></html>");
        lblDiscDriveLabel.setComponentPopupMenu(specValueRightClickMenu);

        lblDiscDrive.setText("ERROR");
        lblDiscDrive.setComponentPopupMenu(specValueRightClickMenu);

        btnEjectDiscDrive.setText("Eject Disc Drive");
        btnEjectDiscDrive.setMargin(new java.awt.Insets(0, 8, 0, 8));
        btnEjectDiscDrive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjectDiscDriveActionPerformed(evt);
            }
        });

        btnVerifyDiscDrive.setText("Verify");
        btnVerifyDiscDrive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerifyDiscDriveActionPerformed(evt);
            }
        });

        lblWirelessLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblWirelessLabel.setText("<html><b>Wireless:</b></html>");
        lblWirelessLabel.setComponentPopupMenu(specValueRightClickMenu);

        lblWireless.setText("ERROR");
        lblWireless.setComponentPopupMenu(specValueRightClickMenu);

        btnTestInternet.setText("Test Internet");
        btnTestInternet.setMargin(new java.awt.Insets(0, 8, 0, 8));
        btnTestInternet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestInternetActionPerformed(evt);
            }
        });

        btnVerifyInternet.setText("Verify");
        btnVerifyInternet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerifyInternetActionPerformed(evt);
            }
        });

        lblScreenLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblScreenLabel.setText("<html><b>Screen:</b></html>");
        lblScreenLabel.setComponentPopupMenu(specValueRightClickMenu);

        lblScreen.setText("ERROR");
        lblScreen.setComponentPopupMenu(specValueRightClickMenu);

        btnTestScreen.setText("Test Screen");
        btnTestScreen.setMargin(new java.awt.Insets(0, 8, 0, 8));
        btnTestScreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestScreenActionPerformed(evt);
            }
        });

        btnVerifyScreen.setText("Verify");
        btnVerifyScreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerifyScreenActionPerformed(evt);
            }
        });

        lblGPULabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblGPULabel.setText("<html><b>GPU:</b></html>");
        lblGPULabel.setComponentPopupMenu(specValueRightClickMenu);

        lblGPU.setText("ERROR");
        lblGPU.setComponentPopupMenu(specValueRightClickMenu);

        lblOS.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblOS.setText("<html><b>OS:</b> ERROR</html>");
        lblOS.setComponentPopupMenu(specValueRightClickMenu);

        lblAudioLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAudioLabel.setText("<html><b>Audio:</b></html>");
        lblAudioLabel.setComponentPopupMenu(specValueRightClickMenu);

        lblAudio.setText("ERROR");
        lblAudio.setComponentPopupMenu(specValueRightClickMenu);

        btnTestAudio.setText("Test Audio");
        btnTestAudio.setMargin(new java.awt.Insets(0, 8, 0, 8));
        btnTestAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestAudioActionPerformed(evt);
            }
        });

        btnVerifyAudio.setText("Verify");
        btnVerifyAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerifyAudioActionPerformed(evt);
            }
        });

        lblMoreTests.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMoreTests.setText("<html><b>More Tests:</b></html>");

        btnTestMicrophone.setText("Test Microphone");
        btnTestMicrophone.setMargin(new java.awt.Insets(0, 8, 0, 8));
        btnTestMicrophone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestMicrophoneActionPerformed(evt);
            }
        });

        btnVerifyMicrophone.setText("Verify");
        btnVerifyMicrophone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerifyMicrophoneActionPerformed(evt);
            }
        });

        btnTestCamera.setText("Test Camera");
        btnTestCamera.setMargin(new java.awt.Insets(0, 8, 0, 8));
        btnTestCamera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestCameraActionPerformed(evt);
            }
        });

        btnVerifyCamera.setText("Verify");
        btnVerifyCamera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerifyCameraActionPerformed(evt);
            }
        });

        btnTestKeyboard.setText("Test Keyboard");
        btnTestKeyboard.setMargin(new java.awt.Insets(0, 8, 0, 8));
        btnTestKeyboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestKeyboardActionPerformed(evt);
            }
        });

        btnVerifyKeyboard.setText("Verify");
        btnVerifyKeyboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerifyKeyboardActionPerformed(evt);
            }
        });

        btnTestMouse.setText("Test Mouse");
        btnTestMouse.setMargin(new java.awt.Insets(0, 8, 0, 8));
        btnTestMouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestMouseActionPerformed(evt);
            }
        });

        btnVerifyMouse.setText("Verify");
        btnVerifyMouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerifyMouseActionPerformed(evt);
            }
        });

        lblTasks.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTasks.setText("<html><b>Tasks:</b></html>");

        btnSetupBIOS.setText("UEFI/BIOS Setup");
        btnSetupBIOS.setMargin(new java.awt.Insets(0, 8, 0, 8));
        btnSetupBIOS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetupBIOSActionPerformed(evt);
            }
        });

        btnVerifyBIOS.setText("Verify");
        btnVerifyBIOS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerifyBIOSActionPerformed(evt);
            }
        });

        btnCheckPorts.setText("Check Ports");
        btnCheckPorts.setMargin(new java.awt.Insets(0, 8, 0, 8));
        btnCheckPorts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckPortsActionPerformed(evt);
            }
        });

        btnVerifyPorts.setText("Verify");
        btnVerifyPorts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerifyPortsActionPerformed(evt);
            }
        });

        btnCheckDrivers.setText("Check Drivers");
        btnCheckDrivers.setMargin(new java.awt.Insets(0, 8, 0, 8));
        btnCheckDrivers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckDriversActionPerformed(evt);
            }
        });

        btnVerifyDrivers.setText("Verify");
        btnVerifyDrivers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerifyDriversActionPerformed(evt);
            }
        });

        btnSystemUpdates.setText("System Updates");
        btnSystemUpdates.setMargin(new java.awt.Insets(0, 8, 0, 8));
        btnSystemUpdates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSystemUpdatesActionPerformed(evt);
            }
        });

        btnVerifySystemUpdates.setText("Verify");
        btnVerifySystemUpdates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerifySystemUpdatesActionPerformed(evt);
            }
        });

        btnCheckWindowsLicense.setText("Check Windows License");
        btnCheckWindowsLicense.setMargin(new java.awt.Insets(0, 8, 0, 8));
        btnCheckWindowsLicense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckWindowsLicenseActionPerformed(evt);
            }
        });

        btnVerifyWindowsLicense.setText("Verify");
        btnVerifyWindowsLicense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerifyWindowsLicenseActionPerformed(evt);
            }
        });

        btnCheckRemoteManagement.setText("Check Remote Management");
        btnCheckRemoteManagement.setMargin(new java.awt.Insets(0, 8, 0, 8));
        btnCheckRemoteManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckRemoteManagementActionPerformed(evt);
            }
        });

        btnVerifyRemoteManagement.setText("Verify");
        btnVerifyRemoteManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerifyRemoteManagementActionPerformed(evt);
            }
        });

        btnSetConditionAndNotes.setText("Add Notes");
        btnSetConditionAndNotes.setMargin(new java.awt.Insets(0, 8, 0, 8));
        btnSetConditionAndNotes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetConditionAndNotesActionPerformed(evt);
            }
        });

        btnReloadSpecs.setMnemonic(KeyEvent.VK_R);
        btnReloadSpecs.setText("Reload Specs");
        btnReloadSpecs.setMargin(new java.awt.Insets(0, 14, 0, 14));
        btnReloadSpecs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadSpecsActionPerformed(evt);
            }
        });

        btnSaveOrPrintSpecs.setMnemonic(KeyEvent.VK_S);
        btnSaveOrPrintSpecs.setText("Save Specs");
        btnSaveOrPrintSpecs.setMargin(new java.awt.Insets(0, 14, 0, 14));
        btnSaveOrPrintSpecs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveOrPrintSpecsActionPerformed(evt);
            }
        });

        btnSystemInfo.setMnemonic(KeyEvent.VK_N);
        btnSystemInfo.setText("System Info");
        btnSystemInfo.setMargin(new java.awt.Insets(0, 14, 0, 14));
        btnSystemInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSystemInfoActionPerformed(evt);
            }
        });

        btnStatusHistory.setMnemonic(KeyEvent.VK_H);
        btnStatusHistory.setText("Status History");
        btnStatusHistory.setMargin(new java.awt.Insets(0, 14, 0, 14));
        btnStatusHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStatusHistoryActionPerformed(evt);
            }
        });

        btnCredits.setText("Credits");
        btnCredits.setMargin(new java.awt.Insets(0, 14, 0, 14));
        btnCredits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreditsActionPerformed(evt);
            }
        });

        lblTestModeT.setBackground(new java.awt.Color(41, 47, 51));
        lblTestModeT.setForeground(new java.awt.Color(252, 203, 87));
        lblTestModeT.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTestModeT.setText("<html><b style='font-size: larger'>&nbsp;T&nbsp;</b></html>");
        lblTestModeT.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblTestModeT.setOpaque(true);

        lblTestModeE.setBackground(new java.awt.Color(252, 203, 87));
        lblTestModeE.setForeground(new java.awt.Color(41, 47, 51));
        lblTestModeE.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTestModeE.setText("<html><b style='font-size: larger'>&nbsp;E&nbsp;</b></html>");
        lblTestModeE.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblTestModeE.setOpaque(true);

        lblTestModeS.setBackground(new java.awt.Color(41, 47, 51));
        lblTestModeS.setForeground(new java.awt.Color(252, 203, 87));
        lblTestModeS.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTestModeS.setText("<html><b style='font-size: larger'>&nbsp;S&nbsp;</b></html>");
        lblTestModeS.setToolTipText("");
        lblTestModeS.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblTestModeS.setOpaque(true);

        lblTestModeT2.setBackground(new java.awt.Color(252, 203, 87));
        lblTestModeT2.setForeground(new java.awt.Color(41, 47, 51));
        lblTestModeT2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTestModeT2.setText("<html><b style='font-size: larger'>&nbsp;T&nbsp;</b></html>");
        lblTestModeT2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblTestModeT2.setOpaque(true);

        lblTestModeM.setBackground(new java.awt.Color(41, 47, 51));
        lblTestModeM.setForeground(new java.awt.Color(252, 203, 87));
        lblTestModeM.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTestModeM.setText("<html><b style='font-size: larger'>&nbsp;M&nbsp;</b></html>");
        lblTestModeM.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblTestModeM.setOpaque(true);

        lblTestModeO.setBackground(new java.awt.Color(252, 203, 87));
        lblTestModeO.setForeground(new java.awt.Color(41, 47, 51));
        lblTestModeO.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTestModeO.setText("<html><b style='font-size: larger'>&nbsp;O&nbsp;</b></html>");
        lblTestModeO.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblTestModeO.setOpaque(true);

        lblTestModeD.setBackground(new java.awt.Color(41, 47, 51));
        lblTestModeD.setForeground(new java.awt.Color(252, 203, 87));
        lblTestModeD.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTestModeD.setText("<html><b style='font-size: larger'>&nbsp;D&nbsp;</b></html>");
        lblTestModeD.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblTestModeD.setOpaque(true);

        lblTestModeE2.setBackground(new java.awt.Color(252, 203, 87));
        lblTestModeE2.setForeground(new java.awt.Color(41, 47, 51));
        lblTestModeE2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTestModeE2.setText("<html><b style='font-size: larger'>&nbsp;E&nbsp;</b></html>");
        lblTestModeE2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblTestModeE2.setOpaque(true);

        btnDoneTesting.setMnemonic(KeyEvent.VK_Q);
        btnDoneTesting.setText("Done Testing");
        btnDoneTesting.setMargin(new java.awt.Insets(3, 14, 3, 14));
        btnDoneTesting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoneTestingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout contentPaneLayout = new javax.swing.GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPaneLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(topSeparator)
                    .addComponent(middleSeparator1)
                    .addComponent(middleSeparator2)
                    .addComponent(bottomSeparator)
                    .addGroup(contentPaneLayout.createSequentialGroup()
                        .addGap(UIScale.scale(12), UIScale.scale(12), UIScale.scale(12))
                        .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblStatus)
                            .addGroup(contentPaneLayout.createSequentialGroup()
                                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(contentPaneLayout.createSequentialGroup()
                                        .addComponent(lblUsername)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(UIScale.scale(18), UIScale.scale(18), UIScale.scale(18))
                                        .addComponent(lblPassword))
                                    .addComponent(btnTestMode))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pswPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnForgot))
                                .addGap(UIScale.scale(18), UIScale.scale(18), UIScale.scale(18))
                                .addComponent(lblPID)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnCheckPID))
                                .addGap(UIScale.scale(18), UIScale.scale(18), Short.MAX_VALUE)
                                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnLogIn)
                                    .addComponent(lblVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(contentPaneLayout.createSequentialGroup()
                                .addComponent(lblModelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblModel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblSerial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(contentPaneLayout.createSequentialGroup()
                                .addComponent(lblCPULabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblCPU, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnStressCPU)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnVerifyCPU))
                            .addGroup(contentPaneLayout.createSequentialGroup()
                                .addComponent(lblRAMLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblRAM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblBatteryCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(contentPaneLayout.createSequentialGroup()
                                .addComponent(lblStorageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblStorage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDriveHealth)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnVerifyDriveHealth))
                            .addGroup(contentPaneLayout.createSequentialGroup()
                                .addComponent(lblDiscDriveLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblDiscDrive, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnEjectDiscDrive)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnVerifyDiscDrive))
                            .addGroup(contentPaneLayout.createSequentialGroup()
                                .addComponent(lblWirelessLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblWireless, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnTestInternet)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnVerifyInternet))
                            .addGroup(contentPaneLayout.createSequentialGroup()
                                .addComponent(lblScreenLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnTestScreen)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnVerifyScreen))
                            .addGroup(contentPaneLayout.createSequentialGroup()
                                .addComponent(lblGPULabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblGPU, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblOS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(contentPaneLayout.createSequentialGroup()
                                .addComponent(lblAudioLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblAudio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnTestAudio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnVerifyAudio))
                            .addGroup(contentPaneLayout.createSequentialGroup()
                                .addComponent(lblTasks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSetupBIOS)
                                    .addComponent(btnVerifyBIOS))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnCheckPorts)
                                    .addComponent(btnVerifyPorts))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnCheckDrivers)
                                    .addComponent(btnVerifyDrivers))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSystemUpdates)
                                    .addComponent(btnVerifySystemUpdates))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnCheckWindowsLicense)
                                    .addComponent(btnVerifyWindowsLicense))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnCheckRemoteManagement)
                                    .addComponent(btnVerifyRemoteManagement))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSetConditionAndNotes))
                            .addGroup(contentPaneLayout.createSequentialGroup()
                                .addComponent(lblMoreTests, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnTestMicrophone)
                                    .addComponent(btnVerifyMicrophone))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnTestCamera)
                                    .addComponent(btnVerifyCamera))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnTestKeyboard)
                                    .addComponent(btnVerifyKeyboard))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnTestMouse)
                                    .addComponent(btnVerifyMouse)))
                            .addGroup(contentPaneLayout.createSequentialGroup()
                                .addComponent(btnReloadSpecs)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSaveOrPrintSpecs)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSystemInfo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnStatusHistory)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCredits)
                                .addGap(UIScale.scale(18), UIScale.scale(18), Short.MAX_VALUE)
                                .addComponent(lblTestModeT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(lblTestModeE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(lblTestModeS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(lblTestModeT2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblTestModeM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(lblTestModeO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(lblTestModeD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(lblTestModeE2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(UIScale.scale(18), UIScale.scale(18), UIScale.scale(18))
                                .addComponent(btnDoneTesting)))
                        .addGap(UIScale.scale(12), UIScale.scale(12), UIScale.scale(12))))
                .addGap(0, 0, 0))
        );

        contentPaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCheckPID, btnForgot, pswPassword, txtPID, txtUsername});

        contentPaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnDriveHealth, btnEjectDiscDrive, btnStressCPU, btnTestAudio, btnTestInternet, btnTestScreen, btnVerifyAudio, btnVerifyCPU, btnVerifyDiscDrive, btnVerifyDriveHealth, btnVerifyInternet, btnVerifyScreen});

        contentPaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblTestModeD, lblTestModeE, lblTestModeE2, lblTestModeM, lblTestModeO, lblTestModeS, lblTestModeT, lblTestModeT2});

        contentPaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblAudioLabel, lblCPULabel, lblDiscDriveLabel, lblGPULabel, lblModelLabel, lblMoreTests, lblRAMLabel, lblScreenLabel, lblStorageLabel, lblTasks, lblWirelessLabel});

        contentPaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnTestMicrophone, btnVerifyMicrophone});

        contentPaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnTestCamera, btnVerifyCamera});

        contentPaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnTestKeyboard, btnVerifyKeyboard});

        contentPaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnTestMouse, btnVerifyMouse});

        contentPaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnSetupBIOS, btnVerifyBIOS});

        contentPaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCheckPorts, btnVerifyPorts});

        contentPaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCheckDrivers, btnVerifyDrivers});

        contentPaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnSystemUpdates, btnVerifySystemUpdates});

        contentPaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCheckRemoteManagement, btnVerifyRemoteManagement});

        contentPaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCheckWindowsLicense, btnVerifyWindowsLicense});

        contentPaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnLogIn, lblVersion});

        contentPaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnDoneTesting, btnReloadSpecs, btnSetConditionAndNotes});

        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPaneLayout.createSequentialGroup()
                .addGap(UIScale.scale(12), UIScale.scale(12), UIScale.scale(12))
                .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsername)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPassword)
                    .addComponent(pswPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPID)
                    .addComponent(txtPID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLogIn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTestMode)
                    .addComponent(btnForgot)
                    .addComponent(btnCheckPID)
                    .addComponent(lblVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(topSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblModelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblModel)
                    .addComponent(lblSerial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCPULabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCPU)
                    .addComponent(btnStressCPU)
                    .addComponent(btnVerifyCPU))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRAMLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRAM)
                    .addComponent(lblBatteryCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStorageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStorage)
                    .addComponent(btnDriveHealth)
                    .addComponent(btnVerifyDriveHealth))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDiscDriveLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDiscDrive)
                    .addComponent(btnEjectDiscDrive)
                    .addComponent(btnVerifyDiscDrive))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblWirelessLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblWireless)
                    .addComponent(btnTestInternet)
                    .addComponent(btnVerifyInternet))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblScreenLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblScreen)
                    .addComponent(btnTestScreen)
                    .addComponent(btnVerifyScreen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGPULabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGPU)
                    .addComponent(lblOS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAudioLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAudio)
                    .addComponent(btnTestAudio)
                    .addComponent(btnVerifyAudio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(middleSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMoreTests, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTestMicrophone)
                    .addComponent(btnTestCamera)
                    .addComponent(btnTestKeyboard)
                    .addComponent(btnTestMouse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVerifyMicrophone)
                    .addComponent(btnVerifyCamera)
                    .addComponent(btnVerifyKeyboard)
                    .addComponent(btnVerifyMouse))
                .addGap(UIScale.scale(12), UIScale.scale(12), UIScale.scale(12))
                .addComponent(middleSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(contentPaneLayout.createSequentialGroup()
                        .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTasks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSetupBIOS)
                            .addComponent(btnCheckPorts)
                            .addComponent(btnCheckDrivers)
                            .addComponent(btnSystemUpdates)
                            .addComponent(btnCheckWindowsLicense)
                            .addComponent(btnCheckRemoteManagement))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnVerifyBIOS)
                            .addComponent(btnVerifyPorts)
                            .addComponent(btnVerifyDrivers)
                            .addComponent(btnVerifySystemUpdates)
                            .addComponent(btnVerifyRemoteManagement)
                            .addComponent(btnVerifyWindowsLicense)))
                    .addComponent(btnSetConditionAndNotes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bottomSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReloadSpecs)
                    .addComponent(btnSaveOrPrintSpecs)
                    .addComponent(btnSystemInfo)
                    .addComponent(btnStatusHistory)
                    .addComponent(btnCredits)
                    .addComponent(lblTestModeT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTestModeE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTestModeS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTestModeT2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTestModeM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTestModeO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTestModeD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTestModeE2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDoneTesting))
                .addGap(UIScale.scale(12), UIScale.scale(12), UIScale.scale(12)))
        );

        contentPaneLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnCheckDrivers, btnCheckPorts, btnCheckRemoteManagement, btnCheckWindowsLicense, btnCredits, btnDoneTesting, btnDriveHealth, btnEjectDiscDrive, btnLogIn, btnReloadSpecs, btnSaveOrPrintSpecs, btnSetupBIOS, btnStatusHistory, btnStressCPU, btnSystemInfo, btnSystemUpdates, btnTestAudio, btnTestCamera, btnTestInternet, btnTestKeyboard, btnTestMicrophone, btnTestMouse, btnTestScreen, btnVerifyAudio, btnVerifyBIOS, btnVerifyCPU, btnVerifyCamera, btnVerifyDiscDrive, btnVerifyDriveHealth, btnVerifyDrivers, btnVerifyInternet, btnVerifyKeyboard, btnVerifyMicrophone, btnVerifyMouse, btnVerifyPorts, btnVerifyRemoteManagement, btnVerifyScreen, btnVerifySystemUpdates, btnVerifyWindowsLicense, lblAudio, lblAudioLabel, lblBatteryCapacity, lblCPU, lblCPULabel, lblDiscDrive, lblDiscDriveLabel, lblGPU, lblGPULabel, lblModel, lblModelLabel, lblMoreTests, lblOS, lblPID, lblPassword, lblRAM, lblRAMLabel, lblScreen, lblScreenLabel, lblSerial, lblStorage, lblStorageLabel, lblTasks, lblUsername, lblWireless, lblWirelessLabel, pswPassword, txtPID, txtUsername});

        contentScrollPane.setViewportView(contentPane);

        textSizeMenu.setText("Text Size");

        menResetTextSize.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_0, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menResetTextSize.setIcon(new TwemojiImage("LeftArrow", qaHelperWindow).toImageIcon(16));
        menResetTextSize.setText("Reset Text Size");
        menResetTextSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menResetTextSizeActionPerformed(evt);
            }
        });
        textSizeMenu.add(menResetTextSize);

        menIncreaseTextSize.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_EQUALS, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menIncreaseTextSize.setIcon(new TwemojiImage("UpArrow", qaHelperWindow).toImageIcon(16));
        menIncreaseTextSize.setText("Increase Text Size");
        menIncreaseTextSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menIncreaseTextSizeActionPerformed(evt);
            }
        });
        textSizeMenu.add(menIncreaseTextSize);

        menDecreaseTextSize.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MINUS, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menDecreaseTextSize.setIcon(new TwemojiImage("DownArrow", qaHelperWindow).toImageIcon(16));
        menDecreaseTextSize.setText("Decrease Text Size");
        menDecreaseTextSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menDecreaseTextSizeActionPerformed(evt);
            }
        });
        textSizeMenu.add(menDecreaseTextSize);

        menMaxTextSizeForScreen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_EQUALS, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menMaxTextSizeForScreen.setIcon(new TwemojiImage("UpDownArrow", qaHelperWindow).toImageIcon(16));
        menMaxTextSizeForScreen.setText("Max Text Size for Screen");
        menMaxTextSizeForScreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menMaxTextSizeForScreenActionPerformed(evt);
            }
        });
        textSizeMenu.add(menMaxTextSizeForScreen);

        mainMenubar.add(textSizeMenu);

        deviceTypeMenu.setText("Device Type");

        menDeviceTypeLaptop.setText("Laptop");
        menDeviceTypeLaptop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menDeviceTypeLaptopActionPerformed(evt);
            }
        });
        deviceTypeMenu.add(menDeviceTypeLaptop);

        menDeviceTypeDesktop.setText("Desktop");
        menDeviceTypeDesktop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menDeviceTypeDesktopActionPerformed(evt);
            }
        });
        deviceTypeMenu.add(menDeviceTypeDesktop);

        menDeviceTypeAllInOne.setText("All-in-One");
        menDeviceTypeAllInOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menDeviceTypeAllInOneActionPerformed(evt);
            }
        });
        deviceTypeMenu.add(menDeviceTypeAllInOne);
        deviceTypeMenu.add(deviceTypeSeparator);

        menDeviceTypeMotherboard.setText("Motherboard");
        menDeviceTypeMotherboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menDeviceTypeMotherboardActionPerformed(evt);
            }
        });
        deviceTypeMenu.add(menDeviceTypeMotherboard);

        mainMenubar.add(deviceTypeMenu);

        testsMenu.setText("Tests");

        menForceShowAllTests.setText("Force Show All Tests");
        menForceShowAllTests.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menForceShowAllTestsActionPerformed(evt);
            }
        });
        testsMenu.add(menForceShowAllTests);

        mainMenubar.add(testsMenu);

        optionsMenu.setText("Options");

        menLogSpecs.setIcon(new TwemojiImage("Memo", qaHelperWindow).toImageIcon(16));
        menLogSpecs.setText("Log Computer Specs Without Updating Status");
        menLogSpecs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menLogSpecsActionPerformed(evt);
            }
        });
        optionsMenu.add(menLogSpecs);

        menReopenRepair.setIcon(new TwemojiImage("HammerAndWrench", qaHelperWindow).toImageIcon(16));
        menReopenRepair.setText("Set Status Back to \"" + privateStrings.getPCsCRMStatusNames()[3] + "\" (Reopen Repair)");
        menReopenRepair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menReopenRepairActionPerformed(evt);
            }
        });
        optionsMenu.add(menReopenRepair);

        menSetProductType.setIcon(new TwemojiImage("Laptop", qaHelperWindow).toImageIcon(16));
        menSetProductType.setText("Open Inventory Manager on PCsCRM.com to Set Product Type");
        menSetProductType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menSetProductTypeActionPerformed(evt);
            }
        });
        optionsMenu.add(menSetProductType);

        menRunOemConfig.setIcon(new TwemojiImage("Receipt", qaHelperWindow).toImageIcon(16));
        menRunOemConfig.setText("Prepare for Shipping to End User (Run \"oem-config-prepare\")");
        menRunOemConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menRunOemConfigActionPerformed(evt);
            }
        });
        optionsMenu.add(menRunOemConfig);

        menLogOut.setIcon(new TwemojiImage("Locked", qaHelperWindow).toImageIcon(16));
        menLogOut.setText("Log Out");
        menLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menLogOutActionPerformed(evt);
            }
        });
        optionsMenu.add(menLogOut);

        mainMenubar.add(optionsMenu);

        installAppsMenu.setText("Install Apps");

        menInstallGoogleChrome.setText("Install Google Chrome");
        menInstallGoogleChrome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menInstallGoogleChromeActionPerformed(evt);
            }
        });
        installAppsMenu.add(menInstallGoogleChrome);

        menInstallZoom.setText("Install Zoom");
        menInstallZoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menInstallZoomActionPerformed(evt);
            }
        });
        installAppsMenu.add(menInstallZoom);

        menInstallTeamViewer.setText("Install TeamViewer");
        menInstallTeamViewer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menInstallTeamViewerActionPerformed(evt);
            }
        });
        installAppsMenu.add(menInstallTeamViewer);

        menInstallDropbox.setText("Install Dropbox");
        menInstallDropbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menInstallDropboxActionPerformed(evt);
            }
        });
        installAppsMenu.add(menInstallDropbox);

        menInstallSpotify.setText("Install Spotify");
        menInstallSpotify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menInstallSpotifyActionPerformed(evt);
            }
        });
        installAppsMenu.add(menInstallSpotify);

        menInstallFBReader.setText("Install FBReader");
        menInstallFBReader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menInstallFBReaderActionPerformed(evt);
            }
        });
        installAppsMenu.add(menInstallFBReader);
        installAppsMenu.add(installAppsMenuSeparator);

        menInstallAllApps.setIcon(new TwemojiImage("IndexPointingUp", qaHelperWindow).toImageIcon(16));
        menInstallAllApps.setText("Install ALL OF THE ABOVE Apps");
        menInstallAllApps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menInstallAllAppsActionPerformed(evt);
            }
        });
        installAppsMenu.add(menInstallAllApps);

        mainMenubar.add(installAppsMenu);

        scriptsMenu.setText("Scripts");

        menReRunSetupWindowsScript.setIcon(new TwemojiImage("RepeatButton", qaHelperWindow).toImageIcon(16));
        menReRunSetupWindowsScript.setText("Re-Run \"Setup Windows\" Script");
        menReRunSetupWindowsScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menReRunSetupWindowsScriptActionPerformed(evt);
            }
        });
        scriptsMenu.add(menReRunSetupWindowsScript);

        menRunCompleteWindowsScript.setIcon(new TwemojiImage("CheckMarkButton", qaHelperWindow).toImageIcon(16));
        menRunCompleteWindowsScript.setText("Run \"Complete Windows\" Script & Shut Down");
        menRunCompleteWindowsScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menRunCompleteWindowsScriptActionPerformed(evt);
            }
        });
        scriptsMenu.add(menRunCompleteWindowsScript);
        scriptsMenu.add(scriptsMenuSeparator);

        menCacheDriversWindowsScript.setIcon(new TwemojiImage("Toolbox", qaHelperWindow).toImageIcon(16));
        menCacheDriversWindowsScript.setText("Manually Cache Drivers (Without Running \"Complete Windows\" Script)");
        menCacheDriversWindowsScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menCacheDriversWindowsScriptActionPerformed(evt);
            }
        });
        scriptsMenu.add(menCacheDriversWindowsScript);

        mainMenubar.add(scriptsMenu);

        utilitiesMenu.setText("Utilities");

        menOpenTerminalOrCommandPrompt.setIcon(new TwemojiImage("ControlKnobs", qaHelperWindow).toImageIcon(16));
        menOpenTerminalOrCommandPrompt.setText("Open Terminal / Command Prompt");
        menOpenTerminalOrCommandPrompt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menOpenTerminalOrCommandPromptActionPerformed(evt);
            }
        });
        utilitiesMenu.add(menOpenTerminalOrCommandPrompt);

        menOpenFileExplorerPE.setIcon(new TwemojiImage("MagnifyingGlassTiltedLeft", qaHelperWindow).toImageIcon(16));
        menOpenFileExplorerPE.setText("Open File Explorer (PE)");
        menOpenFileExplorerPE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menOpenFileExplorerPEActionPerformed(evt);
            }
        });
        utilitiesMenu.add(menOpenFileExplorerPE);

        menSetDvdDriveRegion.setIcon(new TwemojiImage("DVD", qaHelperWindow).toImageIcon(16));
        menSetDvdDriveRegion.setText("Set DVD Drive Region");
        menSetDvdDriveRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menSetDvdDriveRegionActionPerformed(evt);
            }
        });
        utilitiesMenu.add(menSetDvdDriveRegion);

        mainMenubar.add(utilitiesMenu);

        setJMenuBar(mainMenubar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contentScrollPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contentScrollPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentMoved
        if (isVisible() && ignoreWindowMovesUntilTime <= System.currentTimeMillis())
            windowMoved = true;
    }//GEN-LAST:event_formComponentMoved

    private void menLogSpecsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menLogSpecsActionPerformed
        if (actionsEnabled && isLoggedIn && !isReloading) {
            setActionsEnabled(false);

            if (JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>Are you sure you want to log the current specs for ID \"" + pid + "\" without updating the status?</b></html>", "QA Helper  —  Confirm Log Specs", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage("Memo", qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                loadingWindow.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
                setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

                loadingWindow.setLoadingTextAndDisplay("QA Helper is Logging Current Computer Specs", "Working", "Memo");

                (new SwingWorker<String[], Void>() {
                    @Override
                    protected String[] doInBackground() throws Exception {
                        return (logComputerSpecs() ? loadStatusHistory(false) : null);
                    }

                    @Override
                    protected void done() {
                        try {
                            loadingWindow.closeWindow();

                            String[] statusAndTech = get();

                            if (statusAndTech != null) {
                                displayComputerSpecs(statusAndTech);

                                playAlertSound("success");
                                JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Successfully Logged Current Computer Specs</b></html>", "QA Helper  —  Successfully Logged Specs", JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("Memo", qaHelperWindow).toImageIcon(32));
                            } else {
                                playAlertSound("error");
                                JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Failed to Log Current Computer Specs</b></html>", "QA Helper  —  Log Specs Error", JOptionPane.ERROR_MESSAGE);
                            }
                        } catch (HeadlessException | InterruptedException | ExecutionException logSpecsException) {
                            if (isTestMode) {
                                System.out.println("logSpecsException: " + logSpecsException);
                            }
                        }

                        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                        loadingWindow.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                        setActionsEnabled(true);
                    }
                }).execute();
            } else {
                setActionsEnabled(true);
            }
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menLogSpecsActionPerformed

    private void menReopenRepairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menReopenRepairActionPerformed
        if (actionsEnabled && isLoggedIn) {
            String currentStatus = getCurrentStatus();

            String[] statusNames = privateStrings.getPCsCRMStatusNames();
            if (!currentStatus.equals(statusNames[3]) && !currentStatus.equals("UNKNOWN STATUS")) {
                setActionsEnabled(false);

                if (JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>Are you sure you want to set the status for ID \"" + pid + "\" back to <u>" + statusNames[3] + "</u>?</b></html>", "QA Helper  —  Confirm Reopen Repair", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage("HammerAndWrench", qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                    loadingWindow.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
                    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

                    loadingWindow.setLoadingTextAndDisplay("QA Helper is Reopening Repair", "Working", "HammerAndWrench");

                    (new SwingWorker<String[], Void>() {
                        @Override
                        protected String[] doInBackground() throws Exception {
                            if (!isTestMode && (pid.startsWith("FG") || (!currentStatus.equals(statusNames[1]) && !currentStatus.equals(statusNames[11]) && !currentStatus.equals(statusNames[12])))) {
                                sendNoticeEmail("Reopening Repair from Status \"" + currentStatus + "\"");
                            }

                            updateStatus(statusNames[3], currentStatus);
                            return loadStatusHistory(false);
                        }

                        @Override
                        protected void done() {
                            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                            loadingWindow.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

                            try {
                                String[] currentStatusAndTech = get();
                                displayComputerSpecs(currentStatusAndTech);
                            } catch (InterruptedException | ExecutionException reOpenRepairException) {
                                if (isTestMode) {
                                    System.out.println("reOpenRepairException: " + reOpenRepairException);
                                }
                            }

                            if (!isReloading) {
                                loadingWindow.closeWindow();
                                setActionsEnabled(true);
                            }
                        }
                    }).execute();
                } else {
                    setActionsEnabled(true);
                }
            } else {
                playAlertSound("beep");
            }
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menReopenRepairActionPerformed

    private void menSetProductTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menSetProductTypeActionPerformed
        if (actionsEnabled && isLoggedIn && !isReloading) {
            if (pid.startsWith("FG")) {
                promptToSetProductType();
            } else {
                autoLoginToPCsCRMInventoryManagerPage();
            }
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menSetProductTypeActionPerformed

    private void menRunOemConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menRunOemConfigActionPerformed
        if (isLinux && !isLinuxUbiquityMode && actionsEnabled && isLoggedIn) {
            String currentStatus = getCurrentStatus();

            String[] statusNames = privateStrings.getPCsCRMStatusNames();
            if (currentStatus.equals(statusNames[12])) {
                setActionsEnabled(false);

                if (JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>Are you sure you want to <u>prepare for shipping to end user</u> (run \"oem-config-prepare\")?</b></html>", "QA Helper  —  Confirm Prepare for Shipping to End User", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage("Receipt", qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                    loadingWindow.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
                    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

                    loadingWindow.setLoadingTextAndDisplay("QA Helper is Preparing for Shipping to End User", "Working", "Receipt");

                    (new SwingWorker<Boolean, Void>() {
                        @Override
                        protected Boolean doInBackground() throws Exception {
                            return runOemConfigPrepare();
                        }

                        @Override
                        protected void done() {
                            loadingWindow.closeWindow();

                            try {
                                if (get()) {
                                    playAlertSound("success");

                                    String[] runOemConfigDialogButtons = new String[]{"Shut Down", "Reboot", "Quit", "Keep Using QA Helper"};

                                    int runOemConfigDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html><b>Successfully Prepared for Shipping to End User</b><br/><br/><i>What would you like to do next?</i></html>", "QA Helper  —  Prepared for Shipping to End User", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, runOemConfigDialogButtons, runOemConfigDialogButtons[0]);

                                    String runOemConfigDialogResponseString = "Keep Using QA Helper";
                                    if (runOemConfigDialogResponse > -1) {
                                        runOemConfigDialogResponseString = runOemConfigDialogButtons[runOemConfigDialogResponse];
                                    }

                                    switch (runOemConfigDialogResponseString) {
                                        case "Shut Down":
                                            try {
                                                while (!new CommandReader(new String[]{"/usr/bin/pgrep", "-fn", "/auto-scripts/.*\\+(user|root)\\.sh$"}).getFirstOutputLine().isEmpty()) {
                                                    TimeUnit.SECONDS.sleep(2);
                                                }

                                                Runtime.getRuntime().exec(new String[]{"/bin/systemctl", "poweroff"}).waitFor();
                                                TimeUnit.SECONDS.sleep(2);
                                            } catch (IOException | InterruptedException systemctlPowerOffException) {
                                                if (isTestMode) {
                                                    System.out.println("systemctlPowerOffException: " + systemctlPowerOffException);
                                                }
                                            }

                                            System.exit(0);
                                        case "Reboot":
                                            try {
                                                while (!new CommandReader(new String[]{"/usr/bin/pgrep", "-fn", "/auto-scripts/.*\\+(user|root)\\.sh$"}).getFirstOutputLine().isEmpty()) {
                                                    TimeUnit.SECONDS.sleep(2);
                                                }

                                                Runtime.getRuntime().exec(new String[]{"/bin/systemctl", "reboot"}).waitFor();
                                                TimeUnit.SECONDS.sleep(2);
                                            } catch (IOException | InterruptedException systemctlRebootException) {
                                                if (isTestMode) {
                                                    System.out.println("systemctlRebootException: " + systemctlRebootException);
                                                }
                                            }

                                            System.exit(0);
                                        case "Quit":
                                            System.exit(0);
                                        default:
                                            break;
                                    }
                                } else {
                                    playAlertSound("error");
                                    sendErrorEmail("Failed to Prepare for Shipping to End User");
                                    JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Failed to Prepare for Shipping to End User</b><br/><br/>This should not have happened, please inform Free Geek I.T.</html>", "QA Helper  —  Prepare for Shipping to End User Failed", JOptionPane.ERROR_MESSAGE);
                                }
                            } catch (InterruptedException | ExecutionException runOemConfigException) {
                                if (isTestMode) {
                                    System.out.println("runOemConfigException: " + runOemConfigException);
                                }
                            }

                            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                            loadingWindow.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                            setActionsEnabled(true);
                        }
                    }).execute();
                } else {
                    setActionsEnabled(true);
                }
            } else {
                playAlertSound("beep");
            }
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menRunOemConfigActionPerformed

    private void menLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menLogOutActionPerformed
        if (actionsEnabled && isLoggedIn) {
            setActionsEnabled(false);

            if (historyWindow != null && historyWindow.isVisible()) {
                historyWindow.dispose();
            }

            isLoggedIn = false;
            pswPassword.setText("");
            loggedInUserInfo.clear();
            currentConditionGrade = "N/A";
            currentNotes = "";
            PCsCRMManager.logOut();

            getRootPane().setDefaultButton(null);

            reload(false); // Will setActionsEnabled(true);
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menLogOutActionPerformed

    private void menInstallGoogleChromeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menInstallGoogleChromeActionPerformed
        if (actionsEnabled && ((isLinux && !isLinuxLiveBoot) || (isWindows && !isWindowsPE))) {
            installOptionalApp("Google Chrome");
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menInstallGoogleChromeActionPerformed

    private void menInstallZoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menInstallZoomActionPerformed
        if (actionsEnabled && ((isLinux && !isLinuxLiveBoot) || (isWindows && !isWindowsPE))) {
            installOptionalApp("Zoom");
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menInstallZoomActionPerformed

    private void menInstallTeamViewerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menInstallTeamViewerActionPerformed
        if (actionsEnabled && ((isLinux && !isLinuxLiveBoot) || (isWindows && !isWindowsPE))) {
            installOptionalApp("TeamViewer");
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menInstallTeamViewerActionPerformed

    private void menInstallDropboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menInstallDropboxActionPerformed
        if (actionsEnabled && ((isLinux && !isLinuxLiveBoot) || (isWindows && !isWindowsPE))) {
            installOptionalApp("Dropbox");
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menInstallDropboxActionPerformed

    private void menInstallSpotifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menInstallSpotifyActionPerformed
        if (actionsEnabled && (isLinux && !isLinuxLiveBoot)) {
            installOptionalApp("Spotify");
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menInstallSpotifyActionPerformed

    private void menInstallFBReaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menInstallFBReaderActionPerformed
        if (actionsEnabled && (isLinux && !isLinuxLiveBoot)) {
            installOptionalApp("FBReader");
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menInstallFBReaderActionPerformed

    private void menInstallAllAppsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menInstallAllAppsActionPerformed
        if (actionsEnabled && isLinux && !isLinuxLiveBoot) {
            installOptionalApps(new String[]{"Google Chrome", "Zoom", "TeamViewer", "Dropbox", "Spotify", "FBReader"});
        } else if (actionsEnabled && isWindows && !isWindowsPE) {
            installOptionalApps(new String[]{"Google Chrome", "Zoom", "TeamViewer", "Dropbox"});
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menInstallAllAppsActionPerformed

    private void menSetDvdDriveRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menSetDvdDriveRegionActionPerformed
        if (actionsEnabled && isLinux && !isLinuxLiveBoot) {
            setActionsEnabled(false);

            String[] aptProcesses = new CommandReader(new String[]{"/usr/bin/pgrep", "-fa", "(apt|mintUpdate)"}).getOutputLines();
            boolean aptIsRunning = false;
            for (String thisAptProcess : aptProcesses) {
                if (thisAptProcess.contains("apt-get") || thisAptProcess.contains("/bin/apt") || thisAptProcess.contains("/apt/methods/") || (thisAptProcess.contains("/mintUpdate/") && !thisAptProcess.endsWith("/mintUpdate/mintUpdate.py"))) {
                    aptIsRunning = true;
                    break;
                }
            }

            if (aptIsRunning) {
                playAlertSound("beep");

                JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Another installation process (such as \"apt\" or \"mintUpdate\") is currently running. <i>This process may be running in the background.</i></b><br/><br/><i>This other installation process could interrupt installating <i>RegionSet</i> or installating <i>RegionSet</i> may interrupt the other installation process.</i><br/><br/>Try again after the other installation process has finished.</html>", "QA Helper  —  Set DVD Drive Region Warning", JOptionPane.WARNING_MESSAGE);
            } else {
                try {
                    String possibleSudo = (!adminPassword.equals("*UNKNOWN*") ? "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk " : "");

                    String setDriveRegionCommands = "";
                    ArrayList<String> discDriveLogicalNames = computerSpecs.getDiscDriveLogicalNames();
                    setDriveRegionCommands = discDriveLogicalNames.stream().map((thisDiscDriveLogicalName) -> "/usr/sbin/regionset " + thisDiscDriveLogicalName + "; ").reduce(setDriveRegionCommands, String::concat);

                    Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", possibleSudo + "/usr/bin/" + (isLinuxMATE ? "mate" : "gnome") + "-terminal --window" + (isLinuxMATE ? "" : "-with-profile-internal-id '0'") + " --title 'QA Helper  —  Set DVD Drive Region' --hide-menubar --geometry '80x25+0+0' -x /bin/sh -c 'echo \"\nSETTING DVD DRIVE REGION\n\n\"; /usr/bin/sudo /bin/rm -rf ~/.dvdcss/; /usr/bin/sudo /usr/local/bin/apt install --no-install-recommends -y regionset; echo \"\n\"; " + setDriveRegionCommands + "echo \"\n\nFINISHED SETTING DVD DRIVE REGION\n\nPRESS ENTER TO CLOSE THIS WINDOW\"; read line; /usr/bin/wmctrl -a \"QA Helper\";'"});

                    TimeUnit.SECONDS.sleep(1);

                    focusWindow();
                    JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Started DVD Drive Region Set in a Terminal</b><br/><br/><i>You can continue using QA Helper while setting the DVD drive region in the Terminal.</i><br/><br/>When you are done setting the DVD drive region in the Terminal, you can press enter in the Terminal window to close it.</html>", "QA Helper  —  Set DVD Drive Region", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException | InterruptedException setDvdDriveRegionException) {
                    if (isTestMode) {
                        System.out.println("setDvdDriveRegionException: " + setDvdDriveRegionException);
                    }
                    playAlertSound("error");
                }
            }

            setActionsEnabled(true);
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menSetDvdDriveRegionActionPerformed

    private void menOpenTerminalOrCommandPromptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menOpenTerminalOrCommandPromptActionPerformed
        if (actionsEnabled && isLinux && isLinuxUbiquityMode && new File("/cdrom/preseed/dependencies/xterm").exists()) {
            try {
                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "LD_LIBRARY_PATH=/cdrom/preseed/dependencies/ /cdrom/preseed/dependencies/xterm -geometry 80x25+0+0 -sb -sl 999999 -rightbar -e 'echo \"USE ME FOR DEBUGGING\n\n\"; /bin/bash'"});
            } catch (IOException openXTermException) {
                if (isTestMode) {
                    System.out.println("openXTermException: " + openXTermException);
                }
                playAlertSound("error");
            }
        } else if (actionsEnabled && isWindows && isWindowsPE) {
            try {
                Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\cmd.exe", "/c", "START \\Windows\\System32\\cmd.exe"});

                if (isWindowsPE) {
                    setState(Frame.ICONIFIED);
                }
            } catch (IOException openCommandPromptException) {
                if (isTestMode) {
                    System.out.println("openCommandPromptException: " + openCommandPromptException);
                }
                playAlertSound("error");
            }
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menOpenTerminalOrCommandPromptActionPerformed

    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
        txtPIDActionPerformed(evt);
    }//GEN-LAST:event_txtUsernameActionPerformed

    private void pswPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pswPasswordActionPerformed
        txtPIDActionPerformed(evt);
    }//GEN-LAST:event_pswPasswordActionPerformed

    private void txtPIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPIDKeyTyped
        String typedKeyString = String.valueOf(evt.getKeyChar());

        if (typedKeyString.equals("-")) {
            pidDashKeyTypedMillis = System.currentTimeMillis();
        } else if (pidDashKeyTypedMillis > 0 && typedKeyString.matches("[0-9]")) {
            pidLastDigitAfterDashKeyTypedMillis = System.currentTimeMillis();

            long millisBetweenDigitsAroundDash = (pidLastDigitAfterDashKeyTypedMillis - pidDashKeyTypedMillis);
            if (millisBetweenDigitsAroundDash <= 150) {
                lastPIDscannedOrConfirmed = txtPID.getText().replaceAll("\\s", "").toUpperCase() + typedKeyString;
                if (lastPIDscannedOrConfirmed.matches("^[0-9]+-[0-9]+$")) {
                    lastPIDscannedOrConfirmed = "FG" + lastPIDscannedOrConfirmed;
                }
            }
        }
    }//GEN-LAST:event_txtPIDKeyTyped

    private void txtPIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPIDActionPerformed
        if (actionsEnabled && !isLoggedIn && !txtUsername.getText().trim().isEmpty() && pswPassword.getPassword().length > 0 && !txtPID.getText().replaceAll("\\s", "").isEmpty())
            btnLogInActionPerformed(evt);
        else {
            playAlertSound("beep");
            focusNextTestTaskVerifyButton(btnLogIn);
        }
    }//GEN-LAST:event_txtPIDActionPerformed

    private void btnLogInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogInActionPerformed
        if (actionsEnabled && !isLoggedIn && !txtUsername.getText().trim().isEmpty() && pswPassword.getPassword().length > 0 && !txtPID.getText().replaceAll("\\s", "").isEmpty()) {
            setActionsEnabled(false);

            String currentPID = txtPID.getText().replaceAll("\\s", "").toUpperCase();
            if (currentPID.matches("^[0-9]+-[0-9]+$")) {
                currentPID = "FG" + currentPID;
            }

            if (!txtPID.getText().equals(currentPID)) {
                txtPID.setText(currentPID);
            }

            if (isTestMode) {
                lastPIDscannedOrConfirmed = currentPID; // Do not confirm IDs in Test Mode for convenience.
            }
            if (!lastPIDscannedOrConfirmed.equals(currentPID)) {
                txtPID.setText("CONFIRM ID");

                JTextField pidConfirmationField = new JTextField();
                pidConfirmationField.putClientProperty("JTextField.showClearButton", true);
                pidConfirmationField.setTransferHandler(null); // Disable pasting into field.
                Object[] pidConfirmationFields = new Object[]{
                    "<html><b>Since you've typed in the ID instead of using a barcode scanner,<br/>please double-check and confirm that you've entered the correct ID:</b></html>",
                    pidConfirmationField,
                    "<html><br/><center>"
                    + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>READ OR SCAN THE ID FROM THE <u>STICKER ON THE COMPUTER</u></i> " + new TwemojiImage("BackhandIndexPointingLeft", qaHelperWindow).toImgTag("right")
                    + "<br/>"
                    + new TwemojiImage("Prohibited", qaHelperWindow).toImgTag("left") + " <b>DO NOT READ THE ID FROM THE HAND WRITTEN LABEL</b> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")
                    + "</center></html>"
                };

                JOptionPane pidConfirmationPane = new JOptionPane(pidConfirmationFields, JOptionPane.WARNING_MESSAGE, JOptionPane.OK_CANCEL_OPTION, new TwemojiImage("Eyes", qaHelperWindow).toImageIcon(32)) {
                    @Override
                    public void selectInitialValue() {
                        pidConfirmationField.requestFocusInWindow();
                    }
                };

                pidConfirmationPane.createDialog(qaHelperWindow, "QA Helper  —  Confirm ID").setVisible(true);

                if (pidConfirmationPane.getValue() != null && (int) pidConfirmationPane.getValue() == JOptionPane.OK_OPTION && !pidConfirmationField.getText().trim().isEmpty()) {
                    String confirmedPID = pidConfirmationField.getText().trim().toUpperCase();
                    if (confirmedPID.matches("^[0-9]+-[0-9]+$")) {
                        confirmedPID = "FG" + confirmedPID;
                    }

                    if (!confirmedPID.equals(currentPID)) {
                        txtPID.setText("");
                        playAlertSound("error");
                        JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>IDs Did Not Match</b><br/><br/>Please enter the correct ID before attempting to log in again.<br/><br/>"
                                + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>MAKE SURE THE CORRECT ID IS ON THE HANDWRITTEN LABEL</i> " + new TwemojiImage("BackhandIndexPointingLeft", qaHelperWindow).toImgTag("right")
                                + "</html>", "QA Helper  —  ID Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        lastPIDscannedOrConfirmed = currentPID;
                        txtPID.setText(currentPID);
                    }
                } else {
                    txtPID.setText(currentPID);
                }
            }

            if (lastPIDscannedOrConfirmed.equals(currentPID)) {
                // Don't allow close on login because status might get updated.
                loadingWindow.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
                setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

                loadingWindow.setLoadingTextAndDisplay("QA Helper is Logging In", "Working", "Key");

                (new SwingWorker<String[], Void>() {
                    @Override
                    protected String[] doInBackground() throws Exception {
                        String[] statusAndTech = checkPID(false);
                        isLoggedIn = (statusAndTech != null);

                        if (isLoggedIn) {
                            new LinuxAutoScripts("Login", adminPassword);

                            String currentStatus = statusAndTech[0];

                            logSpecsAction("Login (" + currentStatus + ")");

                            String[] statusNames = privateStrings.getPCsCRMStatusNames();
                            if (Arrays.asList(privateStrings.getPCsCRMStatusNamesToAutoChangeOnLogin()).contains(currentStatus)) {
                                if (updateStatus(statusNames[3], currentStatus)) {
                                    statusAndTech = loadStatusHistory(false);
                                }
                            } else if (!lastStatus.equals(currentStatus)) {
                                writeToHelperLogFile("Status: " + currentStatus);

                                new LinuxAutoScripts(currentStatus, adminPassword);

                                lastStatus = currentStatus;
                            }

                            return statusAndTech;
                        }

                        return null;
                    }

                    @Override
                    protected void done() {
                        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                        loadingWindow.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

                        if (isLoggedIn) {
                            try {
                                getRootPane().setDefaultButton(null);
                                String[] currentStatusAndTech = get();
                                displayComputerSpecs(currentStatusAndTech);
                            } catch (InterruptedException | ExecutionException loginException) {
                                if (isTestMode) {
                                    System.out.println("loginException: " + loginException);
                                }

                                isLoggedIn = false;
                            }
                        }

                        if (!isReloading) {
                            loadingWindow.closeWindow();
                            setActionsEnabled(true);
                            focusNextTestTaskVerifyButton(null);
                        }

                        if (!isLoggedIn) {
                            pswPassword.requestFocusInWindow();
                        }
                    }
                }).execute();
            } else {
                setActionsEnabled(true);
                txtPID.requestFocusInWindow();
            }
        } else {
            playAlertSound("beep");
            focusNextTestTaskVerifyButton(btnLogIn);
        }
    }//GEN-LAST:event_btnLogInActionPerformed

    private void btnTestModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestModeActionPerformed
        if (actionsEnabled && !isLoggedIn) {
            setActionsEnabled(false);

            isTestMode = !isTestMode;

            boolean loginAndTasksWasHidden = hideLoginAndTasks;
            if (loginAndTasksWasHidden) {
                hideLoginAndTasks = false;
            }

            displayComputerSpecs();

            if (loginAndTasksWasHidden) {
                hideLoginAndTasks = true;
            }

            setActionsEnabled(true);
            focusNextTestTaskVerifyButton(btnLogIn);
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnTestModeActionPerformed

    private void btnTestModeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnTestModeFocusGained
        JButton thisButton = (JButton) evt.getSource();
        Font defaultFont = (isTestMode ? UIManager.getFont("defaultFont").deriveFont(Font.BOLD) : UIManager.getFont("defaultFont"));
        HashMap<TextAttribute, Object> attributes = new HashMap<>(defaultFont.getAttributes());
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        thisButton.setFont(defaultFont.deriveFont(attributes));
    }//GEN-LAST:event_btnTestModeFocusGained

    private void btnTestModeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnTestModeFocusLost
        JButton thisButton = (JButton) evt.getSource();
        thisButton.setFont((isTestMode ? UIManager.getFont("defaultFont").deriveFont(Font.BOLD) : UIManager.getFont("defaultFont")));
    }//GEN-LAST:event_btnTestModeFocusLost

    private void btnForgotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnForgotActionPerformed
        if (actionsEnabled && !isLoggedIn) {
            setActionsEnabled(false);

            if (JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>Would you like to go open \"pcscrm.com/login.aspx\" in your web browser?</b><br/><br/><i>You can use the \"Password help\" link on the PCsCRM.com login page to reset your password.</i></html>", "QA Helper  —  Forgot Password", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
                String pcsCrmForgotPasswordURL = "https://" + (isTestMode ? "test." : "") + "pcscrm.com/login.aspx";
                String hiddenPCsCRMloginInputs = "";

                for (int i = 0; i < 5; i++) {
                    hiddenPCsCRMloginInputs = String.join("\n", new WebReader(pcsCrmForgotPasswordURL).getOutputLinesContaining("<input type=\"hidden\""));

                    if (!hiddenPCsCRMloginInputs.isEmpty()) {
                        break;
                    }
                }

                if (!hiddenPCsCRMloginInputs.isEmpty()) {
                    try {
                        File pcsCrmForgotPasswordTempFile = File.createTempFile("qa_helper-pcscrm_forgot_password", ".html");
                        pcsCrmForgotPasswordTempFile.deleteOnExit();

                        try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(pcsCrmForgotPasswordTempFile))) {
                            bufferedWriter.write("<!DOCTYPE html>"
                                    + "<html>"
                                    + "<head><title>New Login Page</title></head>"
                                    + "<body onload=\"javascript:document.getElementById('pcscrmForgotPassword').submit();\">"
                                    + "<form id=\"pcscrmForgotPassword\" action=\"https://" + (isTestMode ? "test." : "") + "pcscrm.com/login.aspx\" method=\"post\">"
                                    + "<input type=\"hidden\" name=\"__EVENTTARGET\" id=\"__EVENTTARGET\" value=\"lbForgotPassword\">"
                                    + hiddenPCsCRMloginInputs
                                    + "</form>"
                                    + "</body>"
                                    + "</html>");
                        } catch (Exception writePcsCrmForgotPasswordTempFileException) {
                            if (isTestMode) {
                                System.out.println("writePcsCrmForgotPasswordTempFileException: " + writePcsCrmForgotPasswordTempFileException);
                            }
                        }

                        pcsCrmForgotPasswordURL = pcsCrmForgotPasswordTempFile.toURI().toString();
                    } catch (IOException createPcsCrmForgotPasswordTempFileException) {
                        if (isTestMode) {
                            System.out.println("createPcsCrmForgotPasswordTempFileException: " + createPcsCrmForgotPasswordTempFileException);
                        }
                    }
                }

                if (isLinux) {
                    boolean enoughRAMforWebBrowser = true;

                    if (isLinuxBootedToRAM) {
                        // There may not be enough free RAM for browser when booted "toram"
                        try {
                            enoughRAMforWebBrowser = (2000000000 <= Long.parseLong(new CommandReader("/usr/bin/free -b | /usr/bin/awk '($1 == \"Mem:\") { print $4; exit }'").getFirstOutputLine()));
                        } catch (NumberFormatException getFreeMemoryException) {
                            if (isTestMode) {
                                System.out.println("getFreeMemoryException: " + getFreeMemoryException);
                            }
                        }
                    }

                    if (enoughRAMforWebBrowser) {
                        boolean didLaunchChrome = false;
                        if (new File("/usr/bin/google-chrome-stable").exists() && !isLinuxUbiquityMode) { // Do not try to launch Chrome and only use Firefox when in Ubiquity mode (even if it has been pre-installed) since Firefox is simpler to launch without the app showing prompts.
                            try {
                                Runtime.getRuntime().exec(new String[]{"/usr/bin/google-chrome-stable", "--password-store=basic", "--start-maximized", "--incognito", pcsCrmForgotPasswordURL});
                                didLaunchChrome = true;
                            } catch (IOException chromeException) {
                                if (isTestMode) {
                                    System.out.println("chromeException: " + chromeException);
                                }
                            }
                        }

                        if (!didLaunchChrome) {
                            try {
                                if (isLinuxUbiquityMode) { // Sometimes Firefox hangs/freezes in Linux pre-install enviroment, so quit all Firefox instances before launching a new one.
                                    Runtime.getRuntime().exec(new String[]{"/usr/bin/pkill", "firefox"});
                                }

                                // Run Firefox as sudo in pre-install environment to fix an issue launching Firefox when java is not launched as sudo.
                                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", (isLinuxUbiquityMode ? "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk " : "") + "/usr/bin/firefox -private " + pcsCrmForgotPasswordURL});
                            } catch (IOException firefoxException) {
                                if (isTestMode) {
                                    System.out.println("firefoxException: " + firefoxException);
                                }

                                try {
                                    Runtime.getRuntime().exec(new String[]{"/usr/bin/xdg-open", pcsCrmForgotPasswordURL});
                                } catch (IOException xdgOpenException) {
                                    if (isTestMode) {
                                        System.out.println("xdgOpenException: " + xdgOpenException);
                                    }
                                }
                            }
                        }
                    } else {
                        playAlertSound("beep");
                        JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Not Enough Free RAM to Open Web Browser</b><br/><br/><i>You will be able to open a web browser after you've installed the OS.</i></html>", "QA Helper  —  Cannot Open Web Browser", JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    try {
                        Desktop.getDesktop().browse(new URI(pcsCrmForgotPasswordURL));
                    } catch (IOException | URISyntaxException openPCsCRMLoginException) {
                        if (isTestMode) {
                            System.out.println("openPCsCRMLoginException: " + openPCsCRMLoginException);
                        }
                    }
                }
            }

            setActionsEnabled(true);

            pswPassword.requestFocusInWindow();
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnForgotActionPerformed

    private void btnForgotFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnForgotFocusGained
        JButton thisButton = (JButton) evt.getSource();
        Font defaultFont = UIManager.getFont("defaultFont");
        HashMap<TextAttribute, Object> attributes = new HashMap<>(defaultFont.getAttributes());
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        thisButton.setFont(defaultFont.deriveFont(attributes));
    }//GEN-LAST:event_btnForgotFocusGained

    private void btnForgotFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnForgotFocusLost
        JButton thisButton = (JButton) evt.getSource();
        thisButton.setFont(UIManager.getFont("defaultFont"));
    }//GEN-LAST:event_btnForgotFocusLost

    private void btnCheckPIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckPIDActionPerformed
        if (actionsEnabled && !isLoggedIn && !txtPID.getText().replaceAll("\\s", "").isEmpty()) {
            setActionsEnabled(false);

            loadingWindow.setLoadingTextAndDisplay("QA Helper is Checking ID", "Working", "IDButton");

            (new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() throws Exception {
                    checkPID(true);

                    return null;
                }

                @Override
                protected void done() {
                    loadingWindow.closeWindow();

                    setActionsEnabled(true);

                    txtPID.requestFocusInWindow();
                }
            }).execute();
        } else {
            playAlertSound("beep");
            txtPID.requestFocusInWindow();
        }
    }//GEN-LAST:event_btnCheckPIDActionPerformed

    private void btnCheckPIDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnCheckPIDFocusGained
        JButton thisButton = (JButton) evt.getSource();
        Font defaultFont = UIManager.getFont("defaultFont");
        HashMap<TextAttribute, Object> attributes = new HashMap<>(defaultFont.getAttributes());
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        thisButton.setFont(defaultFont.deriveFont(attributes));
    }//GEN-LAST:event_btnCheckPIDFocusGained

    private void btnCheckPIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnCheckPIDFocusLost
        JButton thisButton = (JButton) evt.getSource();
        thisButton.setFont(UIManager.getFont("defaultFont"));
    }//GEN-LAST:event_btnCheckPIDFocusLost

    private void btnStressCPUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStressCPUActionPerformed
        if (actionsEnabled) {
            setActionsEnabled(false);

            ArrayList<String> cpuStressTestDurationOptions = new ArrayList<>(Arrays.asList("2 Minutes", "3 Minutes", "5 Minutes", "10 Minutes", "15 Minutes", "20 Minutes", "30 Minutes"));
            if (isTestMode) {
                cpuStressTestDurationOptions.add(0, "1 Minute");
            }

            JComboBox cpuStressTestDurationMinutesComboBox = new JComboBox<>(cpuStressTestDurationOptions.toArray());
            cpuStressTestDurationMinutesComboBox.setSelectedIndex((isTestMode ? 0 : 1));

            int cpuStressTestPromptReturn = JOptionPane.showConfirmDialog(qaHelperWindow, new Object[]{"<html><b>CPU Stress Test will run for the duration specified below, stressing the full capacity of this computers processor.</b>"
                + "<br/>"
                + (isLinux
                ? "<br/><center><i>When CPU Stress Test starts, \"System Monitor\" will open so that you can switch to the<br/>"
                + "\"Resources\" tab to make sure the full CPU is being utilized during the duration of the test.</i></center>"
                : "")
                + "<br/>"
                + new TwemojiImage("SpeakerHighVolume", qaHelperWindow).toImgTag("left") + " While the CPU Stress Test runs, it is <u>normal and expected</u> for the <u>fans to run high and loud</u>.<br/>"
                + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " Although, the fans sounds should be <u>consistent and smooth</u>."
                + "<br/><br/>"
                + new TwemojiImage("Ear", qaHelperWindow).toImgTag("left") + " <i>Listen closely during the test for any fans that sound like they are <u>ticking, clicking, or sounding abnormal</u>."
                + "<br/>"
                + new TwemojiImage("HighVoltage", qaHelperWindow).toImgTag("left") + " It is a <u>serious issue</u> the fans <u>do not sound smooth</u> or you hear any <u>electronic sizzling sounds</u>.</i>"
                + "<br/><br/>"
                + new TwemojiImage("ExclamationQuestionMark", qaHelperWindow).toImgTag("left") + " <b>If you hear any <u>questionable sounds</u>, or if the <u>fans do not run high</u>, CPU Stress Test <u>has failed</u><br/>"
                + new TwemojiImage("StopSign", qaHelperWindow).toImgTag("left") + " and you should <u>consult an instructor</u> and <u>shut down the computer immediately</u>!</b>"
                + "<br/><br/>"
                + new TwemojiImage("Bomb", qaHelperWindow).toImgTag("left") + " <b><i>Also, if <u>this computer shuts itself down</u> during CPU Stress Test, <u>that is a failure</u>.</i></b>"
                + (deviceTypeIsLaptop
                ? "<br/><br/><center>" + new TwemojiImage("ElectricPlug", qaHelperWindow).toImgTag("left") + " <i>MAKE SURE THIS LAPTOP IS PLUGGED IN BEFORE STARTING CPU STRESS TEST</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right") + "</center>"
                : "")
                + (isLinux
                ? "<br/><center>"
                + "<i>After CPU Stress Test is finished, you will be presented with results<br/>"
                + "which will also display whether CPU Stress Test has <b style='color: " + successColorHTML + "'>passed</b> or <b style='color: " + errorColorHTML + "'>failed</b>.</i>"
                + "<br/><br/>"
                + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>CONSULT AN INSTRUCTOR IF CPU STRESS TEST FAILS</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right") + "</center>"
                : "")
                + "</html>",
                " ",
                "<html><b>CPU Stress Test Duration:</b></html>",
                cpuStressTestDurationMinutesComboBox}, "QA Helper  —  CPU Stress Test", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, new TwemojiImage("Brain", qaHelperWindow).toImageIcon());

            int specifiedCPUstressTestDurationMinutes = 3;

            try {
                specifiedCPUstressTestDurationMinutes = Integer.parseInt(cpuStressTestDurationMinutesComboBox.getSelectedItem().toString().replaceAll("[^0-9]", ""));
            } catch (NumberFormatException getCPUstressTestDurationMinutesException) {
                // Ignore Error
            }

            final int cpuStressTestDurationMinutes = specifiedCPUstressTestDurationMinutes;

            if (cpuStressTestPromptReturn == JOptionPane.OK_OPTION) {
                if (isWindowsPE) {
                    setState(Frame.ICONIFIED);
                }

                loadingWindow.setLoadingTextAndDisplay("QA Helper is Setting Up CPU Stress Test", "Testing", "Brain");

                (new SwingWorker<String, String>() {
                    @Override
                    protected String doInBackground() throws Exception {
                        if (isLinux) {
                            boolean stressWasInstalled = false;
                            boolean stressInstalledViaTerminal = false;
                            String stressPath = "/usr/bin/stress-ng";
                            String[] possibleStressPaths = new String[]{"/usr/bin/stress-ng", "LD_LIBRARY_PATH=/cdrom/preseed/dependencies/ /cdrom/preseed/dependencies/stress-ng"};

                            for (String thisStressPath : possibleStressPaths) {
                                stressWasInstalled = !new CommandReader(thisStressPath + " -V").getFirstOutputLineContaining(".").isEmpty();

                                if (stressWasInstalled) {
                                    stressPath = thisStressPath;
                                    break;
                                }
                            }

                            if (isTestMode) {
                                System.out.println("stressPath: " + stressPath);
                            }

                            boolean stressIsInstalled = stressWasInstalled;

                            if (!stressWasInstalled) {
                                String previousAdminPassword = adminPassword;
                                getAdminPassword("Run CPU Stress Test"); // Double-check that admin password is still correct.

                                if (!adminPassword.equals(previousAdminPassword)) {
                                    computerSpecs.reloadSpecs(adminPassword, isTestMode);

                                    publish("reloaded");
                                }

                                if (!adminPassword.equals("*UNKNOWN*")) {
                                    try {
                                        Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /usr/bin/apt-get install --no-install-recommends -qq stress-ng"}).waitFor();
                                        stressIsInstalled = !new CommandReader(new String[]{"/usr/bin/stress-ng", "-V"}).getFirstOutputLineContaining(".").isEmpty();
                                    } catch (IOException | InterruptedException installStressException) {
                                        if (isTestMode) {
                                            System.out.println("installStressException: " + installStressException);
                                        }
                                    }

                                    if (!stressIsInstalled && !isLinuxUbiquityMode) {
                                        try {
                                            File waitForTerminalPIDtempFile = File.createTempFile("qa_helper-wait_for_terminal_pid", ".txt");
                                            waitForTerminalPIDtempFile.deleteOnExit();

                                            Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /usr/bin/" + (isLinuxMATE ? "mate" : "gnome") + "-terminal --window" + (isLinuxMATE ? "" : "-with-profile-internal-id '0'") + " --title 'QA Helper  —  Installing \"stress-ng\"' --hide-menubar --geometry '80x25+0+0' -x /bin/bash -c 'orig_temp_owner=$(/usr/bin/stat -c %U " + waitForTerminalPIDtempFile.getPath() + "); /bin/chown root " + waitForTerminalPIDtempFile.getPath() + "; echo $$ > " + waitForTerminalPIDtempFile.getPath() + "; /bin/chown ${orig_temp_owner} " + waitForTerminalPIDtempFile.getPath() + "; echo \"\nINSTALLING \\\"stress-ng\\\"\n\n\"; /usr/local/bin/apt install --no-install-recommends -y stress-ng; echo \"\n\nFINISHED INSTALLING \\\"stress-ng\\\"\nTHIS TERMINAL WINDOW WILL CLOSE IN 5 SECONDS - OR PRESS ENTER TO CLOSE NOW\"; read -t 5; /usr/bin/wmctrl -a \"QA Helper\"'"});

                                            String waitForTerminalPID = "";

                                            for (int i = 0; i < 10; i++) {
                                                if (waitForTerminalPIDtempFile.exists()) {
                                                    try {
                                                        List<String> waitForTerminalPIDtempFileLines = Files.readAllLines(waitForTerminalPIDtempFile.toPath());

                                                        if (!waitForTerminalPIDtempFileLines.isEmpty()) {
                                                            waitForTerminalPID = waitForTerminalPIDtempFileLines.get(0);
                                                            if (!waitForTerminalPID.isEmpty()) {
                                                                break;
                                                            }
                                                        }
                                                    } catch (IOException | IndexOutOfBoundsException getTerminalPIDException) {
                                                        if (isTestMode) {
                                                            System.out.println("getTerminalPIDException: " + getTerminalPIDException);
                                                        }
                                                    }
                                                }

                                                TimeUnit.MILLISECONDS.sleep(500);
                                            }

                                            if (waitForTerminalPIDtempFile.exists()) {
                                                waitForTerminalPIDtempFile.delete();
                                            }

                                            if (!waitForTerminalPID.isEmpty()) {
                                                while (!new CommandReader(new String[]{"/bin/ps", "-p", waitForTerminalPID, "-o", "pid="}).getFirstOutputLine().isEmpty()) {
                                                    TimeUnit.MILLISECONDS.sleep(500);
                                                }
                                            }

                                            stressIsInstalled = !new CommandReader(new String[]{"/usr/bin/stress-ng", "-V"}).getFirstOutputLineContaining(".").isEmpty();
                                            stressInstalledViaTerminal = stressIsInstalled;
                                        } catch (IOException | InterruptedException installStressViaTerminalException) {
                                            if (isTestMode) {
                                                System.out.println("installStressViaTerminalException: " + installStressViaTerminalException);
                                            }
                                        }
                                    }
                                }
                            }

                            if (stressIsInstalled) {
                                String possibleSudo = (!adminPassword.equals("*UNKNOWN*") ? "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk " : ""); // Man pages says stress-ng can do better with sudo

                                try {
                                    Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", possibleSudo + "/usr/bin/" + (isLinuxMATE ? "mate" : "gnome") + "-system-monitor"});
                                } catch (IOException openSystemMonitorException) {
                                    if (isTestMode) {
                                        System.out.println("openSystemMonitorException: " + openSystemMonitorException);
                                    }
                                }

                                publish("running");

                                (new SwingWorker<Void, String>() {
                                    @Override
                                    protected Void doInBackground() throws Exception {
                                        do {
                                            TimeUnit.SECONDS.sleep(5);
                                            publish("progress");
                                        } while (loadingWindow.isVisible() && loadingWindow.getLoadingText().startsWith("QA Helper is Stressing CPU") && !new CommandReader(new String[]{"/usr/bin/pgrep", "stress-ng"}).getFirstOutputLine().isEmpty());

                                        return null;
                                    }

                                    @Override
                                    protected void process(java.util.List<String> tasks) {
                                        if (loadingWindow.isVisible() && loadingWindow.getLoadingText().startsWith("QA Helper is Stressing CPU")) {
                                            boolean firstUpdate = loadingWindow.isIndeterminate();

                                            loadingWindow.setLoadingProgressText(new CommandReader(new String[]{"/usr/bin/sensors"}).getOutputLinesAsString());

                                            if (firstUpdate) {
                                                loadingWindow.setLoadingProgressBarToMax((cpuStressTestDurationMinutes * 60) / 5);
                                            }

                                            loadingWindow.incrementLoadingProgressBar();
                                        }
                                    }
                                }).execute();

                                String stressReturn = new CommandReader(possibleSudo + stressPath + " -c 0 --verify -t " + cpuStressTestDurationMinutes + "m --verbose 2>&1").getOutputLinesAsString();

                                if (!stressWasInstalled) {
                                    publish("finishing");
                                    TimeUnit.SECONDS.sleep(1); // Sleep for a second to make sure the finishing progress has time to show before being closed.

                                    if (stressInstalledViaTerminal) {
                                        try {
                                            File waitForTerminalPIDtempFile = File.createTempFile("qa_helper-wait_for_terminal_pid", ".txt");
                                            waitForTerminalPIDtempFile.deleteOnExit();

                                            Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /usr/bin/" + (isLinuxMATE ? "mate" : "gnome") + "-terminal --window" + (isLinuxMATE ? "" : "-with-profile-internal-id '0'") + " --title 'QA Helper  —  Uninstalling \"stress-ng\"' --hide-menubar --geometry '80x25+0+0' -x /bin/bash -c 'orig_temp_owner=$(/usr/bin/stat -c %U " + waitForTerminalPIDtempFile.getPath() + "); /bin/chown root " + waitForTerminalPIDtempFile.getPath() + "; echo $$ > " + waitForTerminalPIDtempFile.getPath() + "; /bin/chown ${orig_temp_owner} " + waitForTerminalPIDtempFile.getPath() + "; echo \"\nUNINSTALLING \\\"stress-ng\\\"\n\n\"; /usr/local/bin/apt purge --auto-remove -y stress-ng; echo \"\n\nFINISHED UNINSTALLING \\\"stress-ng\\\"\nTHIS TERMINAL WINDOW WILL CLOSE IN 5 SECONDS - OR PRESS ENTER TO CLOSE NOW\"; read -t 5; /usr/bin/wmctrl -a \"QA Helper\"'"});

                                            String waitForTerminalPID = "";

                                            for (int i = 0; i < 10; i++) {
                                                if (waitForTerminalPIDtempFile.exists()) {
                                                    try {
                                                        List<String> waitForTerminalPIDtempFileLines = Files.readAllLines(waitForTerminalPIDtempFile.toPath());

                                                        if (!waitForTerminalPIDtempFileLines.isEmpty()) {
                                                            waitForTerminalPID = waitForTerminalPIDtempFileLines.get(0);
                                                            if (!waitForTerminalPID.isEmpty()) {
                                                                break;
                                                            }
                                                        }
                                                    } catch (IOException | IndexOutOfBoundsException getTerminalPIDException) {
                                                        if (isTestMode) {
                                                            System.out.println("getTerminalPIDException: " + getTerminalPIDException);
                                                        }
                                                    }
                                                }

                                                TimeUnit.MILLISECONDS.sleep(500);
                                            }

                                            if (waitForTerminalPIDtempFile.exists()) {
                                                waitForTerminalPIDtempFile.delete();
                                            }

                                            if (!waitForTerminalPID.isEmpty()) {
                                                while (!new CommandReader(new String[]{"/bin/ps", "-p", waitForTerminalPID, "-o", "pid="}).getFirstOutputLine().isEmpty()) {
                                                    TimeUnit.MILLISECONDS.sleep(500);
                                                }
                                            }
                                        } catch (IOException | InterruptedException uninstallStressViaTerminalException) {
                                            if (isTestMode) {
                                                System.out.println("uninstallStressViaTerminalException: " + uninstallStressViaTerminalException);
                                            }
                                        }
                                    } else {
                                        try {
                                            Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /usr/bin/apt-get purge --auto-remove -qq stress-ng"}).waitFor();
                                        } catch (IOException | InterruptedException uninstallStressException) {
                                            if (isTestMode) {
                                                System.out.println("uninstallStressException: " + uninstallStressException);
                                            }
                                        }
                                    }
                                }

                                return stressReturn;

                            } else {
                                return "install-error";
                            }
                        } else if (isMacOS) {
                            try {
                                for (int thread = 0; thread < computerSpecs.getThreadCount(); thread++) {
                                    // For some reason running exec(new String[]{"yes"}) spawns processes that don't use any CPU.
                                    // Maybe because it knows it has no interface to output to?
                                    // But, directing "yes" output to "/dev/null" makes it take full CPU as desired.
                                    Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "/usr/bin/yes > /dev/null"});
                                    TimeUnit.MILLISECONDS.sleep(100); // To allow CPU to ramp up
                                }

                                Runtime.getRuntime().exec(new String[]{"/usr/bin/caffeinate", "-dimsut", "315"}); // Make sure the computer stays awake for the duration of the CPU Stress Test

                                publish("running");

                                int secondsPassed = 0;

                                do {
                                    TimeUnit.SECONDS.sleep(5);
                                    secondsPassed += 5;

                                    publish("mac-progress");

                                } while (secondsPassed <= (cpuStressTestDurationMinutes * 60));
                            } catch (IOException | InterruptedException runYesStressTestException) {
                                if (isTestMode) {
                                    System.out.println("runYesStressTestException: " + runYesStressTestException);
                                }
                            }

                            publish("finishing");
                            TimeUnit.SECONDS.sleep(1); // Sleep for a second to make sure the finishing progress has time to show before being closed.

                            try {
                                Runtime.getRuntime().exec(new String[]{"/usr/bin/killall", "yes"});
                            } catch (IOException quitYesException) {
                                if (isTestMode) {
                                    System.out.println("quitYesException: " + quitYesException);
                                }
                            }

                            try {
                                Runtime.getRuntime().exec(new String[]{"/usr/bin/killall", "caffeinate"});
                            } catch (IOException quitCaffeinateException) {
                                if (isTestMode) {
                                    System.out.println("quitCaffeinateException: " + quitCaffeinateException);
                                }
                            }

                            return "mac-windows-done";
                        } else {
                            try {
                                Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\cmd.exe", "/c", "START /MAX " + (new File("\\Install\\Diagnostic Tools\\OpenHardwareMonitor\\OpenHardwareMonitor.exe").exists() ? "\"OpenHardwareMonitor\" \"\\Install\\Diagnostic Tools\\OpenHardwareMonitor\\OpenHardwareMonitor.exe\"" : (isWindowsPE ? "\\Windows\\System32\\Taskmgr.exe" : "\\Windows\\System32\\resmon.exe"))});
                            } catch (IOException openResourceOrTaskManagerException) {
                                if (isTestMode) {
                                    System.out.println("openResourceOrTaskManagerException: " + openResourceOrTaskManagerException);
                                }
                            }

                            try {
                                for (int thread = 0; thread < computerSpecs.getThreadCount(); thread++) {
                                    Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "While (Get-CimInstance Win32_Process -Filter \\\"Name LIKE 'java%.exe' AND CommandLine LIKE '%QA_Helper.jar%'\\\" -Property Name,CommandLine) { <# QA Helper CPU Stress Test #> }"});
                                    TimeUnit.MILLISECONDS.sleep(100); // To allow CPU to ramp up
                                }

                                publish("running");

                                int secondsPassed = 0;

                                do {
                                    TimeUnit.SECONDS.sleep(5);
                                    secondsPassed += 5;

                                    publish("windows-progress");

                                } while (secondsPassed <= (cpuStressTestDurationMinutes * 60));
                            } catch (IOException | InterruptedException runPowerShellStressTestException) {
                                if (isTestMode) {
                                    System.out.println("runPowerShellStressTestException: " + runPowerShellStressTestException);
                                }
                            }

                            publish("finishing");
                            TimeUnit.SECONDS.sleep(1); // Sleep for a second to make sure the finishing progress has time to show before being closed.

                            try {
                                Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "Get-CimInstance Win32_Process -Filter \\\"Name = 'powershell.exe' AND CommandLine LIKE '%<# QA Helper CPU Stress Test #>%'\\\" | Invoke-CimMethod -Name Terminate"}).waitFor();
                            } catch (IOException terminatePowerShellStressProcessesException) {
                                if (isTestMode) {
                                    System.out.println("terminatePowerShellStressProcessesException: " + terminatePowerShellStressProcessesException);
                                }
                            }

                            return "mac-windows-done";
                        }
                    }

                    @Override
                    protected void process(java.util.List<String> tasks) {
                        tasks.forEach((thisTask) -> {
                            switch (thisTask) {
                                case "reloaded":
                                    displayComputerSpecs();
                                    break;
                                case "running":
                                    loadingWindow.setLoadingTextAndDisplay("QA Helper is Stressing CPU for " + cpuStressTestDurationMinutes + " Minutes", "Testing", "Brain");
                                    break;
                                case "windows-progress":
                                    boolean firstWindowsUpdate = loadingWindow.isIndeterminate();

                                    // TODO: MSAcpi_ThermalZoneTemperature is not CPU but some general temp. Also not available on all computers and requires admin. Also SLOW
                                    /*
                                    String[] systemTemps = new CommandReader(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "Get-CimInstance MSAcpi_ThermalZoneTemperature -Namespace ROOT\\WMI -Property CurrentTemperature,CriticalTripPoint | Format-List CurrentTemperature,CriticalTripPoint"}).getOutputLines();

                                    String currentSystemTempInfo = "";

                                    for (String thisSystemTempLine : systemTemps) {
                                        if (thisSystemTempLine.contains(": ")) {
                                            String thisRawSystemTemp = thisSystemTempLine.substring(thisSystemTempLine.indexOf(": ") + 2).replaceAll("[^0-9.]", "");
                                            if (!thisRawSystemTemp.isEmpty() && !thisRawSystemTemp.equals(".")) {
                                                String thisSystemCelciumTemp = new DecimalFormat("#.#").format(((Double.parseDouble(thisRawSystemTemp) / 10) - 273.15)) + " C";

                                                if (thisSystemTempLine.startsWith("CurrentTemperature")) {
                                                    currentSystemTempInfo += "Current System Temperature: " + thisSystemCelciumTemp + "\n";
                                                } else if (thisSystemTempLine.startsWith("CriticalTripPoint")) {
                                                    currentSystemTempInfo += "Critical System Temperature: " + thisSystemCelciumTemp + "\n\n";
                                                }
                                            }
                                        }
                                    }

                                    if (currentSystemTempInfo.isEmpty())
                                        currentSystemTempInfo = "SYSTEM TEMPERATURES ARE NOT AVAILABLE\nFOR THIS COMPUTER";

                                    loadingWindow.setLoadingProgressText(currentSystemTempInfo);
                                     */
                                    if (firstWindowsUpdate) {
                                        loadingWindow.setLoadingProgressBarToMax((cpuStressTestDurationMinutes * 60) / 5);
                                    }

                                    loadingWindow.incrementLoadingProgressBar();
                                    break;
                                case "mac-progress":
                                    boolean firstMacUpdate = loadingWindow.isIndeterminate();

                                    String thermalLevelsOutput = new CommandReader("/usr/sbin/sysctl -a | /usr/bin/grep thermal_level").getOutputLinesAsString().replace("machdep.xcpm.", "").toUpperCase().replace("_THERMAL_LEVEL", " Thermal Level");

                                    if (!thermalLevelsOutput.isEmpty()) { // These thermal levels are not available on Apple Silcon.
                                        loadingWindow.setLoadingProgressText(thermalLevelsOutput + "\n\n\nPLEASE NOTE:\nTHESE THERMAL LEVELS ARE ARBITRARY NUMBERS PROVIDED BY THE SYSTEM, BUT THEY SHOULD LEVEL OFF AND THEN STAY STEADY THROUGHOUT THE TEST.");
                                    }

                                    if (firstMacUpdate) {
                                        loadingWindow.setLoadingProgressBarToMax((cpuStressTestDurationMinutes * 60) / 5);
                                    }

                                    loadingWindow.incrementLoadingProgressBar();
                                    break;
                                case "finishing":
                                    if (loadingWindow.isVisible()) {
                                        // Make sure to only do this if the window is still visible in case the multi-threaded timing make it so that we finish before this gets processed.
                                        loadingWindow.setLoadingTextAndDisplay("QA Helper is Finishing CPU Stress Test", "Testing", "Brain");
                                        loadingWindow.setLoadingProgressBarToMax(0);
                                        loadingWindow.setLoadingProgressText("");
                                    }
                                    break;
                                default:
                                    break;
                            }
                        });
                    }

                    @Override
                    protected void done() {
                        focusWindow();

                        try {
                            String stressReturn = get();

                            loadingWindow.closeWindow();

                            ArrayList<String> cpuStressTestCompletedButtons = new ArrayList<>(Arrays.asList("Continue", "Stress Test CPU Again"));

                            if (stressReturn.equals("install-error")) {
                                playAlertSound("error");
                                JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Failed to Install \"stress-ng\"</b><br/><br/><i>To manually install \"stress-ng\", open Terminal and run:</i><br/><pre>sudo apt install stress-ng</pre><br/>After \"stress-ng\" is installed, come back here and try again.</html>", "QA Helper  —  CPU Stress Test Error", JOptionPane.ERROR_MESSAGE);
                            } else if (stressReturn.equals("mac-windows-done")) {
                                playAlertSound("success");
                                int cpuStressTestCompletedDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html><b>CPU Stress Test Completed</b></html>", "QA Helper  —  CPU Stress Test Completed", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("Brain", qaHelperWindow).toImageIcon(32), cpuStressTestCompletedButtons.toArray(), cpuStressTestCompletedButtons.get(0));

                                String cpuStressTestCompletedDialogResponseString = "Continue";
                                if (cpuStressTestCompletedDialogResponse > -1) {
                                    cpuStressTestCompletedDialogResponseString = cpuStressTestCompletedButtons.get(cpuStressTestCompletedDialogResponse);
                                }

                                if (isWindows) {
                                    try {
                                        // taskkill does not exist in WinPE (unless it has been manually copied in) and will always exist in full Windows, no need to make it hard a requirement when I can just use PowerShell (PowerShell just takes longer so we'll still use taskkill when it's available).
                                        if (!isWindowsPE || new File("\\Windows\\System32\\taskkill.exe").exists()) {
                                            Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\taskkill.exe", "/im", (new File("\\Install\\Diagnostic Tools\\OpenHardwareMonitor\\OpenHardwareMonitor.exe").exists() ? "OpenHardwareMonitor.exe" : (isWindowsPE ? "Taskmgr.exe" : "perfmon.exe")), "/t"}).waitFor(); // Even though we launch resmon.exe the running executable is perfmon.exe
                                        } else {
                                            Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "Stop-Process -Name " + (new File("\\Install\\Diagnostic Tools\\OpenHardwareMonitor\\OpenHardwareMonitor.exe").exists() ? "OpenHardwareMonitor" : "Taskmgr")}).waitFor();
                                        }
                                    } catch (IOException | InterruptedException quitTaskManagerException) {
                                        if (isTestMode) {
                                            System.out.println("quitTaskManagerException: " + quitTaskManagerException);
                                        }
                                    }
                                }

                                if (cpuStressTestCompletedDialogResponseString.contains("Test")) {
                                    setActionsEnabled(true);
                                    btnStressCPUActionPerformed(evt);
                                } else if (!isCPUverified && btnVerifyCPU.isVisible() && btnVerifyCPU.isEnabled()) {
                                    btnVerifyCPUActionPerformed(null);
                                }
                            } else if (isLinux) {
                                String lastStressReturnLines = stressReturn.substring(stressReturn.lastIndexOf("stress-ng: info:"));
                                boolean stressPassed = (lastStressReturnLines.contains("] successful run completed in ") && (lastStressReturnLines.contains("s (" + cpuStressTestDurationMinutes + " mins") || lastStressReturnLines.contains("s (" + (cpuStressTestDurationMinutes - 1) + " mins, 59.") || lastStressReturnLines.contains(" " + cpuStressTestDurationMinutes + " mins") || lastStressReturnLines.contains(" " + (cpuStressTestDurationMinutes - 1) + " mins, 59.")));

                                JLabel cpuStressTestOutputHeaderLabel = new JLabel("<html><b>CPU Stress Test " + (stressPassed ? "Passed" : "Failed") + "</b><br/><br/></html>");
                                if (!stressPassed) {
                                    cpuStressTestOutputHeaderLabel.setForeground(errorColor);
                                }

                                JTextArea cpuTestOutputPanelTextArea = new JTextArea(30, 85);
                                cpuTestOutputPanelTextArea.setText(stressReturn.replace("[sudo] password for " + new CommandReader(new String[]{"/usr/bin/id", "-un"}).getFirstOutputLine() + ": ", ""));
                                cpuTestOutputPanelTextArea.setEditable(false);
                                cpuTestOutputPanelTextArea.setLineWrap(true);
                                cpuTestOutputPanelTextArea.setWrapStyleWord(true);
                                cpuTestOutputPanelTextArea.setFont(new Font(Font.MONOSPACED, lblVersion.getFont().getStyle(), cpuTestOutputPanelTextArea.getFont().getSize()));
                                JScrollPane cpuStressTestOutputScrollPane = new JScrollPane(cpuTestOutputPanelTextArea);

                                if (!stressPassed) {
                                    Collections.reverse(cpuStressTestCompletedButtons);
                                }

                                playAlertSound((stressPassed ? "success" : "error"));
                                focusWindow();
                                int cpuStressTestCompletedDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, new Object[]{
                                    cpuStressTestOutputHeaderLabel, cpuStressTestOutputScrollPane
                                }, "QA Helper  —  CPU Stress Test " + (stressPassed ? "Passed" : "Failed"), JOptionPane.DEFAULT_OPTION, (stressPassed ? JOptionPane.PLAIN_MESSAGE : JOptionPane.ERROR_MESSAGE), new TwemojiImage("Brain", qaHelperWindow).toImageIcon(), cpuStressTestCompletedButtons.toArray(), cpuStressTestCompletedButtons.get(0));

                                String cpuStressTestCompletedDialogResponseString = "Continue";
                                if (cpuStressTestCompletedDialogResponse > -1) {
                                    cpuStressTestCompletedDialogResponseString = cpuStressTestCompletedButtons.get(cpuStressTestCompletedDialogResponse);
                                }

                                try {
                                    Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", (!adminPassword.equals("*UNKNOWN*") ? "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk " : "") + "/usr/bin/killall " + (isLinuxMATE ? "mate" : "gnome") + "-system-monitor"});
                                } catch (IOException quitSystemMonitorException) {
                                    if (isTestMode) {
                                        System.out.println("quitSystemMonitorException: " + quitSystemMonitorException);
                                    }
                                }

                                if (cpuStressTestCompletedDialogResponseString.contains("Test")) {
                                    setActionsEnabled(true);
                                    btnStressCPUActionPerformed(evt);
                                } else if (stressPassed && !isCPUverified && btnVerifyCPU.isVisible() && btnVerifyCPU.isEnabled()) {
                                    btnVerifyCPUActionPerformed(null);
                                }
                            }
                        } catch (HeadlessException | InterruptedException | ExecutionException finishedStressException) {
                            if (isTestMode) {
                                System.out.println("finishedStressException: " + finishedStressException);
                            }
                        }

                        setActionsEnabled(true);
                    }
                }).execute();
            } else {
                setActionsEnabled(true);
                focusNextTestTaskVerifyButton(btnStressCPU);
            }
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnStressCPUActionPerformed

    private void btnVerifyCPUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifyCPUActionPerformed
        if (actionsEnabled || (evt == null)) {
            setActionsEnabled(false);

            if (JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>" + ((evt == null) ? "Would you like " : "Are you sure you want ") + "to <i>" + (isCPUverified ? "UNVERIFY" : "verify") + "</i> the CPU?</b></html>", "QA Helper  —  Confirm " + (isCPUverified ? "Unverify" : "Verify") + " CPU", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage((isCPUverified ? "CrossMark" : "CheckBoxWithCheck"), qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                isCPUverified = !isCPUverified;

                writeToHelperLogFile("Test: CPU " + (isCPUverified ? "Verified" : "UNVERIFIED"));

                btnVerifyCPU.setText((isCPUverified ? "Verified" : "Verify"));
                btnVerifyCPU.setFont(btnVerifyCPU.getFont().deriveFont((isCPUverified ? Font.BOLD : lblVersion.getFont().getStyle())));
                btnVerifyCPU.setForeground(isCPUverified ? verifiedColor : defaultColor);
                btnVerifyCPU.setBorderPainted(!isCPUverified);

                new LinuxAutoScripts("CPU " + (isCPUverified ? "Verified" : "Unverified"), adminPassword);

                focusNextTestTaskVerifyButton(btnVerifyCPU);
            } else {
                focusNextTestTaskVerifyButton(btnStressCPU);
            }

            setActionsEnabled(true);
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnVerifyCPUActionPerformed

    private void btnDriveHealthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDriveHealthActionPerformed
        if (actionsEnabled) {
            if (isLinux) {
                setActionsEnabled(false);

                String driveHealth = computerSpecs.getDriveHealth();

                if (!driveHealth.equals("N/A")) {
                    JTextArea hdSentinelOutputTextArea = new JTextArea(30, 100);
                    hdSentinelOutputTextArea.setText(computerSpecs.getDriveHealth());
                    hdSentinelOutputTextArea.setCaretPosition(0);
                    hdSentinelOutputTextArea.setEditable(false);
                    hdSentinelOutputTextArea.setLineWrap(true);
                    hdSentinelOutputTextArea.setWrapStyleWord(true);
                    hdSentinelOutputTextArea.setFont(new Font(Font.MONOSPACED, lblVersion.getFont().getStyle(), hdSentinelOutputTextArea.getFont().getSize()));
                    JScrollPane hdSentinelOutputScrollPane = new JScrollPane(hdSentinelOutputTextArea);

                    JOptionPane.showMessageDialog(qaHelperWindow, new Object[]{
                        "<html><b>Confirm Specs for Every Drive:</b><br/><br/>"
                        + "<b>Power on time</b> <i>MUST</i> be <u>LESS than 2500 days</u><br/>"
                        + "<b>Est. lifetime</b> <i>MUST</i> be <u>GREATER than 399 days</u><br/>"
                        + "The <b>description</b> <i>MUST</i> be <u>PERFECT</u><br/>"
                        + "The <b>last line</b> <i>MUST</i> be <u>No actions needed.</u><br/>"
                        + "<br/>"
                        + "</html>",
                        hdSentinelOutputScrollPane}, "QA Helper  —  Drive Health", JOptionPane.PLAIN_MESSAGE, new TwemojiImage("Hospital", qaHelperWindow).toImageIcon());

                    if (!computerSpecs.getDriveHealthWarning() && !computerSpecs.getDriveRecalled() && !isDriveHealthVerified && btnVerifyDriveHealth.isVisible() && btnVerifyDriveHealth.isEnabled()) {
                        String disksFormattedWithoutPartitionTable = computerSpecs.getDisksFormattedWithoutPartitionTable();

                        if (disksFormattedWithoutPartitionTable.isEmpty()) {
                            btnVerifyDriveHealthActionPerformed(null);
                        }
                    }
                } else {
                    playAlertSound("error");
                    JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Failed to Load Drive Health</b><br/><br/><i>Try again after reloading specs and entering admin password.</i></html>", "QA Helper  —  Drive Health Error", JOptionPane.ERROR_MESSAGE);
                    btnReloadSpecs.requestFocusInWindow();
                }

                setActionsEnabled(true);
            } else if (isWindows) {
                if (new File("\\Install\\Diagnostic Tools\\CrystalDiskInfo\\DiskInfo64.exe").exists()) {
                    try {
                        // tasklist doesn't exist in WinPE, do use PowerShell Get-Process instead
                        if ((isWindowsPE ? new CommandReader(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "(Get-Process | Where-Object Name -eq 'DiskInfo64').Name"}) : new CommandReader(new String[]{"\\Windows\\System32\\tasklist.exe", "/nh", "/fi", "IMAGENAME eq DiskInfo64.exe"})).getFirstOutputLineContaining("DiskInfo64").isEmpty()) {
                            try {
                                Runtime.getRuntime().exec(new String[]{"\\Install\\Diagnostic Tools\\CrystalDiskInfo\\DiskInfo64.exe"});
                            } catch (IOException launchDiskCheckException) { // Fallback to launching via "cmd.exe /c START" to allow elevated permissions prompt when needed when running on test systems without being in Audit mode or WinPE.
                                Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\cmd.exe", "/c", "START \"CrystalDiskInfo\" \"\\Install\\Diagnostic Tools\\CrystalDiskInfo\\DiskInfo64.exe\""});
                            }
                        } else {
                            Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "(New-Object -ComObject Wscript.Shell).AppActivate(' CrystalDiskInfo')"}); // NOTE: Window title starts with a SPACE and will have the version number at the end, but AppActivate will match the closest window with the same PREFIX (which is why the SPACE must be included).
                        }

                        if (isWindowsPE) {
                            setState(Frame.ICONIFIED);
                        } else {
                            // TODO: Make this message better
                            JOptionPane.showMessageDialog(qaHelperWindow, "<html><b><i>CrystalDiskInfo</i> will open momentarily.</b></html>", "QA Helper  —  Open CrystalDiskInfo", JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("Hospital", qaHelperWindow).toImageIcon(32));
                        }

                        if (!isDriveHealthVerified && btnVerifyDriveHealth.isVisible() && btnVerifyDriveHealth.isEnabled()) {
                            if (isWindowsPE) {
                                btnVerifyDriveHealth.requestFocusInWindow();
                            } else {
                                btnVerifyDriveHealthActionPerformed(null);
                            }
                        }
                    } catch (IOException openDiskCheckException) {
                        if (isTestMode) {
                            System.out.println("openDiskCheckException: " + openDiskCheckException);
                        }
                    }
                }
            } else if (isMacOS) {
                if (new File("/Applications/DriveDx.app").exists() || new File("/Users/fg-demo/Applications/DriveDx.app").exists()) {
                    try {
                        Runtime.getRuntime().exec(new String[]{"/usr/bin/open", "-a", (new File("/Applications/DriveDx.app").exists() ? "/Applications/DriveDx.app" : "/Users/fg-demo/Applications/DriveDx.app")});

                        // TODO: Make this message better
                        JOptionPane.showMessageDialog(qaHelperWindow, "<html><b><i>DriveDx</i> will open momentarily.</b></html>", "QA Helper  —  Open DriveDx", JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("Hospital", qaHelperWindow).toImageIcon(32));

                        if (!isDriveHealthVerified && btnVerifyDriveHealth.isVisible() && btnVerifyDriveHealth.isEnabled()) {
                            btnVerifyDriveHealthActionPerformed(null);
                        }
                    } catch (IOException openDriveDxException) {
                        if (isTestMode) {
                            System.out.println("openDriveDxException: " + openDriveDxException);
                        }
                    }
                }
            }
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnDriveHealthActionPerformed

    private void btnVerifyDriveHealthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifyDriveHealthActionPerformed
        if (actionsEnabled || (evt == null)) {
            setActionsEnabled(false);

            if (JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>" + ((evt == null) ? "Would you like " : "Are you sure you want ") + "to <i>" + (isDriveHealthVerified ? "UNVERIFY" : "verify") + "</i> the hard drive health?</b></html>", "QA Helper  —  Confirm " + (isDriveHealthVerified ? "Unverify" : "Verify") + " Hard Drive Health", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage((isDriveHealthVerified ? "CrossMark" : "CheckBoxWithCheck"), qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                isDriveHealthVerified = !isDriveHealthVerified;

                writeToHelperLogFile("Test: Drive Health " + (isDriveHealthVerified ? "Verified" : "UNVERIFIED"));

                btnVerifyDriveHealth.setText((isDriveHealthVerified ? "Verified" : "Verify"));
                btnVerifyDriveHealth.setFont(btnVerifyDriveHealth.getFont().deriveFont((isDriveHealthVerified ? Font.BOLD : lblVersion.getFont().getStyle())));
                btnVerifyDriveHealth.setForeground(isDriveHealthVerified ? verifiedColor : defaultColor);
                btnVerifyDriveHealth.setBorderPainted(!isDriveHealthVerified);

                new LinuxAutoScripts("Drive Health " + (isDriveHealthVerified ? "Verified" : "Unverified"), adminPassword);

                focusNextTestTaskVerifyButton(btnVerifyDriveHealth);
            } else {
                focusNextTestTaskVerifyButton(btnDriveHealth);
            }

            setActionsEnabled(true);
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnVerifyDriveHealthActionPerformed

    private void btnEjectDiscDriveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjectDiscDriveActionPerformed
        if (actionsEnabled) {
            setActionsEnabled(false);

            try {
                if (isLinux || isWindows) {
                    ArrayList<String> discDriveLogicalNames = computerSpecs.getDiscDriveLogicalNames();

                    for (String thisDiscDriveLogicalName : discDriveLogicalNames) {
                        if (isLinux) {
                            Runtime.getRuntime().exec(new String[]{"/usr/bin/eject", thisDiscDriveLogicalName});
                        } else {
                            Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "(New-Object -ComObject Shell.Application).NameSpace(17).ParseName('" + thisDiscDriveLogicalName + "').InvokeVerb('Eject')"});
                        }
                    }
                } else if (isMacOS) {
                    Runtime.getRuntime().exec(new String[]{"/usr/bin/drutil", "eject"}).waitFor();
                }

                if (computerSpecs.hasDiscInDiscDrive()) {
                    reload();
                }

                // TODO: Make this message better.
                JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>The disc drive should eject momentarily.</b></html>", "QA Helper  —  Disc Drive Ejected", JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("DVD", qaHelperWindow).toImageIcon(32));

                if (!isDiscDriveVerified && btnVerifyDiscDrive.isVisible() && btnVerifyDiscDrive.isEnabled()) {
                    btnVerifyDiscDriveActionPerformed(null);
                }
            } catch (IOException | InterruptedException ejectDiscException) {
                if (isTestMode) {
                    System.out.println("ejectDiscException: " + ejectDiscException);
                }

                playAlertSound("error");
                JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Failed to Perform Eject Command</b></html>", "QA Helper  —  Eject Disc Drive Error", JOptionPane.ERROR_MESSAGE);
            }

            setActionsEnabled(true);
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnEjectDiscDriveActionPerformed

    private void btnVerifyDiscDriveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifyDiscDriveActionPerformed
        if (actionsEnabled || (evt == null)) {
            setActionsEnabled(false);

            if (JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>" + ((evt == null) ? "Would you like " : "Are you sure you want ") + "to <i>" + (isDiscDriveVerified ? "UNVERIFY" : "verify") + "</i> the disc drive?</b></html>", "QA Helper  —  Confirm " + (isDiscDriveVerified ? "Unverify" : "Verify") + " Disc Drive", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage((isDiscDriveVerified ? "CrossMark" : "CheckBoxWithCheck"), qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                isDiscDriveVerified = !isDiscDriveVerified;

                boolean hasDiscDrive = !computerSpecs.getDiscDriveArray().isEmpty();

                writeToHelperLogFile("Test: " + (hasDiscDrive ? "" : "Manufactured Without ") + "Disc Drive " + (isDiscDriveVerified ? "Verified" : "UNVERIFIED"));

                btnVerifyDiscDrive.setText((isDiscDriveVerified ? "Verified" : "Verify"));
                btnVerifyDiscDrive.setFont(btnVerifyDiscDrive.getFont().deriveFont((isDiscDriveVerified ? Font.BOLD : lblVersion.getFont().getStyle())));
                btnVerifyDiscDrive.setForeground(isDiscDriveVerified ? verifiedColor : defaultColor);
                btnVerifyDiscDrive.setBorderPainted(!isDiscDriveVerified);

                new LinuxAutoScripts("Disc Drive " + (isDiscDriveVerified ? "Verified" : "Unverified"), adminPassword);

                if (!hasDiscDrive) {
                    boolean loginAndTasksWasHidden = hideLoginAndTasks;
                    if (loginAndTasksWasHidden) {
                        hideLoginAndTasks = false;
                    }

                    displayComputerSpecs();

                    if (loginAndTasksWasHidden) {
                        hideLoginAndTasks = true;
                    }
                }

                focusNextTestTaskVerifyButton(btnVerifyDiscDrive);
            } else {
                focusNextTestTaskVerifyButton(btnEjectDiscDrive);
            }

            setActionsEnabled(true);
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnVerifyDiscDriveActionPerformed

    private void btnTestInternetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestInternetActionPerformed
        if (actionsEnabled && !isWindowsPE) {
            setActionsEnabled(false);

            loadingWindow.setLoadingTextAndDisplay("QA Helper is " + (isLinux ? "Preparing to Test Internet" : "Testing Internet"), "Testing", "SatelliteAntenna");

            (new SwingWorker<String, String>() {
                @Override
                protected String doInBackground() throws Exception {
                    ArrayList<String> ethernetNetworkDeviceIDs = new ArrayList<>();
                    ArrayList<String> wiFiNetworkDeviceIDs = new ArrayList<>();

                    String osCompanySiteName = "LinuxMint.com";

                    if (isLinux) {
                        String[] allNetworkDeviceInfo = new CommandReader(new String[]{"/usr/bin/nmcli", "-f", "GENERAL.DEVICE,GENERAL.TYPE", "device", "show"}).getOutputLines();
                        String thisNetworkDeviceID = "";
                        for (String thisNetworkDeviceInfoLine : allNetworkDeviceInfo) {
                            if (thisNetworkDeviceInfoLine.startsWith("GENERAL.DEVICE:")) {
                                thisNetworkDeviceID = thisNetworkDeviceInfoLine.substring(thisNetworkDeviceInfoLine.indexOf(":") + 1).trim();
                            } else if (thisNetworkDeviceInfoLine.startsWith("GENERAL.TYPE:")) {
                                String thisNetworkDeviceType = thisNetworkDeviceInfoLine.substring(thisNetworkDeviceInfoLine.indexOf(":") + 1).trim();
                                if (thisNetworkDeviceType.equals("wifi")) {
                                    wiFiNetworkDeviceIDs.add(thisNetworkDeviceID);
                                } else if (thisNetworkDeviceType.equals("ethernet")) {
                                    ethernetNetworkDeviceIDs.add(thisNetworkDeviceID);
                                }
                            }
                        }
                    } else if (isMacOS) {
                        osCompanySiteName = "Apple.com";

                        String[] allNetworkInterfaces = new CommandReader(new String[]{"/usr/sbin/networksetup", "-listallhardwareports"}).getOutputLines();

                        String thisNetworkDeviceName = "";
                        for (String thisNetworkInterfaceLine : allNetworkInterfaces) {
                            if (thisNetworkInterfaceLine.startsWith("Hardware Port:")) {
                                thisNetworkDeviceName = thisNetworkInterfaceLine.substring(thisNetworkInterfaceLine.indexOf(": ") + 2);
                            } else if (thisNetworkInterfaceLine.startsWith("Device:")) {
                                String thisNetworkDeviceID = thisNetworkInterfaceLine.substring(thisNetworkInterfaceLine.indexOf(": ") + 2);

                                if (thisNetworkDeviceName.contains("Wi-Fi")) {
                                    wiFiNetworkDeviceIDs.add(thisNetworkDeviceID);
                                } else if (thisNetworkDeviceName.contains("Ethernet") || thisNetworkDeviceName.contains(" LAN")) {
                                    ethernetNetworkDeviceIDs.add(thisNetworkDeviceID);
                                }
                            }
                        }
                    } else if (isWindows) {
                        osCompanySiteName = "Microsoft.com";

                        String[] allNetworkInterfaces = new CommandReader(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "Get-NetAdapter -Physical | Format-List Name,PhysicalMediaType"}).getOutputLines();

                        String thisNetworkDeviceName = "";
                        for (String thisNetworkInterfaceLine : allNetworkInterfaces) {
                            if (thisNetworkInterfaceLine.startsWith("Name")) {
                                thisNetworkDeviceName = thisNetworkInterfaceLine.substring(thisNetworkInterfaceLine.indexOf(": ") + 2);
                            } else if (thisNetworkInterfaceLine.startsWith("PhysicalMediaType")) {
                                String thisNetworkPhysicalMediaType = thisNetworkInterfaceLine.substring(thisNetworkInterfaceLine.indexOf(": ") + 2);

                                if (thisNetworkPhysicalMediaType.equals("802.3")) {
                                    ethernetNetworkDeviceIDs.add(thisNetworkDeviceName);
                                } else if (thisNetworkPhysicalMediaType.equals("Native 802.11")) {
                                    wiFiNetworkDeviceIDs.add(thisNetworkDeviceName);
                                }
                            }
                        }
                    }

                    boolean hasEthernetPort = !ethernetNetworkDeviceIDs.isEmpty();
                    boolean ethernetCableConnected = false;
                    boolean connectedToCompanySiteViaEthernet = false;
                    boolean connectedToGoogleViaEthernet = false;
                    boolean ethernetTestPassed = false;
                    boolean ethernetTestSkipped = false;

                    boolean hasWiFiCard = !wiFiNetworkDeviceIDs.isEmpty();
                    boolean wiFiIsOff = true;
                    int numberOfWiFiNetworksDetected = 0;
                    String connectedWiFiNetworkName = "";
                    boolean connectedToCompanySiteViaWiFi = false;
                    boolean connectedToGoogleViaWiFi = false;
                    boolean wiFiTestPassed = false;
                    boolean wiFiTestSkipped = false;

                    do {
                        if (hasEthernetPort && !ethernetTestPassed && !ethernetTestSkipped) {
                            publish("ethernet");

                            for (;;) {
                                for (;;) {
                                    if (isLinux) {
                                        if (!isLinuxBootedFromNetwork) {
                                            ethernetNetworkDeviceIDs.forEach((thisEthernetNetworkDeviceID) -> {
                                                if (!new CommandReader(new String[]{"/usr/bin/nmcli", "device", "status"}).getFirstOutputLineContaining(thisEthernetNetworkDeviceID).contains(" connected ")) {
                                                    try {
                                                        Runtime.getRuntime().exec(new String[]{"/usr/bin/nmcli", "device", "connect", thisEthernetNetworkDeviceID}).waitFor();
                                                    } catch (IOException | InterruptedException turnOnEthernetException) {
                                                        if (isTestMode) {
                                                            System.out.println("turnOnEthernetException: " + turnOnEthernetException);
                                                        }
                                                    }
                                                }
                                            });
                                        }
                                    } else if (isWindows) {
                                        ethernetNetworkDeviceIDs.forEach((thisEthernetNetworkDeviceID) -> {
                                            try {
                                                Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "Enable-NetAdapter '" + thisEthernetNetworkDeviceID + "'"}).waitFor();
                                            } catch (IOException | InterruptedException enableEthernetAdapterException) {
                                                if (isTestMode) {
                                                    System.out.println("enableEthernetAdapterException: " + enableEthernetAdapterException);
                                                }
                                            }
                                        });
                                    }

                                    for (String thisEthernetNetworkDeviceID : ethernetNetworkDeviceIDs) {
                                        if (isLinux) {
                                            if (new File("/sys/class/net/" + thisEthernetNetworkDeviceID + "/carrier").exists()) {
                                                try {
                                                    List<String> networkDeviceLines = Files.readAllLines(Paths.get("/sys/class/net/" + thisEthernetNetworkDeviceID + "/carrier"));
                                                    if (!networkDeviceLines.isEmpty()) {
                                                        ethernetCableConnected = networkDeviceLines.get(0).equals("1");
                                                    }
                                                } catch (IOException checkEthernetCableConnectedException) {
                                                    if (isTestMode) {
                                                        System.out.println("checkEthernetCableConnectedException: " + checkEthernetCableConnectedException);
                                                    }
                                                }
                                            }
                                        } else {
                                            ethernetCableConnected = (isWindows
                                                    ? !new CommandReader(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "(Get-NetAdapter '" + thisEthernetNetworkDeviceID + "').Status"}).getFirstOutputLine().equals("Disconnected")
                                                    : !new CommandReader(new String[]{"/usr/sbin/ipconfig", "getifaddr", thisEthernetNetworkDeviceID}).getFirstOutputLine().isEmpty());
                                        }

                                        if (ethernetCableConnected) {
                                            break;
                                        }
                                    }

                                    if (!ethernetCableConnected && isMacOS && computerSpecs.getFullCPU().startsWith("Apple") && deviceTypeIsLaptop) {
                                        // Apple Silicon Mac laptops always show multiple Ethernet ports even though there are no built-in physical Ethernet ports on any Apple Silicon Mac laptops (only Apple Silicon desktops, and it's even optional on iMacs but not worrying about that right now).
                                        // So, ignore Ethernet test if testing Apple Silicon Mac laptop an no Ethernet is connected, but if Ethernet is connected with adapter, go ahead and test it anyways.
                                        hasEthernetPort = false;
                                        break;
                                    }

                                    if (ethernetCableConnected || (hasWiFiCard && !wiFiTestPassed && !wiFiTestSkipped)) {
                                        // Do Wi-Fi test first if Ethernet is not connected.
                                        break;
                                    } else {
                                        loadingWindow.setAlwaysOnTop(false);
                                        playAlertSound("error");
                                        String[] plugInEthernetDialogButtons = new String[]{"Test Ethernet Again", "Skip Ethernet Test"};
                                        ethernetTestSkipped = (JOptionPane.showOptionDialog(qaHelperWindow, "<html>"
                                                + new TwemojiImage("Prohibited", qaHelperWindow).toImgTag("left") + " <b>No Ethernet Cable Detected</b>"
                                                + "<br/><br/>"
                                                + new TwemojiImage("ElectricPlug", qaHelperWindow).toImgTag("left") + " <i><u>PLUG IN</u> an Ethernet cable and then click \"Test Ethernet Again\".</i>"
                                                + "<br/><br/>"
                                                + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("left") + " If an Ethernet cable is plugged in and is not detected after multiple<br/>"
                                                + new TwemojiImage("Blank", qaHelperWindow).toImgTag("left") + " attempts, click \"Skip Ethernet Test\" and <u>CONSULT AN INSTRUCTOR</u>."
                                                + "</html>", "QA Helper  —  No Ethernet Cable Detected", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, new TwemojiImage("SatelliteAntenna", qaHelperWindow).toImageIcon(32), plugInEthernetDialogButtons, plugInEthernetDialogButtons[0]) != JOptionPane.YES_OPTION);
                                        loadingWindow.setAlwaysOnTop(true);

                                        if (ethernetTestSkipped) {
                                            break;
                                        } else {
                                            TimeUnit.SECONDS.sleep(2);
                                        }
                                    }
                                }

                                if (!ethernetCableConnected) {
                                    break;
                                }

                                for (String thisEthernetNetworkDeviceID : ethernetNetworkDeviceIDs) {
                                    for (int ethernetTestAttempt = 0; ethernetTestAttempt < 5; ethernetTestAttempt++) {
                                        String thisWindowsEthernetNetworkDeviceIP = (isWindows ? new CommandReader(new String[]{"\\Windows\\System32\\netsh.exe", "interface", "ipv4", "show", "addresses", thisEthernetNetworkDeviceID}).getFirstOutputLineContaining("IP Address:").replace("IP Address:", "").trim() : "");

                                        // Can't only check for "Sent = 1, Received = 1" from ping on Windows because "Destination host unreachable" error will show no packet loss.
                                        connectedToCompanySiteViaEthernet = (new CommandReader((isLinux ? new String[]{"/bin/ping", "-I", thisEthernetNetworkDeviceID, "-W", "2", "-c", "1", "www." + osCompanySiteName}
                                                : (isWindows ? new String[]{"\\Windows\\System32\\PING.EXE", "-S", thisWindowsEthernetNetworkDeviceIP, "-w", "2", "-n", "1", "www." + osCompanySiteName}
                                                : new String[]{"/sbin/ping", "-b", thisEthernetNetworkDeviceID, "-t", "2", "-c", "1", "www." + osCompanySiteName}))).getOutputLinesContaining((isWindows ? new String[]{"TTL=", "Sent = 1, Received = 1", "round trip times"} : new String[]{"ttl=", "1 packets transmitted, 1 ", "min/avg/max"})).length == 3);

                                        connectedToGoogleViaEthernet = (new CommandReader((isLinux ? new String[]{"/bin/ping", "-I", thisEthernetNetworkDeviceID, "-W", "2", "-c", "1", "www.google.com"}
                                                : (isWindows ? new String[]{"\\Windows\\System32\\PING.EXE", "-S", thisWindowsEthernetNetworkDeviceIP, "-w", "2", "-n", "1", "www.google.com"}
                                                : new String[]{"/sbin/ping", "-b", thisEthernetNetworkDeviceID, "-t", "2", "-c", "1", "www.google.com"}))).getOutputLinesContaining((isWindows ? new String[]{"TTL=", "Sent = 1, Received = 1", "round trip times"} : new String[]{"ttl=", "1 packets transmitted, 1 ", "min/avg/max"})).length == 3);

                                        if (connectedToCompanySiteViaEthernet || connectedToGoogleViaEthernet) {
                                            ethernetTestPassed = true;
                                            break;
                                        } else {
                                            TimeUnit.SECONDS.sleep(1);
                                        }
                                    }

                                    if (ethernetTestPassed) {
                                        break;
                                    }
                                }

                                if (ethernetTestPassed) {
                                    break;
                                } else {
                                    loadingWindow.setAlwaysOnTop(false);
                                    playAlertSound("error");
                                    String[] failedViaEthernetDialogButtons = new String[]{"Test Ethernet Again", "Skip Ethernet Test"};
                                    ethernetTestSkipped = (JOptionPane.showOptionDialog(qaHelperWindow, "<html>"
                                            + new TwemojiImage("CrossMark", qaHelperWindow).toImgTag("left") + " <b>Failed to Connect to the Internet via Ethernet</b>"
                                            + "<br/><br/>"
                                            + new TwemojiImage("Locked", qaHelperWindow).toImgTag("left") + " <i>Make sure the Ethernet cable is <u>SECURELY CONNECTED</u> or connect<br/>"
                                            + new TwemojiImage("Blank", qaHelperWindow).toImgTag("left") + " a <u>DIFFERENT</u> Ethernet cable and then click \"Test Ethernet Again\".</i>"
                                            + "<br/><br/>"
                                            + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("left") + " If the Ethernet cable is securely connected and this test fails after multiple<br/>"
                                            + new TwemojiImage("Blank", qaHelperWindow).toImgTag("left") + " attempts, click \"Skip Ethernet Test\" and <u>CONSULT AN INSTRUCTOR</u>."
                                            + "</html>", "QA Helper  —  Failed to Connect via Ethernet", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, new TwemojiImage("SatelliteAntenna", qaHelperWindow).toImageIcon(32), failedViaEthernetDialogButtons, failedViaEthernetDialogButtons[0]) != JOptionPane.YES_OPTION);
                                    loadingWindow.setAlwaysOnTop(true);

                                    if (ethernetTestSkipped) {
                                        break;
                                    } else {
                                        TimeUnit.SECONDS.sleep(2);
                                    }
                                }
                            }
                        }

                        if (hasWiFiCard && !wiFiTestPassed && !wiFiTestSkipped) {
                            publish("wifi");

                            for (;;) {
                                for (;;) {
                                    if (isLinux) {
                                        wiFiIsOff = new CommandReader(new String[]{"/usr/bin/nmcli", "radio", "wifi"}).getFirstOutputLine().equals("disabled");

                                        if (wiFiIsOff) {
                                            try {
                                                Runtime.getRuntime().exec(new String[]{"/usr/sbin/rfkill", "unblock", "all"}).waitFor();
                                            } catch (IOException | InterruptedException rfkillUnblockException) {
                                                if (isTestMode) {
                                                    System.out.println("rfkillUnblockException: " + rfkillUnblockException);
                                                }
                                            }

                                            try {
                                                Runtime.getRuntime().exec(new String[]{"/usr/bin/nmcli", "radio", "all", "on"}).waitFor();
                                                wiFiIsOff = new CommandReader(new String[]{"/usr/bin/nmcli", "radio", "wifi"}).getFirstOutputLine().equals("disabled");
                                            } catch (IOException | InterruptedException turnOnWiFiException) {
                                                if (isTestMode) {
                                                    System.out.println("turnOnWiFiException: " + turnOnWiFiException);
                                                }
                                            }
                                        }

                                        if (!isLinuxBootedFromNetwork && !wiFiIsOff && hasEthernetPort) {
                                            // Only disable Ethernet when Wi-Fi actually got enabled.
                                            // This fixes an issue where Ethernet could stay disabled after the test on some computers that don't allow Wi-Fi to get enabled while an Ethernet cable is plugged in.
                                            ethernetNetworkDeviceIDs.forEach((thisEthernetNetworkDeviceID) -> {
                                                if (new CommandReader(new String[]{"/usr/bin/nmcli", "device", "status"}).getFirstOutputLineContaining(thisEthernetNetworkDeviceID).contains(" connected ")) {
                                                    try {
                                                        Runtime.getRuntime().exec(new String[]{"/usr/bin/nmcli", "device", "disconnect", thisEthernetNetworkDeviceID}).waitFor();
                                                    } catch (IOException | InterruptedException turnOffEthernetException) {
                                                        if (isTestMode) {
                                                            System.out.println("turnOffEthernetException: " + turnOffEthernetException);
                                                        }
                                                    }
                                                }
                                            });
                                        }
                                    } else if (isMacOS) {
                                        for (String thisWiFiNetworkDeviceID : wiFiNetworkDeviceIDs) {
                                            wiFiIsOff = new CommandReader(new String[]{"/usr/sbin/networksetup", "-getairportpower", thisWiFiNetworkDeviceID}).getFirstOutputLine().endsWith("): Off");

                                            if (wiFiIsOff) {
                                                try {
                                                    Runtime.getRuntime().exec(new String[]{"/usr/sbin/networksetup", "-setairportpower", thisWiFiNetworkDeviceID, "on"}).waitFor();
                                                    wiFiIsOff = new CommandReader(new String[]{"/usr/sbin/networksetup", "-getairportpower", thisWiFiNetworkDeviceID}).getFirstOutputLine().endsWith("): Off");
                                                } catch (IOException | InterruptedException turnOnWiFiException) {
                                                    if (isTestMode) {
                                                        System.out.println("turnOnWiFiException: " + turnOnWiFiException);
                                                    }
                                                }
                                            }

                                            if (!wiFiIsOff) {
                                                break;
                                            }
                                        }
                                    } else if (isWindows) {
                                        wiFiIsOff = !new CommandReader(new String[]{"\\Windows\\System32\\netsh.exe", "wlan", "show", "interfaces"}).getFirstOutputLineContaining("ware Off").isEmpty();

                                        if (wiFiIsOff) {
                                            wiFiNetworkDeviceIDs.forEach(thisWiFiNetworkDeviceID -> {
                                                try {
                                                    Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "Enable-NetAdapter '" + thisWiFiNetworkDeviceID + "'"}).waitFor();
                                                } catch (IOException | InterruptedException enableWiFiAdapterException) {
                                                    if (isTestMode) {
                                                        System.out.println("enableWiFiAdapterException: " + enableWiFiAdapterException);
                                                    }
                                                }
                                            });
                                        }
                                    }

                                    if (wiFiIsOff) {
                                        loadingWindow.setAlwaysOnTop(false);
                                        playAlertSound("error");
                                        String[] turnOnWiFiDialogButtons = new String[]{"Test Wi-Fi Again", "Skip Wi-Fi Test"};
                                        wiFiTestSkipped = (JOptionPane.showOptionDialog(qaHelperWindow, "<html>"
                                                + new TwemojiImage("Prohibited", qaHelperWindow).toImgTag("left") + " <b>Wi-Fi is DISABLED</b>"
                                                + "<br/><br/>"
                                                + new TwemojiImage("IndexPointingUp", qaHelperWindow).toImgTag("left") + " <i>Manually <u>TURN ON</u> any Wi-Fi switches, buttons, or software settings and then click \"Test Wi-Fi Again\"."
                                                + "<br/><br/>"
                                                + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " If all Wi-Fi switches, buttons, and software settings are turned on,<br/>"
                                                + (isLinuxBootedFromNetwork
                                                        ? new TwemojiImage("Blank", qaHelperWindow).toImgTag("left") + " you <u>MAY NOT BE ABLE TO TEST Wi-Fi</u> since you are currently booted via Ethernet."
                                                        + "<br/><br/>"
                                                        + new TwemojiImage("Prohibited", qaHelperWindow).toImgTag("left") + " <u>DO NOT DISCONNECT</u> the Ethernet cable since that will freeze this computer and you will need to reboot."
                                                        : new TwemojiImage("Blank", qaHelperWindow).toImgTag("left") + " <u>DISCONNECT</u> the Ethernet cable and then click \"Test Wi-Fi Again\".")
                                                + "</i>"
                                                + "<br/><br/>"
                                                + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("left") + " If all Wi-Fi switches, buttons, and software settings are turned on "
                                                + (isLinuxBootedFromNetwork
                                                        ? "and this test fails after multiple attempts,<br/>"
                                                        + new TwemojiImage("Blank", qaHelperWindow).toImgTag("left") + " click \"Skip Wi-Fi Test\" and then test Wi-Fi again after you're booted into the installed OS."
                                                        : "and the Ethernet cable is disconnected and<br/>"
                                                        + new TwemojiImage("Blank", qaHelperWindow).toImgTag("left") + " this test fails after multiple attempts, click \"Skip Wi-Fi Test\" and <u>CONSULT AN INSTRUCTOR</u>.")
                                                + "</html>", "QA Helper  —  Wi-Fi Disabled", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, new TwemojiImage("SatelliteAntenna", qaHelperWindow).toImageIcon(32), turnOnWiFiDialogButtons, turnOnWiFiDialogButtons[0]) != JOptionPane.YES_OPTION);
                                        loadingWindow.setAlwaysOnTop(true);

                                        if (wiFiTestSkipped) {
                                            break;
                                        } else {
                                            TimeUnit.SECONDS.sleep(2);
                                        }
                                    } else {
                                        break;
                                    }
                                }

                                if (wiFiIsOff) {
                                    break;
                                }

                                String[] wiFiNetworks = new String[0];
                                numberOfWiFiNetworksDetected = 0;

                                for (int detectWiFiNetworksAttempt = 0; detectWiFiNetworksAttempt < 5; detectWiFiNetworksAttempt++) {
                                    wiFiNetworks = (isLinux
                                            ? new CommandReader(new String[]{"/usr/bin/nmcli", "device", "wifi", "list"}).getOutputLines()
                                            : (isWindows
                                                    ? new CommandReader(new String[]{"\\Windows\\System32\\netsh.exe", "wlan", "show", "networks"}).getOutputLinesContaining("SSID ")
                                                    : new CommandReader(new String[]{"/usr/bin/osascript", "-l", "JavaScript", "-e", "ObjC.import('CoreWLAN'); $.CWWiFiClient.sharedWiFiClient.interface.scanForNetworksWithNameError($(), $()).allObjects.js.map(function(thisCWNetwork) { return (thisCWNetwork.supportsSecurity($.kCWSecurityNone) ? 'Open' : 'Closed') + '\\t' + thisCWNetwork.ssid.js }).join('\\n')"}).getOutputLines())); // "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -s" was DEPRECATED on macOS 14.4 (and the output totally removed even though the command still exists), so get Wi-Fi networks via JXA-ObjC bridge instead (NOTE: DO NOT use arrow function expression in map() to retain macOS 10.11 El Captian support).

                                    numberOfWiFiNetworksDetected = (wiFiNetworks.length - (isLinux ? 1 : 0));
                                    if (numberOfWiFiNetworksDetected < 0) {
                                        numberOfWiFiNetworksDetected = 0;
                                    }

                                    if (numberOfWiFiNetworksDetected > 3) {
                                        break;
                                    }

                                    TimeUnit.SECONDS.sleep(2); // Wait to see if we can get more wifi networks on another attempt
                                }

                                connectedWiFiNetworkName = "";

                                if (isLinux) {
                                    for (String thisWiFiNetworkLine : wiFiNetworks) {
                                        if (thisWiFiNetworkLine.startsWith("*") && thisWiFiNetworkLine.contains(" Infra ")) {
                                            String thisWiFiNetworkName = thisWiFiNetworkLine.substring(1, thisWiFiNetworkLine.indexOf(" Infra ")).trim();
                                            if (!thisWiFiNetworkName.endsWith("--")) {
                                                if (wiFiNetworks[0].replaceAll("\\s{2,}", " ").contains(" BSSID SSID ")) {
                                                    thisWiFiNetworkName = thisWiFiNetworkName.substring(17).trim();
                                                }
                                                connectedWiFiNetworkName = thisWiFiNetworkName;
                                                break;
                                            }
                                        }
                                    }
                                } else if (isMacOS) {
                                    for (String thisWiFiNetworkDeviceID : wiFiNetworkDeviceIDs) {
                                        String connectedWiFiNetworkStatus = new CommandReader(new String[]{"/usr/sbin/networksetup", "-getairportnetwork", thisWiFiNetworkDeviceID}).getFirstOutputLine();
                                        if (connectedWiFiNetworkStatus.startsWith("Current Wi-Fi Network: ")) {
                                            connectedWiFiNetworkName = connectedWiFiNetworkStatus.substring(connectedWiFiNetworkStatus.indexOf(": ") + 2);
                                            break;
                                        } else if (connectedWiFiNetworkStatus.equals("You are not associated with an AirPort network.")) { // "networksetup -getairportnetwork" always returns "You are not associated with an AirPort network." on macOS 15 Sequoia (presuably because of privacy reasons), but the current Wi-Fi network is still available from "system_profiler SPAirPortDataType"
                                            connectedWiFiNetworkName = new CommandReader(new String[]{"/bin/bash", "-c", "/usr/libexec/PlistBuddy -c 'Print :0:_items:0:spairport_airport_interfaces:0:spairport_current_network_information:_name' /dev/stdin <<< \"$(/usr/sbin/system_profiler -xml SPAirPortDataType)\" 2> /dev/null"}).getFirstOutputLine();
                                            if (!connectedWiFiNetworkName.isEmpty()) {
                                                break;
                                            }
                                        }
                                    }
                                } else if (isWindows) {
                                    String connectedSSID = new CommandReader(new String[]{"\\Windows\\System32\\netsh.exe", "wlan", "show", "interfaces"}).getFirstOutputLineContaining("SSID");
                                    if (!connectedSSID.isEmpty()) {
                                        connectedWiFiNetworkName = connectedSSID.substring(connectedSSID.indexOf(": ") + 2);
                                    }
                                }

                                if (connectedWiFiNetworkName.isEmpty()) {
                                    boolean attemptedToConnectToWiFiNetwork = false;

                                    if (isLinux) {
                                        if (String.join("\n", wiFiNetworks).contains(" " + privateStrings.getFreeGeekWiFiName() + " ")) {
                                            try {
                                                Runtime.getRuntime().exec(new String[]{"/usr/bin/nmcli", "device", "wifi", "connect", privateStrings.getFreeGeekWiFiName(), "password", privateStrings.getFreeGeekWiFiPassword()}).waitFor();
                                                attemptedToConnectToWiFiNetwork = true;
                                            } catch (IOException | InterruptedException connectToFreeGeekWiFiNetworkException) {
                                                if (isTestMode) {
                                                    System.out.println("connectToFreeGeekWiFiNetworkException: " + connectToFreeGeekWiFiNetworkException);
                                                }
                                            }
                                        }

                                        if (!attemptedToConnectToWiFiNetwork) {
                                            for (String thisWiFiNetworkLine : wiFiNetworks) {
                                                if (thisWiFiNetworkLine.contains(" Infra ") && thisWiFiNetworkLine.trim().endsWith("--")) {
                                                    String thisWiFiNetworkName = thisWiFiNetworkLine.substring(0, thisWiFiNetworkLine.indexOf(" Infra ")).trim();
                                                    if (!thisWiFiNetworkName.endsWith("--")) {
                                                        if (wiFiNetworks[0].replaceAll("\\s{2,}", " ").contains(" BSSID SSID ")) {
                                                            thisWiFiNetworkName = thisWiFiNetworkName.substring(17).trim();
                                                        }

                                                        try {
                                                            Runtime.getRuntime().exec(new String[]{"/usr/bin/nmcli", "device", "wifi", "connect", thisWiFiNetworkName}).waitFor();
                                                            attemptedToConnectToWiFiNetwork = true;
                                                            break;
                                                        } catch (IOException | InterruptedException connectToWiFiNetworkException) {
                                                            if (isTestMode) {
                                                                System.out.println("connectToWiFiNetworkException: " + connectToWiFiNetworkException);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else if (isMacOS) {
                                        if ((String.join("\n", wiFiNetworks) + "\n").contains("\t" + privateStrings.getFreeGeekWiFiName() + "\n")) {
                                            for (String thisWiFiNetworkDeviceID : wiFiNetworkDeviceIDs) {
                                                try {
                                                    Runtime.getRuntime().exec(new String[]{"/usr/sbin/networksetup", "-setairportnetwork", thisWiFiNetworkDeviceID, privateStrings.getFreeGeekWiFiName(), privateStrings.getFreeGeekWiFiPassword()}).waitFor();
                                                    attemptedToConnectToWiFiNetwork = true;
                                                } catch (IOException | InterruptedException connectToFreeGeekWiFiNetworkException) {
                                                    if (isTestMode) {
                                                        System.out.println("connectToFreeGeekWiFiNetworkException: " + connectToFreeGeekWiFiNetworkException);
                                                    }
                                                }
                                            }
                                        }

                                        if (!attemptedToConnectToWiFiNetwork) {
                                            for (String thisWiFiNetworkLine : wiFiNetworks) {
                                                if (thisWiFiNetworkLine.startsWith("Open\t")) {
                                                    String thisWiFiNetworkName = thisWiFiNetworkLine.substring(thisWiFiNetworkLine.indexOf("\t") + 1);

                                                    for (String thisWiFiNetworkDeviceID : wiFiNetworkDeviceIDs) {
                                                        try {
                                                            Runtime.getRuntime().exec(new String[]{"/usr/sbin/networksetup", "-setairportnetwork", thisWiFiNetworkDeviceID, thisWiFiNetworkName}).waitFor();
                                                            attemptedToConnectToWiFiNetwork = true;
                                                        } catch (IOException | InterruptedException connectToWiFiNetworkException) {
                                                            if (isTestMode) {
                                                                System.out.println("connectToWiFiNetworkException: " + connectToWiFiNetworkException);
                                                            }
                                                        }
                                                    }

                                                    if (attemptedToConnectToWiFiNetwork) {
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    } else if (isWindows) {
                                        // TODO: Can I connect to a Wi-Fi network on Windows? Need to create a profile?
                                    }

                                    if (attemptedToConnectToWiFiNetwork) {
                                        if (isLinux) {
                                            wiFiNetworks = new CommandReader(new String[]{"/usr/bin/nmcli", "device", "wifi", "list"}).getOutputLines();
                                            numberOfWiFiNetworksDetected = (wiFiNetworks.length - 1);

                                            for (String thisWiFiNetworkLine : wiFiNetworks) {
                                                if (thisWiFiNetworkLine.startsWith("*") && thisWiFiNetworkLine.contains(" Infra ")) {
                                                    String thisWiFiNetworkName = thisWiFiNetworkLine.substring(1, thisWiFiNetworkLine.indexOf(" Infra ")).trim();
                                                    if (!thisWiFiNetworkName.endsWith("--")) {
                                                        if (wiFiNetworks[0].replaceAll("\\s{2,}", " ").contains(" BSSID SSID ")) {
                                                            thisWiFiNetworkName = thisWiFiNetworkName.substring(17).trim();
                                                        }
                                                        connectedWiFiNetworkName = thisWiFiNetworkName;
                                                        break;
                                                    }
                                                }
                                            }
                                        } else if (isMacOS) {
                                            for (String thisWiFiNetworkDeviceID : wiFiNetworkDeviceIDs) {
                                                String connectedWiFiNetworkStatus = new CommandReader(new String[]{"/usr/sbin/networksetup", "-getairportnetwork", thisWiFiNetworkDeviceID}).getFirstOutputLine();
                                                if (connectedWiFiNetworkStatus.startsWith("Current Wi-Fi Network: ")) {
                                                    connectedWiFiNetworkName = connectedWiFiNetworkStatus.substring(connectedWiFiNetworkStatus.indexOf(": ") + 2);
                                                    break;
                                                } else if (connectedWiFiNetworkStatus.equals("You are not associated with an AirPort network.")) { // "networksetup -getairportnetwork" always returns "You are not associated with an AirPort network." on macOS 15 Sequoia (presuably because of privacy reasons), but the current Wi-Fi network is still available from "system_profiler SPAirPortDataType"
                                                    connectedWiFiNetworkName = new CommandReader(new String[]{"/bin/bash", "-c", "/usr/libexec/PlistBuddy -c 'Print :0:_items:0:spairport_airport_interfaces:0:spairport_current_network_information:_name' /dev/stdin <<< \"$(/usr/sbin/system_profiler -xml SPAirPortDataType)\" 2> /dev/null"}).getFirstOutputLine();
                                                    if (!connectedWiFiNetworkName.isEmpty()) {
                                                        break;
                                                    }
                                                }
                                            }

                                            if (!connectedWiFiNetworkName.isEmpty()) {
                                                boolean gotWiFiIP = false;
                                                for (int getIPaddressAttempt = 0; getIPaddressAttempt < 5; getIPaddressAttempt++) {
                                                    for (String thisWiFiNetworkDeviceID : wiFiNetworkDeviceIDs) {
                                                        if (new CommandReader(new String[]{"/usr/sbin/ipconfig", "getifaddr", thisWiFiNetworkDeviceID}).getFirstOutputLine().isEmpty()) {
                                                            TimeUnit.SECONDS.sleep(2); // Wait for Wi-Fi to connect
                                                        } else {
                                                            gotWiFiIP = true;
                                                            break;
                                                        }
                                                    }

                                                    if (gotWiFiIP) {
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                if (!connectedWiFiNetworkName.isEmpty()) {
                                    for (int wiFiTestAttempt = 0; wiFiTestAttempt < 5; wiFiTestAttempt++) {
                                        for (String thisWiFiNetworkDeviceID : wiFiNetworkDeviceIDs) {
                                            String thisWindowsWiFiNetworkDeviceIP = (isWindows ? new CommandReader(new String[]{"\\Windows\\System32\\netsh.exe", "interface", "ipv4", "show", "addresses", thisWiFiNetworkDeviceID}).getFirstOutputLineContaining("IP Address:").replace("IP Address:", "").trim() : "");

                                            // Can't only check for "Sent = 1, Received = 1" from ping on Windows because "Destination host unreachable" error will show no packet loss.
                                            connectedToCompanySiteViaWiFi = (new CommandReader((isLinux ? new String[]{"/bin/ping", "-I", thisWiFiNetworkDeviceID, "-W", "2", "-c", "1", "www." + osCompanySiteName}
                                                    : (isWindows ? new String[]{"\\Windows\\System32\\PING.EXE", "-S", thisWindowsWiFiNetworkDeviceIP, "-w", "2", "-n", "1", "www." + osCompanySiteName}
                                                    : new String[]{"/sbin/ping", "-b", thisWiFiNetworkDeviceID, "-t", "2", "-c", "1", "www." + osCompanySiteName}))).getOutputLinesContaining((isWindows ? new String[]{"TTL=", "Sent = 1, Received = 1", "round trip times"} : new String[]{"ttl=", "1 packets transmitted, 1 ", "min/avg/max"})).length == 3);

                                            connectedToGoogleViaWiFi = (new CommandReader((isLinux ? new String[]{"/bin/ping", "-I", thisWiFiNetworkDeviceID, "-W", "2", "-c", "1", "www.google.com"}
                                                    : (isWindows ? new String[]{"\\Windows\\System32\\PING.EXE", "-S", thisWindowsWiFiNetworkDeviceIP, "-w", "2", "-n", "1", "www.google.com"}
                                                    : new String[]{"/sbin/ping", "-b", thisWiFiNetworkDeviceID, "-t", "2", "-c", "1", "www.google.com"}))).getOutputLinesContaining((isWindows ? new String[]{"TTL=", "Sent = 1, Received = 1", "round trip times"} : new String[]{"ttl=", "1 packets transmitted, 1 ", "min/avg/max"})).length == 3);

                                            if (connectedToCompanySiteViaWiFi || connectedToGoogleViaWiFi) {
                                                wiFiTestPassed = true;
                                                break;
                                            } else {
                                                TimeUnit.SECONDS.sleep(1);
                                            }
                                        }

                                        if (wiFiTestPassed) {
                                            break;
                                        }
                                    }
                                }

                                if (isWindows && !wiFiTestPassed && connectedWiFiNetworkName.isEmpty() && numberOfWiFiNetworksDetected > 0) {
                                    wiFiTestPassed = true; // Allow Windows to pass if not connected to Wi-Fi network, but networks were detected (because we're not automatically connecting to a Wi-Fi network).
                                }
                                if (isLinuxBootedFromNetwork && !wiFiTestPassed && !connectedWiFiNetworkName.isEmpty()) {
                                    wiFiTestPassed = true;
                                }

                                if (wiFiTestPassed) {
                                    break;
                                } else {
                                    loadingWindow.setAlwaysOnTop(false);
                                    playAlertSound("error");
                                    String[] failedViaWiFiDialogButtons = new String[]{"Test Wi-Fi Again", "Skip Wi-Fi Test"};
                                    wiFiTestSkipped = (JOptionPane.showOptionDialog(qaHelperWindow, "<html>"
                                            + new TwemojiImage("CrossMark", qaHelperWindow).toImgTag("left") + " <b>Failed to Connect to the Internet via Wi-Fi</b>"
                                            + "<br/><br/>"
                                            + "<i>"
                                            + (isLinuxBootedFromNetwork
                                                    ? new TwemojiImage("IndexPointingUp", qaHelperWindow).toImgTag("left") + " Since you are currently booted via Ethernet, you <u>MAY NOT BE ABLE TO TEST Wi-Fi</u>."
                                                    + "<br/><br/>"
                                                    + new TwemojiImage("Prohibited", qaHelperWindow).toImgTag("left") + " <u>DO NOT DISCONNECT</u> the Ethernet cable since that will freeze this computer and you will need to reboot.</i>"
                                                    + "<br/><br/>"
                                                    + "If this test fails after multiple attempts, click \"Skip Wi-Fi Test\" and then test Wi-Fi again after you're booted into the installed OS."
                                                    : new TwemojiImage("IndexPointingUp", qaHelperWindow).toImgTag("left") + " <u>MANUALLY CONNECT</u> to a" + (connectedWiFiNetworkName.isEmpty() ? "" : " <u>DIFFERENT</u>") + " Wi-Fi network and then click \"Test Wi-Fi Again\".</i>"
                                                    + "<br/><br/>"
                                                    + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("left") + " If this computer is connected to a known good Wi-Fi network and this test fails<br/>"
                                                    + new TwemojiImage("Blank", qaHelperWindow).toImgTag("left") + " after multiple attempts, click \"Skip Wi-Fi Test\" and <u>CONSULT AN INSTRUCTOR</u>.")
                                            + "</html>", "QA Helper  —  Failed to Connect via Wi-Fi", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, new TwemojiImage("SatelliteAntenna", qaHelperWindow).toImageIcon(32), failedViaWiFiDialogButtons, failedViaWiFiDialogButtons[0]) != JOptionPane.YES_OPTION);
                                    loadingWindow.setAlwaysOnTop(true);

                                    if (wiFiTestSkipped) {
                                        break;
                                    } else {
                                        TimeUnit.SECONDS.sleep(2);
                                    }
                                }
                            }
                        }
                    } while ((hasWiFiCard && !wiFiTestPassed && !wiFiTestSkipped) || (hasEthernetPort && !ethernetTestPassed && !ethernetTestSkipped));

                    if (isLinux && !isLinuxBootedFromNetwork && hasWiFiCard && hasEthernetPort) {
                        ethernetNetworkDeviceIDs.forEach((thisEthernetNetworkDeviceID) -> {
                            if (!new CommandReader(new String[]{"/usr/bin/nmcli", "device", "status"}).getFirstOutputLineContaining(thisEthernetNetworkDeviceID).contains(" connected ")) {
                                try {
                                    Runtime.getRuntime().exec(new String[]{"/usr/bin/nmcli", "device", "connect", thisEthernetNetworkDeviceID}).waitFor();
                                } catch (IOException | InterruptedException turnOnEthernetException) {
                                    if (isTestMode) {
                                        System.out.println("turnOnEthernetException: " + turnOnEthernetException);
                                    }
                                }
                            }
                        });
                    }

                    String resultsOutput = "<html>";

                    if (hasWiFiCard) {
                        resultsOutput += new TwemojiImage((wiFiTestPassed ? "CheckMarkButton" : "CrossMark"), qaHelperWindow).toImgTag("left") + " <b style='color: " + (wiFiTestPassed ? successColorHTML : errorColorHTML) + "'>Wi-Fi Test " + (wiFiTestPassed ? "Passed" : ((wiFiIsOff && isLinuxBootedFromNetwork) ? "Unknown" : "Failed")) + "</b>";
                    }

                    if (hasEthernetPort) {
                        resultsOutput += (hasWiFiCard ? "<br/><br/>" : "") + new TwemojiImage((ethernetTestPassed ? "CheckMarkButton" : "CrossMark"), qaHelperWindow).toImgTag("left") + " <b style='color: " + (ethernetTestPassed ? successColorHTML : errorColorHTML) + "'>Ethernet Test " + (ethernetTestPassed ? "Passed" : "Failed") + "</b>";
                    } else {
                        resultsOutput += (hasWiFiCard ? "<br/><br/>" : "") + new TwemojiImage("Warning", qaHelperWindow).toImgTag("left") + " <b style='color: " + warningColorHTML + "'>No Ethernet Port Detected</b>";
                    }

                    if (!hasWiFiCard) {
                        resultsOutput += "<br/><br/>" + new TwemojiImage("Warning", qaHelperWindow).toImgTag("left") + " <b style='color: " + warningColorHTML + "'>No Wi-Fi Card Detected</b>";
                    }

                    if (hasWiFiCard) {
                        resultsOutput += "<br/><br/><br/><b>Wi-Fi Test Results:</b> " + new TwemojiImage((wiFiTestPassed ? "CheckMarkButton" : "CrossMark"), qaHelperWindow).toImgTag("inline") + " <i style='color: " + (wiFiTestPassed ? successColorHTML : errorColorHTML) + "'>" + (wiFiTestPassed ? "PASSED" : ((wiFiIsOff && isLinuxBootedFromNetwork) ? "UNKNOWN" : "FAILED")) + "</i><br/><br/>";

                        if (wiFiIsOff) {
                            resultsOutput += new TwemojiImage("Prohibited", qaHelperWindow).toImgTag("left") + " Wi-Fi is <i>DISABLED</i>";

                            if (isLinuxBootedFromNetwork) {
                                resultsOutput += "<br/><br/>" + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("left") + " <i>TEST WI-FI AGAIN WHEN BOOTED INTO INSTALLED OS</i>";
                            } else {
                                resultsOutput += "<br/><br/>" + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("left") + " <i>TURN ON WI-FI AND TRY AGAIN</i>";
                            }
                        } else {
                            if (connectedToCompanySiteViaWiFi || connectedToGoogleViaWiFi) {
                                resultsOutput += new TwemojiImage("ThumbsUp", qaHelperWindow).toImgTag("left") + " " + ((connectedToCompanySiteViaWiFi && connectedToGoogleViaWiFi)
                                        ? "Successfully Connected to " + osCompanySiteName + " &amp; Google.com via Wi-Fi<br/><br/>" : ((connectedToCompanySiteViaWiFi ? "Successfully Connected to " + osCompanySiteName + " via Wi-Fi<br/><br/>" : "")
                                        + (connectedToGoogleViaWiFi ? "Successfully Connected to Google.com via Wi-Fi<br/><br/>" : "")));
                            } else if (!wiFiTestPassed) {
                                resultsOutput += new TwemojiImage("ThumbsDown", qaHelperWindow).toImgTag("left") + " Failed to Connect to Both " + osCompanySiteName + " &amp; Google.com via Wi-Fi<br/><br/>";
                            }

                            resultsOutput += (connectedWiFiNetworkName.isEmpty()
                                    ? (isWindows ? ""
                                            : new TwemojiImage("Prohibited", qaHelperWindow).toImgTag("left") + " Failed to Connect to a Wi-Fi Network<br/><br/>")
                                    : new TwemojiImage("AntennaBars", qaHelperWindow).toImgTag("left") + " Connected to Wi-Fi Network: " + connectedWiFiNetworkName + "<br/><br/>");

                            resultsOutput += new TwemojiImage("MagnifyingGlassTiltedLeft", qaHelperWindow).toImgTag("left") + " Number of Wi-Fi Networks Detected: " + numberOfWiFiNetworksDetected;

                            if (numberOfWiFiNetworksDetected == 0) {
                                resultsOutput += "<br/><br/>" + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("left") + " <i>MOVE CLOSER TO WI-FI ACCESS POINT AND TRY AGAIN</i>";
                            } else if (connectedWiFiNetworkName.isEmpty() && !isWindows) {
                                resultsOutput += "<br/><br/>" + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("left") + " <i> MANUALLY CONNECT TO A WI-FI NETWORK AND TRY AGAIN</i>";
                            } else if (!wiFiTestPassed && !connectedWiFiNetworkName.isEmpty()) {
                                resultsOutput += "<br/><br/>" + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("left") + " <i>MANUALLY CONNECT TO A DIFFERENT WI-FI NETWORK AND TRY AGAIN</i>";
                            }
                        }

                        if (wiFiNetworkDeviceIDs.size() > 1) {
                            resultsOutput += "<br/><br/>" + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("left") + " <i>MULTIPLE WI-FI CARDS DETECTED - ONLY ONE WI-FI CARD HAS BEEN TESTED</i>";
                        }
                    }

                    if (hasEthernetPort) {
                        resultsOutput += "<br/><br/><br/><b>Ethernet Test Results:</b> " + new TwemojiImage((ethernetTestPassed ? "CheckMarkButton" : "CrossMark"), qaHelperWindow).toImgTag("inline") + " <i style='color: " + (ethernetTestPassed ? successColorHTML : errorColorHTML) + "'>" + (ethernetTestPassed ? "PASSED" : "FAILED") + "</i><br/><br/>";

                        if (ethernetTestPassed) {
                            resultsOutput += new TwemojiImage("ThumbsUp", qaHelperWindow).toImgTag("left") + " " + ((connectedToCompanySiteViaEthernet && connectedToGoogleViaEthernet)
                                    ? "Successfully Connected to " + osCompanySiteName + " &amp; Google.com via Ethernet" : ((connectedToCompanySiteViaEthernet ? "Successfully Connected to " + osCompanySiteName + " via Ethernet" : "")
                                    + (connectedToGoogleViaEthernet ? "Successfully Connected to Google.com via Ethernet" : "")));
                        } else if (ethernetCableConnected) {
                            resultsOutput += new TwemojiImage("ThumbsDown", qaHelperWindow).toImgTag("left") + " Failed to Connect to Both " + osCompanySiteName + " &amp; Google.com via Ethernet";
                        } else {
                            resultsOutput += new TwemojiImage("Prohibited", qaHelperWindow).toImgTag("left") + " No Ethernet Cable Detected"
                                    + "<br/><br/>"
                                    + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("left") + " <i>PLUG IN AN ETHERNET CABLE AND TRY AGAIN</i>";
                        }

                        if (ethernetNetworkDeviceIDs.size() > 1) {
                            if (isLinuxBootedFromNetwork) {
                                resultsOutput += "<br/><br/>" + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("left") + " <b style='color: " + attentionColorHTML + "'>MULTIPLE ETHERNET PORTS DETECTED</b><br/>"
                                        + new TwemojiImage("Prohibited", qaHelperWindow).toImgTag("left") + " <i>DO NOT CHANGE ETHERNET PORTS WHILE YOU ARE IN THIS INSTALLATION ENVIRONMENT</i><br/>"
                                        + new TwemojiImage("RepeatButton", qaHelperWindow).toImgTag("left") + " <i>TEST ETHERNET AGAIN WHEN BOOTED INTO INSTALLED OS</i>";
                            } else if (!isMacOS || !computerSpecs.getFullCPU().startsWith("Apple") || computerSpecs.getFullModel().contains("Mac Pro")) {
                                // Apple Silicon Macs always show multiple Ethernet ports, but only the Apple Silicon Mac Pro actually has multiple physical Ethernet ports, so only show this note if NOT an Apple Silicon Mac or IF IS an Apple Silicon Mac Pro.

                                resultsOutput += "<br/><br/>" + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("left") + " <b style='color: " + attentionColorHTML + "'>MULTIPLE ETHERNET PORTS DETECTED</b><br/>"
                                        + new TwemojiImage("ShuffleTracksButton", qaHelperWindow).toImgTag("left") + " <i>TEST EACH ETHERNET PORT BY RUNNING THIS TEST<br/>"
                                        + new TwemojiImage("Blank", qaHelperWindow).toImgTag("left") + " MULTIPLE TIMES WITH ONLY ONE CABLE PLUGGED IN</i>";
                            }
                        }
                    } else {
                        resultsOutput += "<br/><br/><br/>" + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("left") + " <b style='color: " + attentionColorHTML + "'>NO ETHERNET PORT DETECTED</b>";
                    }

                    if (!hasWiFiCard) {
                        resultsOutput += "<br/><br/><br/>"
                                + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("left") + " <b style='color: " + attentionColorHTML + "'>NO WI-FI CARD DETECTED</b>"
                                + "<br/><br/>"
                                + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>IF THIS COMPUTER SHOULD HAVE WI-FI - MAKE SURE WI-FI IS TURNED ON AND TRY AGAIN</i>";
                    }

                    if ((hasWiFiCard && !connectedWiFiNetworkName.isEmpty() && !wiFiTestPassed) || (hasEthernetPort && ethernetCableConnected && !ethernetTestPassed)) {
                        resultsOutput += "<br/><br/><br/>" + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>CONSULT AN INSTRUCTOR SINCE INTERNET TEST FAILED</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right");
                    }

                    resultsOutput += "</html>";

                    return resultsOutput;
                }

                @Override
                protected void process(java.util.List<String> tasks) {
                    tasks.forEach((thisTask) -> {
                        if (thisTask.equals("wifi")) {
                            loadingWindow.setLoadingTextAndDisplay("QA Helper is Testing Wi-Fi", "Testing", "SatelliteAntenna");
                        } else if (thisTask.equals("ethernet")) {
                            loadingWindow.setLoadingTextAndDisplay("QA Helper is Testing Ethernet", "Testing", "SatelliteAntenna");
                        }
                    });
                }

                @Override
                protected void done() {
                    loadingWindow.closeWindow();

                    try {
                        String internetTestResult = get();

                        String internetTestTitle = internetTestResult.substring(0, internetTestResult.indexOf("<br/><br/><br/>")).replace("&nbsp;", " ").replace("<br/><br/>", " & ").replaceAll("\\<[^>]*>", "").trim().replaceAll("\\s{2,}", " ");
                        boolean didFullPass = internetTestTitle.contains("Test Passed") && !internetTestTitle.contains("Test Failed") && !internetTestTitle.contains("Test Unknown");
                        boolean didPartialPass = internetTestTitle.contains("Test Passed") && (internetTestTitle.contains("Test Failed") || internetTestTitle.contains("Test Unknown"));

                        if ((deviceTypeIsLaptop && internetTestTitle.contains("No Wi-Fi Card Detected"))
                                || (!deviceTypeIsLaptop && internetTestTitle.contains("No Ethernet Port Detected"))) {
                            didFullPass = false;
                        }

                        ArrayList<String> internetTestCompletedButtons = new ArrayList<>(Arrays.asList("Continue", "Test Internet Again"));

                        if (!didFullPass) {
                            Collections.reverse(internetTestCompletedButtons);
                        }

                        playAlertSound(didFullPass ? "success" : "error");
                        focusWindow();
                        int internetTestCompletedDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, internetTestResult, "QA Helper  —  " + internetTestTitle, JOptionPane.DEFAULT_OPTION, (didFullPass ? JOptionPane.INFORMATION_MESSAGE : (didPartialPass ? JOptionPane.WARNING_MESSAGE : JOptionPane.ERROR_MESSAGE)), new TwemojiImage("SatelliteAntenna", qaHelperWindow).toImageIcon(), internetTestCompletedButtons.toArray(), internetTestCompletedButtons.get(0));

                        String internetTestCompletedDialogResponseString = "Continue";
                        if (internetTestCompletedDialogResponse > -1) {
                            internetTestCompletedDialogResponseString = internetTestCompletedButtons.get(internetTestCompletedDialogResponse);
                        }

                        if (internetTestCompletedDialogResponseString.contains("Test")) {
                            setActionsEnabled(true);
                            btnTestInternetActionPerformed(evt);
                        } else if (didFullPass && !isInternetVerified && btnVerifyInternet.isVisible() && btnVerifyInternet.isEnabled()) {
                            btnVerifyInternetActionPerformed(null);
                        }
                    } catch (HeadlessException | InterruptedException | ExecutionException finishInternetTestException) {
                        if (isTestMode) {
                            System.out.println("finishInternetTestException: " + finishInternetTestException);
                        }
                    }

                    setActionsEnabled(true);
                }
            }).execute();
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnTestInternetActionPerformed

    private void btnVerifyInternetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifyInternetActionPerformed
        if ((actionsEnabled || (evt == null)) && !isWindowsPE) {
            setActionsEnabled(false);

            if (JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>" + ((evt == null) ? "Would you like " : "Are you sure you want ") + "to <i>" + (isInternetVerified ? "UNVERIFY" : "verify") + "</i> internet connectivity?</b></html>", "QA Helper  —  Confirm " + (isInternetVerified ? "Unverify" : "Verify") + " Internet", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage((isInternetVerified ? "CrossMark" : "CheckBoxWithCheck"), qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                isInternetVerified = !isInternetVerified;

                boolean hasWiFi = computerSpecs.getWireless().contains("Wi-Fi");

                writeToHelperLogFile("Test: Internet " + (hasWiFi ? "" : "(No Wi-Fi) ") + (isInternetVerified ? "Verified" : "UNVERIFIED"));

                btnVerifyInternet.setText((isInternetVerified ? "Verified" : "Verify"));
                btnVerifyInternet.setFont(btnVerifyInternet.getFont().deriveFont((isInternetVerified ? Font.BOLD : lblVersion.getFont().getStyle())));
                btnVerifyInternet.setForeground(isInternetVerified ? verifiedColor : defaultColor);
                btnVerifyInternet.setBorderPainted(!isInternetVerified);

                new LinuxAutoScripts("Internet " + (isInternetVerified ? "Verified" : "Unverified"), adminPassword);

                if (computerSpecs.getWirelessArray().isEmpty()) {
                    boolean loginAndTasksWasHidden = hideLoginAndTasks;
                    if (loginAndTasksWasHidden) {
                        hideLoginAndTasks = false;
                    }

                    displayComputerSpecs();

                    if (loginAndTasksWasHidden) {
                        hideLoginAndTasks = true;
                    }
                }

                focusNextTestTaskVerifyButton(btnVerifyInternet);
            } else {
                focusNextTestTaskVerifyButton(btnTestInternet);
            }

            setActionsEnabled(true);
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnVerifyInternetActionPerformed

    private void btnTestScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestScreenActionPerformed
        if (actionsEnabled) {
            setActionsEnabled(false);

            boolean shouldDoAnyScreenTest = true;
            boolean shouldDoTouchscreenTest = false;

            boolean hasTouchscreen = ((computerSpecs != null) && computerSpecs.hasTouchscreen());

            if (hasTouchscreen) {
                String[] screenTestOptionsDialogButtons = new String[]{"Start Solid Colors Screen Test…", "Start Touchscreen Test…", "Cancel"};
                if (didSolidColorsScreenTest && !didTouchscreenTest) {
                    screenTestOptionsDialogButtons = new String[]{"Start Touchscreen Test…", "Start Solid Colors Screen Test…", "Cancel"};
                }

                int screenTestOptionsDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html>"
                        + "<b>Since this computer has a touchscreen, the touchscreen functionality must be tested as well as checking the screen for any visual imperfections.</b>"
                        + "<br/><br/>"
                        + new TwemojiImage("FlagMauritius", qaHelperWindow).toImgTag("left") + " The \"Solid Colors Screen Test\" is used to check the screen for any visual imperfections."
                        + (didSolidColorsScreenTest ? "<br/>" + new TwemojiImage("CheckBoxWithCheck", qaHelperWindow).toImgTag("left") + " <b>You have performed the Solid Colors Screen Test.</b>" : "")
                        + "<br/><br/>"
                        + new TwemojiImage("IndexPointingUp", qaHelperWindow).toImgTag("left") + " The \"Touchscreen Test\" is used to test the touchscreen functionality."
                        + (didTouchscreenTest ? "<br/>" + new TwemojiImage("CheckBoxWithCheck", qaHelperWindow).toImgTag("left") + " <b>You have performed the Touchscreen Test.</b>" : "")
                        + "<br/><br/><br/>"
                        + "<center>"
                        + "<i>You can perform these screen tests in any order, when you are done with one test you will be prompted to perform the other.</i>"
                        + "<br/><br/>"
                        + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>BOTH OF THESE SCREEN TESTS MUST BE PERFORMED AND PASSED BEFORE THE SCREEN IS VERIFIED</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")
                        + "</center></html>", "QA Helper  —  Screen Test Options", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("Laptop", qaHelperWindow).toImageIcon(), screenTestOptionsDialogButtons, screenTestOptionsDialogButtons[0]);

                String screenTestOptionsDialogResponseString = "Cancel";
                if (screenTestOptionsDialogResponse > -1) {
                    screenTestOptionsDialogResponseString = screenTestOptionsDialogButtons[screenTestOptionsDialogResponse];
                }

                shouldDoAnyScreenTest = (!screenTestOptionsDialogResponseString.equals("Cancel"));
                shouldDoTouchscreenTest = (screenTestOptionsDialogResponseString.contains("Touchscreen"));
            }

            if (shouldDoAnyScreenTest) {
                int screenTestPromptReturn = JOptionPane.showConfirmDialog(qaHelperWindow, "<html>"
                        + (shouldDoTouchscreenTest
                                ? "<b>Touchscreen Test starts out as a solid <i style='color: red; background-color: white'>&nbsp;Red&nbsp;</i> screen."
                                + "<br/>"
                                + "<i>Then, you must <u>touch every zone with your finger</u> to turn the whole screen <i style='color: green; background-color: white'>&nbsp;Green&nbsp;</i>.</b>"
                                + "<br/><br/>"
                                + new TwemojiImage("IndexPointingUp", qaHelperWindow).toImgTag("left") + " <i>YOU MUST TOUCH THE SCREEN WITH YOUR FINGER</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")
                                + "<br/>"
                                + new TwemojiImage("Prohibited", qaHelperWindow).toImgTag("left") + " <i>DO NOT USE A MOUSE OR TOUCHPAD TO PERFORM THIS TEST</i> " + new TwemojiImage("ComputerMouse", qaHelperWindow).toImgTag("right")
                                + "<br/><br/>"
                                + new TwemojiImage("Stopwatch", qaHelperWindow).toImgTag("left") + " <b>You must finish this test <u>within 45 seconds</u>."
                                + "<br/>"
                                + new TwemojiImage("StopSign", qaHelperWindow).toImgTag("left") + " <i>After 45 seconds</i>, the touchscreen test will <u>timeout and end on its own</u>.</b>"
                                + "<br/><br/>"
                                + new TwemojiImage("Memo", qaHelperWindow).toImgTag("left") + " <i>MAKE NOTE OF ANY ZONES WHICH HAVE ISSUES OR CANNOT BE TURNED GREEN</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")
                                + "<br/><br/><br/>"
                                + new TwemojiImage("CheckMarkButton", qaHelperWindow).toImgTag("left") + " <b style='color: " + successColorHTML + "'>TOUCHSCREEN TEST PASSED IF:</b>"
                                + "<ul style='margin-left: 20px'>"
                                + "<li><u>Each zone</u> turns <b style='color: green; background-color: white'>&nbsp;Green&nbsp;</b> <u>immediately</u> the <u>first time you touch it</u>.</li>"
                                + "<li>You <u>touch every zone</u> and <u>turn the whole screen</u> <b style='color: green; background-color: white'>&nbsp;Green&nbsp;</b> <u>within 45 seconds</u>.</li>"
                                + "</ul>"
                                + "<br/>"
                                + new TwemojiImage("CrossMark", qaHelperWindow).toImgTag("left") + " <b style='color: " + errorColorHTML + "'>TOUCHSCREEN TEST FAILED IF:</b>"
                                + "<ul style='margin-left: 20px'>"
                                + "<li><i>Any zone</i> needs to be <u>touched multiple times to turn Green</u>.</li>"
                                + "<li><i>Any zone</i> is <u>not able to be turned Green</u> by touching the screen.</li>"
                                + "</ul>"
                                + "<br/><center>"
                                + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>CONSULT AN INSTRUCTOR IF TOUCHSCREEN TEST FAILS</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")
                                : "<b>Solid Colors Screen Test will cycle through solid color <i style='color: red; background-color: white'>&nbsp;Red&nbsp;</i>, <i style='color: green; background-color: white'>&nbsp;Green&nbsp;</i>, <i style='color: blue; background-color: white'>&nbsp;Blue&nbsp;</i>, <i style='color: black; background-color: white'>&nbsp;Black&nbsp;</i>, and <i style='color: white; background-color: black'>&nbsp;White&nbsp;</i> screens.</b>"
                                + "<br/><br/>"
                                + "<i>When you start Solid Colors Screen Test, the whole screen will first turn solid <b style='color: red; background-color: white'>&nbsp;Red&nbsp;</b>.</i>"
                                + "<br/><br/>"
                                + new TwemojiImage("Eyes", qaHelperWindow).toImgTag("left") + " Examine the entire screen carefully, looking for any <u>discolorations</u>, <u>dead pixels</u>, or <u>scratches</u>."
                                + "<br/><br/>"
                                + new TwemojiImage("Memo", qaHelperWindow).toImgTag("left") + " <i>MAKE NOTE OF ANY ISSUES YOU FIND</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")
                                + "<br/><br/>"
                                + new TwemojiImage("ComputerMouse", qaHelperWindow).toImgTag("left") + " When you're finished examining a screen color, <u>CLICK THE MOUSE</u><br/>"
                                + new TwemojiImage("Blank", qaHelperWindow).toImgTag("left") + " to move to the next color and repeat your examination and note taking."
                                + "<br/><br/>"
                                + new TwemojiImage("MagnifyingGlassTiltedLeft", qaHelperWindow).toImgTag("left") + " Look very carefully over the entire screen for <u>EACH COLOR</u> as some<br/>"
                                + new TwemojiImage("Blank", qaHelperWindow).toImgTag("left") + " kinds of screen issues will show on some colors and not on others."
                                + "<br/><br/><br/>"
                                + new TwemojiImage("CheckMarkButton", qaHelperWindow).toImgTag("left") + " <b style='color: " + successColorHTML + "'>SOLID COLORS SCREEN TEST PASSED IF:</b>"
                                + "<ul style='margin-left: 20px'>"
                                + "<li>The screen has <b>NO</b> <u>discolorations</u> or <u>hot spots</u>.</li>"
                                + "<li>The screen has <b>NO</b> <u>dead pixels</u>.</li>"
                                + "<li>The screen has <b>NO</b> <u>scratches or <u>dents</u>.</li>"
                                + "</ul>"
                                + "<br/>"
                                + new TwemojiImage("CrossMark", qaHelperWindow).toImgTag("left") + " <b style='color: " + errorColorHTML + "'>SOLID COLORS SCREEN TEST FAILED IF:</b>"
                                + "<ul style='margin-left: 20px'>"
                                + "<li>The screen has <i>ANY</i> <u>discoloration</u> or <u>hot spots</u>.</li>"
                                + "<li>The screen has <i>ANY</i> <u>dead pixels</u>.</li>"
                                + "<li>The screen has <i>ANY</i> <u>scratches</u> or <u>dents</u>.</li>"
                                + "</ul>"
                                + "<br/><center>"
                                + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>CONSULT AN INSTRUCTOR IF SOLID COLORS SCREEN TEST FAILS</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")) + "</center></html>", "QA Helper  —  " + (shouldDoTouchscreenTest ? "Touchscreen" : "Solid Colors Screen") + " Test", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, new TwemojiImage(shouldDoTouchscreenTest ? "IndexPointingUp" : "FlagMauritius", qaHelperWindow).toImageIcon());

                if (screenTestPromptReturn == JOptionPane.OK_OPTION) {
                    if (shouldDoTouchscreenTest) {
                        new QATouchscreenTestWindow().addWindowListener(new WindowAdapter() {
                            @Override
                            public void windowClosed(WindowEvent windowEvent) {
                                boolean touchscreenTestPassed = ((JFrame) windowEvent.getSource()).getTitle().endsWith(" PASSED");

                                if (touchscreenTestPassed) {
                                    ArrayList<String> screenTestCompletedButtons = new ArrayList<>(Arrays.asList("Continue", (didSolidColorsScreenTest ? "Test Screen Again" : "Continue to Solid Colors Screen Test")));

                                    if (!didSolidColorsScreenTest) {
                                        Collections.reverse(screenTestCompletedButtons);
                                    }

                                    playAlertSound("success");
                                    focusWindow();
                                    int screenTestCompletedDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html><b>Touchscreen Test Successfully Completed Within 45 Seconds</b>"
                                            + "<br/><br/><br/>"
                                            + new TwemojiImage("CheckMarkButton", qaHelperWindow).toImgTag("left") + " <b style='color: " + successColorHTML + "'>TOUCHSCREEN TEST PASSED IF:</b>"
                                            + "<ul style='margin-left: 20px'>"
                                            + "<li><u>Each zone</u> turned <b style='color: green; background-color: white'>&nbsp;Green&nbsp;</b> <u>immediately</u> the <u>first time you touched it</u>.</li>"
                                            + "<li>You <u>touched every zone</u> and <u>turned the whole screen</u> <b style='color: green; background-color: white'>&nbsp;Green&nbsp;</b> <u>within 45 seconds</u>.</li>"
                                            + "</ul>"
                                            + "<br/>"
                                            + new TwemojiImage("CrossMark", qaHelperWindow).toImgTag("left") + " <b style='color: " + errorColorHTML + "'>TOUCHSCREEN TEST FAILED IF:</b>"
                                            + "<ul style='margin-left: 20px'>"
                                            + "<li><i>Any zone</i> needed to be <u>touched multiple times to turn Green</u>.</li>"
                                            + "<li><i>Any zone</i> was <u>not able to be turned Green</u> by touching the screen.</li>"
                                            + "</ul>"
                                            + "<br/><center>"
                                            + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>CONSULT AN INSTRUCTOR IF TOUCHSCREEN TEST FAILED</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")
                                            + "</center></html>", "QA Helper  —  Touchscreen Test Completed", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("IndexPointingUp", qaHelperWindow).toImageIcon(), screenTestCompletedButtons.toArray(), screenTestCompletedButtons.get(0));

                                    String screenTestCompletedDialogResponseString = "Continue";
                                    if (screenTestCompletedDialogResponse > -1) {
                                        screenTestCompletedDialogResponseString = screenTestCompletedButtons.get(screenTestCompletedDialogResponse);
                                    }

                                    didTouchscreenTest = true;

                                    if (screenTestCompletedDialogResponseString.contains("Test")) {
                                        setActionsEnabled(true);
                                        btnTestScreenActionPerformed(evt);
                                    } else {
                                        if (didSolidColorsScreenTest && !isScreenVerified && btnVerifyScreen.isVisible() && btnVerifyScreen.isEnabled()) {
                                            btnVerifyScreenActionPerformed(null);
                                        }

                                        setActionsEnabled(true);
                                    }
                                } else {
                                    playAlertSound("error");
                                    JOptionPane.showMessageDialog(qaHelperWindow, "<html>" + new TwemojiImage("Warning", qaHelperWindow).toImgTag("left") + " <b>TOUCHSCREEN TEST HAS FAILED SINCE IT WAS NOT COMPLTED WITHIN 45 SECONDS</b> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")
                                            + "<br/><br/><center>"
                                            + "<i>If this happened because you had to stop the test for any reason other than<br/>"
                                            + "the <u>touchscreen not working</u>, <b>you can just peform the touchscreen test again.</b></i>"
                                            + "<br/><br/>"
                                            + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>CONSULT AN INSTRUCTOR IF TOUCHSCREEN TEST FAILED</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")
                                            + "</center></html>", "QA Helper  —  Touchscreen Test Failed", JOptionPane.ERROR_MESSAGE, new TwemojiImage("IndexPointingUp", qaHelperWindow).toImageIcon());

                                    setActionsEnabled(true);
                                    btnTestScreenActionPerformed(evt);
                                }
                            }
                        });
                    } else {
                        new QAScreenTestWindow(qaHelperWindow, (!isPeripheralTestMode && (!btnVerifyScreen.isVisible() || isTestMode))).addWindowListener(new WindowAdapter() {
                            @Override
                            public void windowClosed(WindowEvent windowEvent) {
                                boolean screenTestFinished = ((JFrame) windowEvent.getSource()).getTitle().endsWith(" FINISHED");

                                // TODO: THIS ISSUE WAS ACTUALLY CAUSED BY METAL RENDERING BECOMING DEFAULT ON JAVA 19
//                                if (isMacOS && System.getProperty("java.version").startsWith("19")) {
//                                    // NOTE: Starting with Java 19 on macOS I've been seeing the screen stay black after the fullscreen screen test window closes.
//                                    // The window is truley getting closed, but the screen just doesn't re-display properly and stays black.
//                                    // I found that key presses still worked and if I hit the right keys to re-open the screen test again,
//                                    // the screen would properly re-display and not be all black after the 2nd screen test window was closed.
//                                    // I tried a variety of other things around closing the window to make this issue not happen,
//                                    // but in the end I tried automating the situation that I knew seemed to work,
//                                    // which was re-opening and 2nd screen test window and closing it again.
//                                    // So, that's why this 2nd screen test window is being opened and immediately closed after the original screen test window is closed.
//                                    // This is a total hack, but it actually works reliably well in my testing.
//                                    // This WAS NOT an issue with Java 18 or older and only started with Java 19 and has continue with 19.0.1 and 19.0.2.
//                                    // TODO: Re-test if this hacky workaround is still needed in Java 20+
//
//                                    new QAScreenTestWindow(false).dispose();
//                                }
                                ArrayList<String> screenTestCompletedButtons = new ArrayList<>(Arrays.asList("Continue", ((!screenTestFinished || (hasTouchscreen && didTouchscreenTest)) ? "Test Screen Again" : "Continue to Touchscreen Test")));

                                if (!screenTestFinished || (hasTouchscreen && !didTouchscreenTest)) {
                                    Collections.reverse(screenTestCompletedButtons);
                                }

                                focusWindow();
                                int screenTestCompletedDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html><b>Solid Colors Screen Test Completed</b>"
                                        + "<br/><br/><br/>"
                                        + new TwemojiImage("CheckMarkButton", qaHelperWindow).toImgTag("left") + " <b style='color: " + successColorHTML + "'>SOLID COLORS SCREEN TEST PASSED IF:</b>"
                                        + "<ul style='margin-left: 20px'>"
                                        + "<li>The screen had <b>NO</b> <u>discolorations</u> or <u>hot spots</u>.</li>"
                                        + "<li>The screen had <b>NO</b> <u>dead pixels</u>.</li>"
                                        + "<li>The screen had <b>NO</b> <u>scratches or <u>dents</u>.</li>"
                                        + "</ul>"
                                        + "<br/>"
                                        + new TwemojiImage("CrossMark", qaHelperWindow).toImgTag("left") + " <b style='color: " + errorColorHTML + "'>SOLID COLORS SCREEN TEST FAILED IF:</b>"
                                        + "<ul style='margin-left: 20px'>"
                                        + "<li>The screen had <i>ANY</i> <u>discoloration</u> or <u>hot spots</u>.</li>"
                                        + "<li>The screen had <i>ANY</i> <u>dead pixels</u>.</li>"
                                        + "<li>The screen had <i>ANY</i> <u>scratches</u> or <u>dents</u>.</li>"
                                        + "</ul>"
                                        + "<br/><center>"
                                        + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>CONSULT AN INSTRUCTOR IF SOLID COLORS SCREEN TEST FAILED</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")
                                        + "</center></html>", "QA Helper  —  Solid Colors Screen Test Completed", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("FlagMauritius", qaHelperWindow).toImageIcon(), screenTestCompletedButtons.toArray(), screenTestCompletedButtons.get(0));

                                String screenTestCompletedDialogResponseString = "Continue";
                                if (screenTestCompletedDialogResponse > -1) {
                                    screenTestCompletedDialogResponseString = screenTestCompletedButtons.get(screenTestCompletedDialogResponse);
                                }

                                if (screenTestFinished) {
                                    didSolidColorsScreenTest = true;
                                }

                                if (screenTestCompletedDialogResponseString.contains("Test")) {
                                    setActionsEnabled(true);
                                    btnTestScreenActionPerformed(evt);
                                } else {
                                    if (screenTestFinished && (!hasTouchscreen || (hasTouchscreen && didTouchscreenTest))
                                            && !isScreenVerified && btnVerifyScreen.isVisible() && btnVerifyScreen.isEnabled()) {
                                        btnVerifyScreenActionPerformed(null);
                                    }

                                    setActionsEnabled(true);
                                }
                            }
                        });
                    }
                } else {
                    setActionsEnabled(true);
                    if (!isPeripheralTestMode) {
                        focusNextTestTaskVerifyButton(btnTestScreen);
                    }
                }
            } else {
                setActionsEnabled(true);
                if (!isPeripheralTestMode) {
                    focusNextTestTaskVerifyButton(btnTestScreen);
                }
            }
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnTestScreenActionPerformed

    private void btnVerifyScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifyScreenActionPerformed
        if (actionsEnabled || (evt == null)) {
            setActionsEnabled(false);

            if (JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>" + ((evt == null) ? "Would you like " : "Are you sure you want ") + "to <i>" + (isScreenVerified ? "UNVERIFY" : "verify") + "</i> the screen?</b></html>", "QA Helper  —  Confirm " + (isScreenVerified ? "Unverify" : "Verify") + " Screen", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage((isScreenVerified ? "CrossMark" : "CheckBoxWithCheck"), qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                isScreenVerified = !isScreenVerified;

                writeToHelperLogFile("Test: Screen " + (isScreenVerified ? "Verified" : "UNVERIFIED"));

                btnVerifyScreen.setText((isScreenVerified ? "Verified" : "Verify"));
                btnVerifyScreen.setFont(btnVerifyScreen.getFont().deriveFont((isScreenVerified ? Font.BOLD : lblVersion.getFont().getStyle())));
                btnVerifyScreen.setForeground(isScreenVerified ? verifiedColor : defaultColor);
                btnVerifyScreen.setBorderPainted(!isScreenVerified);

                new LinuxAutoScripts("Screen " + (isScreenVerified ? "Verified" : "Unverified"), adminPassword);

                focusNextTestTaskVerifyButton(btnVerifyScreen);
            } else {
                focusNextTestTaskVerifyButton(btnTestScreen);
            }

            setActionsEnabled(true);
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnVerifyScreenActionPerformed

    private void btnTestAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestAudioActionPerformed
        if (actionsEnabled && (!isWindowsPE || isWindowsRE)) {
            setActionsEnabled(false);

            ArrayList<String> outputCards = new ArrayList<>();
            int defaultOutputCardIndex = -1;

            if (isLinux) {
                if (new File("/tmp/qa_helper-audio_output_card.txt").exists()) {
                    new File("/tmp/qa_helper-audio_output_card.txt").delete();
                }

                String[] outputCardsAndDevicesInfo = new CommandReader(new String[]{"/usr/bin/aplay", "-l"}).getOutputLinesContaining("card");

                for (String thisOutputCardAndDeviceInfo : outputCardsAndDevicesInfo) {
                    if (!thisOutputCardAndDeviceInfo.contains("HDMI")) {
                        String[] thisOutputCardAndDeviceInfoParts = thisOutputCardAndDeviceInfo.split(":");
                        if (thisOutputCardAndDeviceInfoParts[0].startsWith("card")) {
                            String thisOutputCard = thisOutputCardAndDeviceInfoParts[0].replaceAll("[^0-9]", "");

                            String thisOutputCardName = thisOutputCardAndDeviceInfo.substring(thisOutputCardAndDeviceInfo.indexOf(": ") + 2);
                            if (thisOutputCardAndDeviceInfoParts.length >= 1 && thisOutputCardAndDeviceInfoParts[1].contains("[") && thisOutputCardAndDeviceInfoParts[1].contains("]")) {
                                thisOutputCardName = thisOutputCardAndDeviceInfoParts[1].substring(thisOutputCardAndDeviceInfoParts[1].indexOf("[") + 1, thisOutputCardAndDeviceInfoParts[1].indexOf("]")).trim();
                                if (thisOutputCardName.isEmpty()) {
                                    thisOutputCardName = thisOutputCardAndDeviceInfoParts[1].substring(0, thisOutputCardAndDeviceInfoParts[1].indexOf("[")).trim();
                                }

                                if (thisOutputCardAndDeviceInfoParts[1].contains(" device ")) {
                                    thisOutputCardName += " (Device " + thisOutputCardAndDeviceInfoParts[1].substring(thisOutputCardAndDeviceInfoParts[1].indexOf(" device ") + 8);

                                    if (thisOutputCardAndDeviceInfoParts.length >= 2 && thisOutputCardAndDeviceInfoParts[2].contains("[") && thisOutputCardAndDeviceInfoParts[2].contains("]")) {
                                        String thisOutputCardDeviceName = thisOutputCardAndDeviceInfoParts[2].substring(thisOutputCardAndDeviceInfoParts[2].indexOf("[") + 1, thisOutputCardAndDeviceInfoParts[2].indexOf("]")).trim();
                                        if (thisOutputCardDeviceName.isEmpty()) {
                                            thisOutputCardDeviceName = thisOutputCardAndDeviceInfoParts[2].substring(0, thisOutputCardAndDeviceInfoParts[2].indexOf("[")).replace("(*)", "").trim();
                                        }

                                        thisOutputCardName += ": " + thisOutputCardDeviceName;
                                    }

                                    thisOutputCardName += ")";
                                }
                            }

                            // Actual desired volume will get set below.
                            if ((defaultOutputCardIndex == -1) && !new CommandReader(new String[]{"/usr/bin/amixer", "-c", thisOutputCard, "-M", "sset", "Master", "playback", "100%", "unmute"}).getFirstOutputLine().isEmpty()) {
                                defaultOutputCardIndex = outputCards.size();
                            }

                            outputCards.add("Output " + thisOutputCard + ": " + thisOutputCardName);
                        }
                    }
                }
            } else if (isWindows) {
                if (isWindowsPE) {
                    setState(Frame.ICONIFIED);
                }

                try {
                    Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\SndVol.exe"});

                    TimeUnit.MILLISECONDS.sleep(500); // Sleep a little to make sure focusWindow() gets focus back
                } catch (IOException | InterruptedException openWindowsSoundMixerException) {
                    if (isTestMode) {
                        System.out.println("openWindowsSoundMixerException: " + openWindowsSoundMixerException);
                    }
                }

                if (!isWindowsPE) {
                    focusWindow();
                }
            }

            JComboBox outputCardComboBox = new JComboBox<>(outputCards.toArray(String[]::new));
            if ((defaultOutputCardIndex >= 0) && !outputCards.isEmpty()) {
                outputCardComboBox.setSelectedIndex(defaultOutputCardIndex);
            }

            JCheckBox turnDownOutputVolumeCheckbox = new JCheckBox("Turn Down Output Volume to 25%"); // This checkbox will only be shown on macOS 10.13 High Sierra and older since headphones cannot be easily detected.
            if (isMacOS && !isMacOSmojaveOrNewer && ((speakerTestCount + headphoneTestCount) == 1)) { // Enable lower volume checkbox by default if about to start 2nd test, which should be the headphone test.
                turnDownOutputVolumeCheckbox.setSelected(true);
            }

            boolean isLaptop = ((computerSpecs != null) && deviceTypeIsLaptop);

            int audioTestPromptReturn = JOptionPane.showConfirmDialog((isWindowsPE ? null : qaHelperWindow), new Object[]{"<html><b>Audio Test will play tones from the <u>left speakers</u>, <u>right speakers</u>, and then <u>both speakers</u>.</b>"
                + (!isPeripheralTestMode
                ? "<br/><br/>"
                + new TwemojiImage("SpeakerHighVolume", qaHelperWindow).toImgTag("left") + " <b>First, run this Audio Test through the <u>built-in speakers</u>."
                + "<br/><br/>"
                + new TwemojiImage("Headphone", qaHelperWindow).toImgTag("left") + " Then, run this Audio Test again <u>with headphones plugged in</u> to test the headphone port.</b>"
                : "")
                + "<br/><br/><br/>"
                + new TwemojiImage("CheckMarkButton", qaHelperWindow).toImgTag("left") + " <b style='color: " + successColorHTML + "'>AUDIO TEST PASSED IF:</b><br/>"
                + "<ul style='margin-left: 20px'>"
                + "<li>You hear the <u>tones crisply and clearly</u> from the <u>left speakers</u>,<br/>"
                + "then the <u>right speakers</u>, and then <u>both speakers</u>" + (!isPeripheralTestMode ? " with both the<br/>"
                + "<u>built-in speakers</u> as well as the <u>headphones</u>" : "") + ".</li>"
                + "</ul>"
                + "<br/>"
                + new TwemojiImage("CrossMark", qaHelperWindow).toImgTag("left") + " <b style='color: " + errorColorHTML + "'>AUDIO TEST FAILED IF:</b><br/>"
                + "<ul style='margin-left: 20px'>"
                + "<li>You <u>do not hear the tones</u> out of the <u>correct speakers</u><br/>"
                + "or they <u>don't sound crisp and clear</u>"
                + (!isPeripheralTestMode ? " for either<br/>the <u>built-in speakers</u> or the <u>headphones</u>" : "") + ".</li>"
                + "</ul>"
                + "<br/><br/>"
                + (!isPeripheralTestMode && (isLinux || isMacOSmojaveOrNewer) // Can't detect headphone vs speaker on Windows or macOS 10.13 High Sierra and older.
                ? "<b>Number of Internal Speaker Tests Run:</b> " + speakerTestCount + "<br/><br/>"
                + "<b>Number of Headphone Port Tests Run:</b> " + headphoneTestCount + "<br/><br/><br/>"
                : "<b>Number of Audio Tests Run:</b> " + (speakerTestCount + headphoneTestCount) + "<br/><br/><br/>")
                + "<center>"
                + (isWindows ? new TwemojiImage("LevelSlider", qaHelperWindow).toImgTag("left") + " <i>SET VOLUME TO AN <u>APPROPRIATE LEVEL</u> BEFORE STARTING TEST</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right") + "<br/><br/>" : "")
                + (!isPeripheralTestMode ? new TwemojiImage("ShuffleTracksButton", qaHelperWindow).toImgTag("left") + " <i>REMEMBER TO TEST BOTH <u>BUILT-IN SPEAKERS</u> AND <u>HEADPHONES</u></i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right") + "<br/><br/>" : "")
                + ((!isPeripheralTestMode && !isLaptop) ? new TwemojiImage("Headphone", qaHelperWindow).toImgTag("left") + " <i>REMEMBER TO TEST <u>ALL HEADPHONE PORTS</u></i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right") + "<br/><br/>" : "")
                + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>CONSULT AN INSTRUCTOR IF AUDIO TEST FAILS</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")
                + "</center></html>",
                (((isMacOS && !isMacOSmojaveOrNewer) || (isLinux && !outputCards.isEmpty())) ? " " : ""),
                (((isMacOS && !isMacOSmojaveOrNewer) || (isLinux && !outputCards.isEmpty())) ? "<html><b>Output Options:</b></html>" : ""),
                ((isLinux && !outputCards.isEmpty()) ? outputCardComboBox : ""),
                ((isMacOS && !isMacOSmojaveOrNewer) ? turnDownOutputVolumeCheckbox : ""),
                ((isMacOS && !isMacOSmojaveOrNewer) ? "<html>" + new TwemojiImage("Warning", qaHelperWindow).toImgTag("left") + " <i>Check box above to turn down output volume before running headphone test.</i></html>" : "")
            }, "QA Helper  —  Audio Test", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, new TwemojiImage("Loudspeaker", qaHelperWindow).toImageIcon());

            if (audioTestPromptReturn == JOptionPane.OK_OPTION) {
                loadingWindow.setLoadingTextAndDisplay("QA Helper is Testing Audio", "Testing", true, "Loudspeaker");
                loadingWindow.setLoadingProgressBarToMax(((isLinux && !isLinuxUbiquityMode) ? 0 : 6)); // Make intermediate for linux (not pre-install) since we may wait for Pulse to be ready.

                (new SwingWorker<Void, String>() {
                    @Override
                    protected Void doInBackground() throws Exception {
                        String selectedOutputCardString = "";
                        String outputCard = "0";
                        String outputDevice = "0";

                        boolean headphonesAreConnected = false;

                        if (isLinux) {
                            if (!outputCards.isEmpty()) {
                                selectedOutputCardString = outputCardComboBox.getSelectedItem().toString();

                                try {
                                    Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "echo '" + selectedOutputCardString.replace("'", "'\\''") + "' > /tmp/qa_helper-audio_output_card.txt"});
                                } catch (IOException saveAudioOutputCardException) {
                                    System.out.println("saveAudioOutputCardException: " + saveAudioOutputCardException);
                                }

                                if (selectedOutputCardString.startsWith("Output ")) {
                                    headphonesAreConnected = selectedOutputCardString.contains(" USB ");
                                    String[] selectedOutputCardStringParts = selectedOutputCardString.split(":");
                                    outputCard = selectedOutputCardStringParts[0].replaceAll("[^0-9]", "");
                                    if (selectedOutputCardStringParts.length >= 1) {
                                        if (selectedOutputCardStringParts[1].contains(" (Device ")) {
                                            outputDevice = selectedOutputCardStringParts[1].substring(selectedOutputCardStringParts[1].indexOf(" (Device ") + 9);
                                        } else if (selectedOutputCardStringParts[1].contains(" device ")) {
                                            outputDevice = selectedOutputCardStringParts[1].substring(selectedOutputCardStringParts[1].indexOf(" device ") + 8);
                                        }
                                    }
                                }
                            }

                            // Kill any aplay, paplay, and arecord before we start playing new audio
                            try {
                                Runtime.getRuntime().exec(new String[]{"/usr/bin/killall", "aplay"});
                            } catch (IOException quitAplayException) {
                                if (isTestMode) {
                                    System.out.println("quitAplayException: " + quitAplayException);
                                }
                            }

                            try {
                                Runtime.getRuntime().exec(new String[]{"/usr/bin/killall", "paplay"});
                            } catch (IOException quitPaplayException) {
                                if (isTestMode) {
                                    System.out.println("quitPaplayException: " + quitPaplayException);
                                }
                            }

                            try {
                                Runtime.getRuntime().exec(new String[]{"/usr/bin/killall", "arecord"});
                            } catch (IOException quitArecordException) {
                                if (isTestMode) {
                                    System.out.println("quitArecordException: " + quitArecordException);
                                }
                            }

                            if (!isLinuxUbiquityMode) {
                                // Wait up to 5 seconds for Pulse to be ready before we start playing new audio. (Pulse isn't loaded in pre-install)
                                for (int waitForPulseToBeReadyAttempt = 0; waitForPulseToBeReadyAttempt < 10; waitForPulseToBeReadyAttempt++) {
                                    if (new CommandReader(new String[]{"/usr/bin/pactl", "list", "short", "sinks"}).getFirstOutputLine().endsWith("SUSPENDED")) {
                                        break;
                                    } else {
                                        TimeUnit.MILLISECONDS.sleep(500);
                                    }
                                }
                            }

                            // Restoring ALSA before we start seems to help with some volume sync issues on Mint 19.3
                            try {
                                Runtime.getRuntime().exec(new String[]{"/usr/sbin/alsactl", "restore"}).waitFor();
                                TimeUnit.MILLISECONDS.sleep(500);
                            } catch (IOException | InterruptedException alsaRestoreException) {
                                if (isTestMode) {
                                    System.out.println("alsaRestoreException: " + alsaRestoreException);
                                }
                            }

                            /* NOTE: No longer picking default output card as of version 2025.2.20-3 to be able to more easily test USB speakers, but keeping old code commented out for reference.
                            String lastOutputCard = "UNKNOWN CARD";
                            String[] outputCardsAndDevicesInfo = new CommandReader(new String[]{"/usr/bin/aplay", "-l"}).getOutputLinesContaining("card");

                            for (String thisOutputCardAndDeviceInfo : outputCardsAndDevicesInfo) {
                                if (!thisOutputCardAndDeviceInfo.contains("HDMI")) {
                                    String[] thisOutputCardAndDeviceInfoParts = thisOutputCardAndDeviceInfo.split(":");
                                    if (thisOutputCardAndDeviceInfoParts[0].startsWith("card") && !thisOutputCardAndDeviceInfoParts[0].equals(lastOutputCard)) {
                                        lastOutputCard = thisOutputCardAndDeviceInfoParts[0];
                                        String thisOutputCard = lastOutputCard.replaceAll("[^0-9]", "");

                                        // Actual desired volume will get set below.
                                        String setVolumeForOutputCardOutput = new CommandReader(new String[]{"/usr/bin/amixer", "-c", thisOutputCard, "-M", "sset", "Master", "playback", "100%", "unmute"}).getFirstOutputLine();

                                        if (!setVolumeForOutputCardOutput.isEmpty()) {
                                            outputCard = thisOutputCard;

                                            if (thisOutputCardAndDeviceInfoParts.length >= 2 && thisOutputCardAndDeviceInfoParts[1].contains("device ")) {
                                                outputDevice = thisOutputCardAndDeviceInfoParts[1].split("device ")[1];
                                            }
                                        }
                                    }
                                }
                            }
                             */
                            TimeUnit.MILLISECONDS.sleep(500);

                            boolean acpiListenerGotHeadphoneState = false;

                            if (!headphonesAreConnected && new File("/tmp/qa_helper-acpi_listener.txt").exists()) {
                                try {
                                    List<String> acpiListenerLines = Files.readAllLines(Paths.get("/tmp/qa_helper-acpi_listener.txt"));
                                    for (String acpiListenerLine : acpiListenerLines) {
                                        // headphonesAreConnected will be accurate for the last event detected. Can't just check last line since other events could get logged.
                                        if (acpiListenerLine.endsWith("HEADPHONE unplug")) {
                                            headphonesAreConnected = false;
                                            acpiListenerGotHeadphoneState = true;
                                        } else if (acpiListenerLine.endsWith("HEADPHONE plug")) {
                                            headphonesAreConnected = true;
                                            acpiListenerGotHeadphoneState = true;
                                        }
                                    }
                                } catch (IOException acpiListenerException) {
                                    if (isTestMode) {
                                        System.out.println("acpiListenerException: " + acpiListenerException);
                                    }
                                }
                            }

                            if (!headphonesAreConnected && !acpiListenerGotHeadphoneState && new File("/proc/asound/card" + outputCard + "/codec#0").exists()) {
                                // This method of headphone detection is not reliable and does not work on all computer.
                                // But, still use it as a fallback if nothing has been logged yet by acpi_listen which started when QA Helper launched.

                                try {
                                    List<String> outputCardCodecInfoLines = Files.readAllLines(Paths.get("/proc/asound/card" + outputCard + "/codec#0"));
                                    boolean nextPinCtlsIsHeadphoneJack = false;
                                    for (String thisOutputCardCodecInfoLine : outputCardCodecInfoLines) {
                                        if (thisOutputCardCodecInfoLine.contains("Conn = Analog, Color = Unknown") || thisOutputCardCodecInfoLine.contains("Conn = 1/8, Color = Green")) {
                                            nextPinCtlsIsHeadphoneJack = true;
                                        } else if (nextPinCtlsIsHeadphoneJack && thisOutputCardCodecInfoLine.contains("Pin-ctls:")) {
                                            if (thisOutputCardCodecInfoLine.contains("0x00:")) {
                                                headphonesAreConnected = true;
                                                break;
                                            }

                                            nextPinCtlsIsHeadphoneJack = false;
                                        }
                                    }
                                } catch (IOException outputCardCodecInfoException) {
                                    if (isTestMode) {
                                        System.out.println("outputCardCodecInfoException: " + outputCardCodecInfoException);
                                    }
                                }
                            }

                            // Everything is quiter in pre-installation environment for some reason. Maybe because Pulse isn't loaded?
                            // Also, if not a laptop and headphones connected, we don't know if we area testing external speakers or headphones, so also make play louder in that case.
                            String desiredVolumePercentage = (headphonesAreConnected ? ((!isLaptop || isLinuxUbiquityMode) ? "75" : "35") : ((!isLaptop || isLinuxUbiquityMode) ? "100" : "75"));

                            String[][] outputCardArguments = new String[][]{
                                {"-c", outputCard},
                                {}, // Still try to set default volume for when we're not in pre-install environment.
                                {"-D", "pulse"}, // Still try to set pulse volume for when we're not in pre-install environment.
                                {"-D", "pipewire"} // And try pipewire which replaces pulse on Mint 22 and newer.
                            };

                            for (String[] thisOutputCardArguments : outputCardArguments) {
                                String thisCardMixerControlName = "Master";
                                ArrayList<String> amixerScontentsCommand = new ArrayList<>();
                                amixerScontentsCommand.add("/usr/bin/amixer");
                                amixerScontentsCommand.addAll(Arrays.asList(thisOutputCardArguments));
                                amixerScontentsCommand.add("scontents");
                                for (String thisMixerContentsLine : new CommandReader(amixerScontentsCommand.toArray(String[]::new)).getOutputLines()) {
                                    if (thisMixerContentsLine.startsWith("Simple mixer control '")) {
                                        thisCardMixerControlName = thisMixerContentsLine.substring(21);
                                    } else if (thisMixerContentsLine.startsWith("  Playback channels")) {
                                        try {
                                            boolean shouldMute = ((headphonesAreConnected && thisCardMixerControlName.startsWith("'Speaker")) || (!headphonesAreConnected && thisCardMixerControlName.startsWith("'Headphone")));
                                            if (thisCardMixerControlName.startsWith("'Sidetone")) { // Saw that turning up Sidetone on USB headphones causes constant loud buzz, so always MUTE!
                                                shouldMute = true;
                                            } else if (selectedOutputCardString.contains(" USB ")) { // Otherwise, never must USB output since it could be speakers OR headphones.
                                                shouldMute = false;
                                            }

                                            ArrayList<String> amixerSsetCommand = new ArrayList<>();
                                            amixerSsetCommand.add("/usr/bin/amixer");
                                            amixerSsetCommand.addAll(Arrays.asList(thisOutputCardArguments));
                                            amixerSsetCommand.addAll(Arrays.asList("-M", "sset", thisCardMixerControlName, "playback", (shouldMute ? "0" : (thisCardMixerControlName.contains(" Boost'") ? "100" : desiredVolumePercentage)) + "%", (shouldMute ? "mute" : "unmute")));
                                            Runtime.getRuntime().exec(amixerSsetCommand.toArray(String[]::new)).waitFor();
                                        } catch (IOException | InterruptedException setCardOutputVolumeException) {
                                            if (isTestMode) {
                                                System.out.println("setCardOutputVolumeException (" + String.join(" ", thisOutputCardArguments) + " + " + thisCardMixerControlName + "): " + setCardOutputVolumeException);
                                            }
                                        }
                                    }
                                }
                            }
                        } else if (isMacOS) {
                            if (isMacOSmojaveOrNewer) { // "currentRoute" of "AVAudioSession" is not available on macOS 10.13 High Sierra and older.
                                headphonesAreConnected = new CommandReader(new String[]{"/usr/bin/osascript", "-l", "JavaScript",
                                    "-e", "ObjC.import('objc')", // Detecting headphones in Objective-C: https://stackoverflow.com/a/21382748
                                    "-e", "ObjC.import('AVFoundation')", // Loading "AVFoundation" classes in JXA: https://gist.github.com/SKaplanOfficial/b564edb219a40965c464c284dc9ca3e3#file-recordaudio-scpt-L11
                                    "-e", "const headphonesConnected = $.objc_getClass('AVAudioSession').sharedInstance.currentRoute.outputs.js.map(thisPortDescription => thisPortDescription.portType.js).includes('Headphones')",
                                    "-e", "const app = Application.currentApplication()",
                                    "-e", "app.includeStandardAdditions = true",
                                    "-e", "app.setVolume(null, {outputVolume: (headphonesConnected ? 25 : 75), alertVolume: 100, outputMuted: false})",
                                    "-e", "headphonesConnected"}).getFirstOutputLine().equals("true");
                            } else {
                                try {
                                    Runtime.getRuntime().exec(new String[]{"/usr/bin/osascript", "-e", "set volume output volume " + (turnDownOutputVolumeCheckbox.isSelected() ? "25" : "75") + " without output muted", "-e", "set volume alert volume 100"}).waitFor();
                                } catch (IOException | InterruptedException setMacOutputVolumeException) {
                                    if (isTestMode) {
                                        System.out.println("setMacOutputVolumeException: " + setMacOutputVolumeException);
                                    }
                                }
                            }
                        }

                        boolean didPlayAudioTest = false;

                        if (!isLinux) {
                            // Java AudioSystem is not reliable on Linux and can fail with UnsatisfiedLinkError or an "Invalid Format" Exception for seemingly no reason.
                            // But, worst of all, sometimes it doesn't error and just doesn't play anything.

                            try (Clip audioTestClip = AudioSystem.getClip()) {
                                audioTestClip.open(AudioSystem.getAudioInputStream(this.getClass().getResource("/Resources/StereoSoundTest.wav")));
                                audioTestClip.start();

                                publish("setProgressMax");

                                for (int waitSecond = 0; waitSecond < 6; waitSecond++) {
                                    publish("incrementProgress");

                                    if (isMacOSmojaveOrNewer) {
                                        long startGetMacHeadphoneConnectedTime = System.currentTimeMillis();

                                        headphonesAreConnected = new CommandReader(new String[]{"/usr/bin/osascript", "-l", "JavaScript",
                                            "-e", "ObjC.import('objc')", // Detecting headphones in Objective-C: https://stackoverflow.com/a/21382748
                                            "-e", "ObjC.import('AVFoundation')", // Loading "AVFoundation" classes in JXA: https://gist.github.com/SKaplanOfficial/b564edb219a40965c464c284dc9ca3e3#file-recordaudio-scpt-L11
                                            "-e", "const headphonesConnected = $.objc_getClass('AVAudioSession').sharedInstance.currentRoute.outputs.js.map(thisPortDescription => thisPortDescription.portType.js).includes('Headphones')",
                                            "-e", "const app = Application.currentApplication()",
                                            "-e", "app.includeStandardAdditions = true",
                                            "-e", "if (headphonesConnected != " + headphonesAreConnected + ") app.setVolume(null, {outputVolume: (headphonesConnected ? 25 : 75), alertVolume: 100, outputMuted: false})",
                                            "-e", "headphonesConnected"}).getFirstOutputLine().equals("true"); // NOTE: The volume will only be changed if the headphone state is changed to allow a technician to manually adjust the volume after a test starts without it being re-set by this code.

                                        long getMacHeadphoneConnectedDuration = (System.currentTimeMillis() - startGetMacHeadphoneConnectedTime);

                                        if (getMacHeadphoneConnectedDuration < 1000) {
                                            // Checking Mac headphone connected state (and setting volume) usually takes about 200ms, but can take up to around 2 seconds right after headphones are connected or disconnected,
                                            // so don't wait if it already took longer than 1 second, or subtract the duration from our desired 1 second wait time to not cumulatively wait too long for the whole test.

                                            TimeUnit.MILLISECONDS.sleep(1000 - getMacHeadphoneConnectedDuration);
                                        }
                                    } else {
                                        TimeUnit.SECONDS.sleep(1);
                                    }
                                }

                                didPlayAudioTest = true;
                            } catch (Error | Exception playAudioTestErrorOrException) {
                                if (isTestMode) {
                                    System.out.println("playAudioTestErrorOrException: " + playAudioTestErrorOrException);
                                }
                            }
                        }

                        if (!didPlayAudioTest && !isWindows) {
                            File stereoSoundTestTempFile = File.createTempFile("qa_helper-audio_test", ".wav");
                            stereoSoundTestTempFile.deleteOnExit();

                            String stereoSoundTestTempPath = "";

                            try (InputStream stereoSoundTestInputStream = this.getClass().getClassLoader().getResourceAsStream("Resources/StereoSoundTest.wav")) {
                                try (FileOutputStream stereoSoundTestOutputStream = new FileOutputStream(stereoSoundTestTempFile)) {
                                    byte[] buf = new byte[1024];
                                    int bytesRead;

                                    while ((bytesRead = stereoSoundTestInputStream.read(buf)) > 0) {
                                        stereoSoundTestOutputStream.write(buf, 0, bytesRead);
                                    }

                                    stereoSoundTestTempPath = stereoSoundTestTempFile.getPath();
                                } catch (Exception writeStereoSoundTestException) {
                                    if (isTestMode) {
                                        System.out.println("writeStereoSoundTestException: " + writeStereoSoundTestException);
                                    }
                                }
                            } catch (Exception readStereoSoundTestException) {
                                if (isTestMode) {
                                    System.out.println("readStereoSoundTestException: " + readStereoSoundTestException);
                                }
                            }

                            if (!stereoSoundTestTempPath.isEmpty()) {
                                for (int playAudioTestAttempt = 0; playAudioTestAttempt < 3; playAudioTestAttempt++) {
                                    publish("setProgressMax");

                                    try {
                                        Runtime.getRuntime().exec((isLinux // Mint 19.3 in pre-install seems to have an issue on some computers where the beginning get's cut off. This "aplay /dev/null; sleep 1" seems to help work around it. (Like aplay needs to be warmed up or something stupid like that?)
                                                ? new String[]{"/bin/sh", "-c", "/usr/bin/aplay /dev/null; /bin/sleep 1; /usr/bin/aplay -D hw:" + outputCard + "," + outputDevice + " '" + stereoSoundTestTempPath.replace("'", "'\\''") + "' || /usr/bin/aplay -D plughw:" + outputCard + "," + outputDevice + " '" + stereoSoundTestTempPath.replace("'", "'\\''") + "'"} // If "hw:" device fails, try the "plughw:" device to include software conversions.
                                                : new String[]{"/usr/bin/afplay", stereoSoundTestTempPath})
                                        );

                                        for (int waitSecond = 0; waitSecond < (isLinux ? 7 : 6); waitSecond++) {
                                            publish("incrementProgress");
                                            TimeUnit.SECONDS.sleep(1);
                                        }

                                        didPlayAudioTest = true;

                                        break;
                                    } catch (IOException | InterruptedException playAudioTestFileException) {
                                        if (isTestMode) {
                                            System.out.println("playAudioTestFileException: " + playAudioTestFileException);
                                        }
                                        TimeUnit.SECONDS.sleep(1);
                                    }
                                }
                            }

                            if (isLinux) { // There is an odd rare bug on Linux Mint 20.3 (not sure if it affect other versions) which may be caused by driver issues where the audio keeps looping in segments and it can go on for a long time, so "killall aplay" just in case to stop it.
                                try {
                                    Runtime.getRuntime().exec(new String[]{"/usr/bin/killall", "aplay"});
                                } catch (IOException quitAplayException) {
                                    if (isTestMode) {
                                        System.out.println("quitAplayException: " + quitAplayException);
                                    }
                                }
                            }

                            stereoSoundTestTempFile.delete();
                        }

                        if (!didPlayAudioTest) {
                            publish("error");
                        } else if (headphonesAreConnected) {
                            headphoneTestCount++;
                        } else {
                            speakerTestCount++;
                        }

                        return null;
                    }

                    @Override
                    protected void process(java.util.List<String> tasks) {
                        tasks.forEach((thisTask) -> {
                            switch (thisTask) {
                                case "setProgressMax":
                                    loadingWindow.setLoadingProgressBarToMax((isLinux ? 7 : 6));
                                    break;
                                case "incrementProgress":
                                    loadingWindow.incrementLoadingProgressBar();
                                    break;
                                case "error":
                                    loadingWindow.closeWindow();
                                    JOptionPane.showMessageDialog((isWindowsPE ? null : qaHelperWindow), "<html><b>Failed to Play Audio Test</b></html>", "QA Helper  —  Audio Test Error", JOptionPane.ERROR_MESSAGE);
                                    break;
                                default:
                                    break;
                            }
                        });
                    }

                    @Override
                    protected void done() {
                        if (isLinux && new File("/tmp/qa_helper-audio_output_card.txt").exists()) {
                            new File("/tmp/qa_helper-audio_output_card.txt").delete();
                        }

                        loadingWindow.closeWindow();

                        if (isWindows) {
                            try {
                                if (!isWindowsPE || new File("\\Windows\\System32\\taskkill.exe").exists()) {
                                    Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\taskkill.exe", "/im", "SndVol.exe", "/t"}).waitFor();
                                } else {
                                    // taskkill does not exist in WinPE (unless it has been manually copied in), no need to make it hard a requirement when I can just use PowerShell (PowerShell just takes longer so we'll still use taskkill when it's available).
                                    Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "Stop-Process -Name SndVol"}).waitFor();
                                }
                            } catch (IOException | InterruptedException quitSoundMixerException) {
                                if (isTestMode) {
                                    System.out.println("quitSoundMixerException: " + quitSoundMixerException);
                                }
                            }
                        }

                        ArrayList<String> audioTestCompletedButtons = new ArrayList<>(Arrays.asList("Continue", "Test Audio Again"));

                        boolean didMinimumAudioTests = (isPeripheralTestMode || (((isLinux || isMacOSmojaveOrNewer) && isLaptop && (speakerTestCount >= 1) && (headphoneTestCount >= 1)) || (((!isLinux && !isMacOSmojaveOrNewer) || !isLaptop) && (speakerTestCount + headphoneTestCount) >= 2)));

                        if (!didMinimumAudioTests) {
                            Collections.reverse(audioTestCompletedButtons);
                        }

                        focusWindow();
                        int audioTestCompletedDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html><b>Audio Test Completed</b>"
                                + "<br/><br/><br/>"
                                + new TwemojiImage("CheckMarkButton", qaHelperWindow).toImgTag("left") + " <b style='color: " + successColorHTML + "'>AUDIO TEST PASSED IF:</b><br/>"
                                + "<ul style='margin-left: 20px'>"
                                + "<li>You heard the <u>tones crisply and clearly</u> from the <u>left speakers</u>,<br/>"
                                + "then the <u>right speakers</u>, and then <u>both speakers</u>" + (!isPeripheralTestMode ? " with both the<br/>"
                                        + "<u>built-in speakers</u> as well as the <u>headphones</u>" : "") + ".</li>"
                                + "</ul>"
                                + "<br/>"
                                + new TwemojiImage("CrossMark", qaHelperWindow).toImgTag("left") + " <b style='color: " + errorColorHTML + "'>AUDIO TEST FAILED IF:</b><br/>"
                                + "<ul style='margin-left: 20px'>"
                                + "<li>You <u>did not hear the tones out</u> out of the <u>correct speakers</u><br/>"
                                + "or they <u>didn't sound crisp and clear</u>"
                                + (!isPeripheralTestMode ? " for either<br/>the <u>built-in speakers</u> or the <u>headphones</u>" : "") + ".</li>"
                                + "</ul>"
                                + "<br/><br/>"
                                + (!isPeripheralTestMode && (isLinux || isMacOSmojaveOrNewer) // Can't detect headphone vs speaker on Windows or macOS 10.13 High Sierra and older.
                                        ? "<b>Number of Internal Speaker Tests Run:</b> " + speakerTestCount + "<br/><br/>"
                                        + "<b>Number of Headphone Port Tests Run:</b> " + headphoneTestCount + "<br/><br/><br/>"
                                        : "<b>Number of Audio Tests Run:</b> " + (speakerTestCount + headphoneTestCount) + "<br/><br/><br/>")
                                + "<center>"
                                + (!isPeripheralTestMode ? new TwemojiImage("ShuffleTracksButton", qaHelperWindow).toImgTag("left") + " <i>REMEMBER TO TEST BOTH <u>BUILT-IN SPEAKERS</u> AND <u>HEADPHONES</u></i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right") + "<br/><br/>" : "")
                                + ((!isPeripheralTestMode && !isLaptop) ? new TwemojiImage("Headphone", qaHelperWindow).toImgTag("left") + " <i>REMEMBER TO TEST <u>ALL HEADPHONE PORTS</u></i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right") + "<br/><br/>" : "")
                                + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>CONSULT AN INSTRUCTOR IF AUDIO TEST FAILED</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")
                                + "</center></html>", "QA Helper  —  Audio Test Completed", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("Loudspeaker", qaHelperWindow).toImageIcon(), audioTestCompletedButtons.toArray(), audioTestCompletedButtons.get(0));

                        String audioTestCompletedDialogResponseString = "Continue";
                        if (audioTestCompletedDialogResponse > -1) {
                            audioTestCompletedDialogResponseString = audioTestCompletedButtons.get(audioTestCompletedDialogResponse);
                        }

                        if (audioTestCompletedDialogResponseString.contains("Test")) {
                            setActionsEnabled(true);
                            btnTestAudioActionPerformed(evt);
                        } else {
                            if (didMinimumAudioTests && !isAudioVerified && btnVerifyAudio.isVisible()) {
                                if (btnVerifyAudio.isEnabled()) {
                                    btnVerifyAudioActionPerformed(null);
                                } else {
                                    // If btnVerifyAudio is not enabled (such as when in WinPE), just focus the next test button.
                                    focusNextTestTaskVerifyButton(btnTestAudio);
                                }
                            }

                            setActionsEnabled(true);
                        }
                    }
                }).execute();
            } else {
                if (isWindows) {
                    try {
                        if (!isWindowsPE || new File("\\Windows\\System32\\taskkill.exe").exists()) {
                            Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\taskkill.exe", "/im", "SndVol.exe", "/t"}).waitFor();
                        } else {
                            // taskkill does not exist in WinPE (unless it has been manually copied in), no need to make it hard a requirement when I can just use PowerShell (PowerShell just takes longer so we'll still use taskkill when it's available).
                            Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "Stop-Process -Name SndVol"}).waitFor();
                        }
                    } catch (IOException | InterruptedException quitSoundMixerException) {
                        if (isTestMode) {
                            System.out.println("quitSoundMixerException: " + quitSoundMixerException);
                        }
                    }
                }

                setActionsEnabled(true);
                if (!isPeripheralTestMode) {
                    focusNextTestTaskVerifyButton(btnTestAudio);
                }
            }
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnTestAudioActionPerformed

    private void btnVerifyAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifyAudioActionPerformed
        if ((actionsEnabled || (evt == null)) && !isWindowsPE) { // Do not allow Audio Verification in WinPE (even though we can test when in WinRE) since we want it verified in OS after driver are installed.
            setActionsEnabled(false);

            if (JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>" + ((evt == null) ? "Would you like " : "Are you sure you want ") + "to <i>" + (isAudioVerified ? "UNVERIFY" : "verify") + "</i> the audio outputs?</b></html>", "QA Helper  —  Confirm " + (isAudioVerified ? "Unverify" : "Verify") + " Audio", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage((isAudioVerified ? "CrossMark" : "CheckBoxWithCheck"), qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                isAudioVerified = !isAudioVerified;

                writeToHelperLogFile("Test: Audio " + (isAudioVerified ? "Verified" : "UNVERIFIED"));

                btnVerifyAudio.setText((isAudioVerified ? "Verified" : "Verify"));
                btnVerifyAudio.setFont(btnVerifyAudio.getFont().deriveFont((isAudioVerified ? Font.BOLD : lblVersion.getFont().getStyle())));
                btnVerifyAudio.setForeground(isAudioVerified ? verifiedColor : defaultColor);
                btnVerifyAudio.setBorderPainted(!isAudioVerified);

                new LinuxAutoScripts("Audio " + (isAudioVerified ? "Verified" : "Unverified"), adminPassword);

                focusNextTestTaskVerifyButton(btnVerifyAudio);
            } else {
                focusNextTestTaskVerifyButton((evt == null) ? btnVerifyAudio : btnTestAudio); // Stay on audio test is user chooses not to verify after testing
            }

            setActionsEnabled(true);
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnVerifyAudioActionPerformed

    private void btnTestMicrophoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestMicrophoneActionPerformed
        if (actionsEnabled && !isWindowsPE) {

            setActionsEnabled(false);

            if (isMacOS && new CommandReader(new String[]{"/usr/bin/osascript", "-e", "input volume of (get volume settings)"}).getFirstOutputLine().equals("missing value")) {
                playAlertSound("error");
                JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>No Microphone Detected</b><br/><br/><i>If this computer is supposed to have a microphone, then Microphone Test has failed.</i></html>", "QA Helper  —  Microphone Test Error", JOptionPane.ERROR_MESSAGE, new TwemojiImage("NoEntry", qaHelperWindow).toImageIcon(32));

                setActionsEnabled(true);
                if (!isPeripheralTestMode) {
                    focusNextTestTaskVerifyButton(btnTestMicrophone);
                }
            } else {
                final int microphoneTestDurationSeconds = 10;
                ArrayList<String> inputCards = new ArrayList<>();
                int defaultInputCardIndex = -1;
                ArrayList<String> outputCards = new ArrayList<>();
                int defaultOutputCardIndex = -1;

                if (isLinux) {
                    if (new File("/tmp/qa_helper-audio_output_card.txt").exists()) {
                        new File("/tmp/qa_helper-audio_output_card.txt").delete();
                    }

                    String[] inputCardsAndDevicesInfo = new CommandReader(new String[]{"/usr/bin/arecord", "-l"}).getOutputLinesContaining("card");

                    for (String thisInputCardAndDeviceInfo : inputCardsAndDevicesInfo) {
                        if (!thisInputCardAndDeviceInfo.contains("HDMI")) {
                            String[] thisInputCardAndDeviceInfoParts = thisInputCardAndDeviceInfo.split(":");
                            if (thisInputCardAndDeviceInfoParts[0].startsWith("card")) {
                                String thisInputCard = thisInputCardAndDeviceInfoParts[0].replaceAll("[^0-9]", "");

                                String thisInputCardName = thisInputCardAndDeviceInfo.substring(thisInputCardAndDeviceInfo.indexOf(": ") + 2);
                                if (thisInputCardAndDeviceInfoParts.length >= 1 && thisInputCardAndDeviceInfoParts[1].contains("[") && thisInputCardAndDeviceInfoParts[1].contains("]")) {
                                    thisInputCardName = thisInputCardAndDeviceInfoParts[1].substring(thisInputCardAndDeviceInfoParts[1].indexOf("[") + 1, thisInputCardAndDeviceInfoParts[1].indexOf("]")).trim();
                                    if (thisInputCardName.isEmpty()) {
                                        thisInputCardName = thisInputCardAndDeviceInfoParts[1].substring(0, thisInputCardAndDeviceInfoParts[1].indexOf("[")).trim();
                                    }

                                    if (thisInputCardAndDeviceInfoParts[1].contains(" device ")) {
                                        thisInputCardName += " (Device " + thisInputCardAndDeviceInfoParts[1].substring(thisInputCardAndDeviceInfoParts[1].indexOf(" device ") + 8);

                                        if (thisInputCardAndDeviceInfoParts.length >= 2 && thisInputCardAndDeviceInfoParts[2].contains("[") && thisInputCardAndDeviceInfoParts[2].contains("]")) {
                                            String thisInputCardDeviceName = thisInputCardAndDeviceInfoParts[2].substring(thisInputCardAndDeviceInfoParts[2].indexOf("[") + 1, thisInputCardAndDeviceInfoParts[2].indexOf("]")).trim();
                                            if (thisInputCardDeviceName.isEmpty()) {
                                                thisInputCardDeviceName = thisInputCardAndDeviceInfoParts[2].substring(0, thisInputCardAndDeviceInfoParts[2].indexOf("[")).replace("(*)", "").trim();
                                            }
                                            thisInputCardName += ": " + thisInputCardDeviceName;
                                        }

                                        thisInputCardName += ")";
                                    }
                                }

                                // Actual desired volume will get set below.
                                if ((defaultInputCardIndex == -1) && !new CommandReader(new String[]{"/usr/bin/amixer", "-c", thisInputCard, "-M", "sset", "Capture", "capture", "100%", "unmute"}).getFirstOutputLine().isEmpty()) {
                                    defaultInputCardIndex = inputCards.size();
                                }

                                inputCards.add("Input " + thisInputCard + ": " + thisInputCardName);
                            }
                        }
                    }

                    String[] outputCardsAndDevicesInfo = new CommandReader(new String[]{"/usr/bin/aplay", "-l"}).getOutputLinesContaining("card");

                    for (String thisOutputCardAndDeviceInfo : outputCardsAndDevicesInfo) {
                        if (!thisOutputCardAndDeviceInfo.contains("HDMI")) {
                            String[] thisOutputCardAndDeviceInfoParts = thisOutputCardAndDeviceInfo.split(":");
                            if (thisOutputCardAndDeviceInfoParts[0].startsWith("card")) {
                                String thisOutputCard = thisOutputCardAndDeviceInfoParts[0].replaceAll("[^0-9]", "");

                                String thisOutputCardName = thisOutputCardAndDeviceInfo.substring(thisOutputCardAndDeviceInfo.indexOf(": ") + 2);
                                if (thisOutputCardAndDeviceInfoParts.length >= 1 && thisOutputCardAndDeviceInfoParts[1].contains("[") && thisOutputCardAndDeviceInfoParts[1].contains("]")) {
                                    thisOutputCardName = thisOutputCardAndDeviceInfoParts[1].substring(thisOutputCardAndDeviceInfoParts[1].indexOf("[") + 1, thisOutputCardAndDeviceInfoParts[1].indexOf("]")).trim();
                                    if (thisOutputCardName.isEmpty()) {
                                        thisOutputCardName = thisOutputCardAndDeviceInfoParts[1].substring(0, thisOutputCardAndDeviceInfoParts[1].indexOf("[")).trim();
                                    }

                                    if (thisOutputCardAndDeviceInfoParts[1].contains(" device ")) {
                                        thisOutputCardName += " (Device " + thisOutputCardAndDeviceInfoParts[1].substring(thisOutputCardAndDeviceInfoParts[1].indexOf(" device ") + 8);

                                        if (thisOutputCardAndDeviceInfoParts.length >= 2 && thisOutputCardAndDeviceInfoParts[2].contains("[") && thisOutputCardAndDeviceInfoParts[2].contains("]")) {
                                            String thisOutputCardDeviceName = thisOutputCardAndDeviceInfoParts[2].substring(thisOutputCardAndDeviceInfoParts[2].indexOf("[") + 1, thisOutputCardAndDeviceInfoParts[2].indexOf("]")).trim();
                                            if (thisOutputCardDeviceName.isEmpty()) {
                                                thisOutputCardDeviceName = thisOutputCardAndDeviceInfoParts[2].substring(0, thisOutputCardAndDeviceInfoParts[2].indexOf("[")).replace("(*)", "").trim();
                                            }

                                            thisOutputCardName += ": " + thisOutputCardDeviceName;
                                        }

                                        thisOutputCardName += ")";
                                    }
                                }

                                // Actual desired volume will get set below.
                                if ((defaultOutputCardIndex == -1) && !new CommandReader(new String[]{"/usr/bin/amixer", "-c", thisOutputCard, "-M", "sset", "Master", "playback", "100%", "unmute"}).getFirstOutputLine().isEmpty()) {
                                    defaultOutputCardIndex = outputCards.size();
                                }

                                outputCards.add("Output " + thisOutputCard + ": " + thisOutputCardName);
                            }
                        }
                    }

                    if (new File("/usr/bin/cinnamon-settings").exists()) { // "cinnamon-settings" won't exist on MATE, but if we are on Cinnamon ALSO open it.
                        try {
                            if (!new CommandReader(new String[]{"/usr/bin/wmctrl", "-l"}).getFirstOutputLineContaining("Sound").isEmpty()) {
                                Runtime.getRuntime().exec(new String[]{"/usr/bin/wmctrl", "-Fa", "Sound"});
                            } else {
                                Runtime.getRuntime().exec(new String[]{"/usr/bin/cinnamon-settings", "sound", "-t", "1"});
                            }

                            TimeUnit.MILLISECONDS.sleep(500); // Sleep a little to make sure the window has opened and can be moved, and so that focusWindow() gets focus back

                            Runtime.getRuntime().exec(new String[]{"/usr/bin/wmctrl", "-r", "Sound", "-e", "0,0,0,-1,-1"});
                        } catch (IOException | InterruptedException openSoundInputSettingsException) {
                            if (isTestMode) {
                                System.out.println("openSoundInputSettingsException: " + openSoundInputSettingsException);
                            }
                        }

                        focusWindow();
                    }
                } else if (isWindows) {
                    try {
                        Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\SndVol.exe"});
                        Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\control.exe", "mmsys.cpl,,1"});
                        TimeUnit.MILLISECONDS.sleep(500); // Sleep a little to make sure focusWindow() gets focus back
                    } catch (IOException | InterruptedException openWindowsSoundMixerException) {
                        if (isTestMode) {
                            System.out.println("openWindowsSoundMixerException: " + openWindowsSoundMixerException);
                        }
                    }

                    focusWindow();
                }

                JComboBox inputCardComboBox = new JComboBox<>(inputCards.toArray(String[]::new));
                if ((defaultInputCardIndex >= 0) && !inputCards.isEmpty()) {
                    inputCardComboBox.setSelectedIndex(defaultInputCardIndex);
                }

                JComboBox microphoneInputVolumeComboBox = new JComboBox<>(new String[]{"Microphone Input Volume: 100%", "Microphone Input Volume: 75%", "Microphone Input Volume: 50%", "Microphone Input Volume: 25%", "Microphone Input Volume: 10%"});
                microphoneInputVolumeComboBox.setSelectedIndex(2);

                JComboBox outputCardComboBox = new JComboBox<>(outputCards.toArray(String[]::new));
                if ((defaultOutputCardIndex >= 0) && !outputCards.isEmpty()) {
                    outputCardComboBox.setSelectedIndex(defaultOutputCardIndex);
                }

                int microphoneTestPromptReturn = JOptionPane.showConfirmDialog(qaHelperWindow, new Object[]{"<html><b>Microphone Test will start an audio recording and record for <u>" + microphoneTestDurationSeconds + " seconds</u>.</b>"
                    + "<br/><br/>"
                    + new TwemojiImage("SpeakingHead", qaHelperWindow).toImgTag("left") + " <i><u>Speak a phrase</u> during the recording so that we can<br/>"
                    + new TwemojiImage("Blank", qaHelperWindow).toImgTag("left") + " make sure the <u>microphone records crisply and clearly</u>.</i>"
                    + "<br/><br/>"
                    + new TwemojiImage("Stopwatch", qaHelperWindow).toImgTag("left") + " <b><i>After " + microphoneTestDurationSeconds + " seconds of audio is recorded</i>, it will be <u>played back to you</u>.</b>"
                    + "<br/><br/>"
                    + new TwemojiImage("Ear", qaHelperWindow).toImgTag("left") + " <u>Listen closely</u> to the recording to make sure you can <u>understand</u><br/>"
                    + new TwemojiImage("Blank", qaHelperWindow).toImgTag("left") + " <u>the phrase you spoke</u> and that it <u>sounds crisp and clear</u>."
                    + "<br/><br/><br/>"
                    + new TwemojiImage("CheckMarkButton", qaHelperWindow).toImgTag("left") + " <b style='color: " + successColorHTML + "'>MICROPHONE TEST PASSED IF:</b>"
                    + "<ul style='margin-left: 20px'>"
                    + "<li>You hear your recording <u>crisply and clearly</u>.</li>"
                    + "</ul>"
                    + "<br/>"
                    + new TwemojiImage("CrossMark", qaHelperWindow).toImgTag("left") + " <b style='color: " + errorColorHTML + "'>MICROPHONE TEST FAILED IF:</b>"
                    + "<ul style='margin-left: 20px'>"
                    + "<li><u>Nothing</u> gets recorded.</li>"
                    + "<li>The recording <u>doesn't sound crisp and clear</u>.</li>"
                    + "</ul>"
                    + "<br/><center>"
                    + (isWindows ? new TwemojiImage("LevelSlider", qaHelperWindow).toImgTag("left") + " <i>SET INPUT AND OUTPUT VOLUMES TO <u>APPROPRIATE LEVELS</u> BEFORE STARTING TEST</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right") + "<br/><br/>" : "")
                    + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>CONSULT AN INSTRUCTOR IF MICROPHONE TEST FAILS</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")
                    + "</center></html>",
                    (isLinux ? " " : ""),
                    (isLinux ? "<html><b>Input Options:</b></html>" : ""),
                    ((isLinux && !inputCards.isEmpty()) ? inputCardComboBox : ""),
                    (isLinux ? microphoneInputVolumeComboBox : ""),
                    (isLinux ? "<html>" + new TwemojiImage("Warning", qaHelperWindow).toImgTag("left") + " <i>Only adjust mic volume if the previous test was too quiet or too loud.</i></html>" : ""),
                    ((isLinux && !outputCards.isEmpty()) ? " " : ""),
                    ((isLinux && !outputCards.isEmpty()) ? "<html><b>Output Options:</b></html>" : ""),
                    ((isLinux && !outputCards.isEmpty()) ? outputCardComboBox : "")
                }, "QA Helper  —  Microphone Test", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, new TwemojiImage("StudioMicrophone", qaHelperWindow).toImageIcon());

                if (isLinux) {
                    File micTestRecordingFile = new File(System.getProperty("java.io.tmpdir"), "qa_helper-mic_test.wav");
                    if (micTestRecordingFile.exists()) {
                        micTestRecordingFile.delete();
                    }
                }

                if (microphoneTestPromptReturn == JOptionPane.OK_OPTION) {
                    loadingWindow.setLoadingTextAndDisplay("QA Helper is Setting Up Recording", "Working", "StudioMicrophone");
                    (new SwingWorker<Boolean, String>() {
                        @Override
                        protected Boolean doInBackground() throws Exception {
                            boolean didRecordAndPlayBack = true;

                            String inputCard = "0";
                            String inputDevice = "0";

                            String selectedOutputCardString = "";
                            String outputCard = "0";
                            String outputDevice = "0";

                            boolean headphonesAreConnected = false;

                            if (isLinux) {
                                if (!inputCards.isEmpty()) {
                                    String selectedInputCardString = inputCardComboBox.getSelectedItem().toString();
                                    if (selectedInputCardString.startsWith("Input ")) {
                                        String[] selectedInputCardStringParts = selectedInputCardString.split(":");
                                        inputCard = selectedInputCardStringParts[0].replaceAll("[^0-9]", "");
                                        if (selectedInputCardStringParts.length >= 1) {
                                            if (selectedInputCardStringParts[1].contains(" (Device ")) {
                                                inputDevice = selectedInputCardStringParts[1].substring(selectedInputCardStringParts[1].indexOf(" (Device ") + 9);
                                            } else if (selectedInputCardStringParts[1].contains(" device ")) {
                                                inputDevice = selectedInputCardStringParts[1].substring(selectedInputCardStringParts[1].indexOf(" device ") + 8);
                                            }
                                        }
                                    }
                                }

                                int micInputVolume = 50;

                                try {
                                    micInputVolume = Integer.parseInt(microphoneInputVolumeComboBox.getSelectedItem().toString().replaceAll("[^0-9]", ""));
                                } catch (NumberFormatException getMicInputVolumeException) {
                                    // Ignore Error
                                }

                                if (!outputCards.isEmpty()) {
                                    selectedOutputCardString = outputCardComboBox.getSelectedItem().toString();

                                    try {
                                        Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "echo '" + selectedOutputCardString.replace("'", "'\\''") + "' > /tmp/qa_helper-audio_output_card.txt"});
                                    } catch (IOException saveAudioOutputCardException) {
                                        System.out.println("saveAudioOutputCardException: " + saveAudioOutputCardException);
                                    }

                                    headphonesAreConnected = selectedOutputCardString.contains(" USB ");
                                    if (selectedOutputCardString.startsWith("Output ")) {
                                        String[] selectedOutputCardStringParts = selectedOutputCardString.split(":");
                                        outputCard = selectedOutputCardStringParts[0].replaceAll("[^0-9]", "");
                                        if (selectedOutputCardStringParts.length >= 1) {
                                            if (selectedOutputCardStringParts[1].contains(" (Device ")) {
                                                outputDevice = selectedOutputCardStringParts[1].substring(selectedOutputCardStringParts[1].indexOf(" (Device ") + 9);
                                            } else if (selectedOutputCardStringParts[1].contains(" device ")) {
                                                outputDevice = selectedOutputCardStringParts[1].substring(selectedOutputCardStringParts[1].indexOf(" device ") + 8);
                                            }
                                        }
                                    }
                                }

                                // Kill any aplay, paplay, and arecord before we start playing new audio
                                try {
                                    Runtime.getRuntime().exec(new String[]{"/usr/bin/killall", "aplay"});
                                } catch (IOException quitAplayException) {
                                    if (isTestMode) {
                                        System.out.println("quitAplayException: " + quitAplayException);
                                    }
                                }

                                try {
                                    Runtime.getRuntime().exec(new String[]{"/usr/bin/killall", "paplay"});
                                } catch (IOException quitPaplayException) {
                                    if (isTestMode) {
                                        System.out.println("quitPaplayException: " + quitPaplayException);
                                    }
                                }

                                try {
                                    Runtime.getRuntime().exec(new String[]{"/usr/bin/killall", "arecord"});
                                } catch (IOException quitArecordException) {
                                    if (isTestMode) {
                                        System.out.println("quitArecordException: " + quitArecordException);
                                    }
                                }

                                if (!isLinuxUbiquityMode) {
                                    // Wait up to 5 seconds for Pulse to be ready before we start playing new audio. (Pulse isn't loaded in pre-install)
                                    for (int waitForPulseToBeReadyAttempt = 0; waitForPulseToBeReadyAttempt < 10; waitForPulseToBeReadyAttempt++) {
                                        if (new CommandReader(new String[]{"/usr/bin/pactl", "list", "short", "sinks"}).getFirstOutputLine().endsWith("SUSPENDED")) {
                                            break;
                                        } else {
                                            TimeUnit.MILLISECONDS.sleep(500);
                                        }
                                    }
                                }

                                // Restoring ALSA before we start seems to help with some volume sync issues on Mint 19.3
                                // This also resets the default capture device, which is good in case it ever got changed.
                                try {
                                    Runtime.getRuntime().exec(new String[]{"/usr/sbin/alsactl", "restore"}).waitFor();
                                    TimeUnit.MILLISECONDS.sleep(500);
                                } catch (IOException | InterruptedException alsaRestoreException) {
                                    if (isTestMode) {
                                        System.out.println("alsaRestoreException: " + alsaRestoreException);
                                    }
                                }

                                /* NOTE: No longer picking default input card as of version 2025.2.20-2 to be able to more easily test USB Mic inputs, but keeping old code commented out for reference.
                                String lastInputCard = "UNKNOWN CARD";
                                String[] inputCardsAndDevicesInfo = new CommandReader(new String[]{"/usr/bin/arecord", "-l"}).getOutputLinesContaining("card");

                                for (String thisInputCardAndDeviceInfo : inputCardsAndDevicesInfo) {
                                    if (!thisInputCardAndDeviceInfo.contains("HDMI")) {
                                        String[] thisInputCardAndDeviceInfoParts = thisInputCardAndDeviceInfo.split(":");
                                        if (thisInputCardAndDeviceInfoParts[0].startsWith("card") && !thisInputCardAndDeviceInfoParts[0].equals(lastInputCard)) {
                                            lastInputCard = thisInputCardAndDeviceInfoParts[0];
                                            String thisInputCard = lastInputCard.replaceAll("[^0-9]", "");

                                            // 50% capture volume sounds WAY better than any higher on many laptops.
                                            // Do not set "cap" modifier argument so that we never change the default input device.
                                            String setVolumeForInputCardOutput = new CommandReader(new String[]{"/usr/bin/amixer", "-c", thisInputCard, "-M", "sset", "Capture", "capture", micInputVolume + "%", "unmute"}).getFirstOutputLine();

                                            if (!setVolumeForInputCardOutput.isEmpty()) {
                                                inputCard = thisInputCard;

                                                if (thisInputCardAndDeviceInfoParts.length >= 2 && thisInputCardAndDeviceInfoParts[1].contains("device ")) {
                                                    inputDevice = thisInputCardAndDeviceInfoParts[1].split("device ")[1];
                                                }
                                            }
                                        }
                                    }
                                }
                                 */
                                TimeUnit.MILLISECONDS.sleep(500);

                                String[][] inputCardArguments = new String[][]{
                                    {"-c", inputCard},
                                    {}, // Still try to set default volume for when we're not in pre-install environment.
                                    {"-D", "pulse"}, // Still try to set pulse volume for when we're not in pre-install environment.
                                    {"-D", "pipewire"} // And try pipewire which replaces pulse on Mint 22 and newer.
                                };

                                for (String[] thisInputCardArguments : inputCardArguments) {
                                    String thisCardMixerControlName = "Capture";
                                    ArrayList<String> amixerScontentsCommand = new ArrayList<>();
                                    amixerScontentsCommand.add("/usr/bin/amixer");
                                    amixerScontentsCommand.addAll(Arrays.asList(thisInputCardArguments));
                                    amixerScontentsCommand.add("scontents");
                                    for (String thisMixerContentsLine : new CommandReader(amixerScontentsCommand.toArray(String[]::new)).getOutputLines()) {
                                        if (thisMixerContentsLine.startsWith("Simple mixer control '")) {
                                            thisCardMixerControlName = thisMixerContentsLine.substring(21);
                                        } else if (thisMixerContentsLine.startsWith("  Capture channels")) {
                                            try {
                                                // Do not set "cap" modifier argument so that we never change the default input device, and always set Boosts to 100%.
                                                ArrayList<String> amixerSsetCommand = new ArrayList<>();
                                                amixerSsetCommand.add("/usr/bin/amixer");
                                                amixerSsetCommand.addAll(Arrays.asList(thisInputCardArguments));
                                                amixerSsetCommand.addAll(Arrays.asList("-M", "sset", thisCardMixerControlName, "capture", (thisCardMixerControlName.contains(" Boost'") ? "100" : micInputVolume) + "%", "unmute"));
                                                Runtime.getRuntime().exec(amixerSsetCommand.toArray(String[]::new)).waitFor();
                                            } catch (IOException | InterruptedException setCardInputVolumeException) {
                                                if (isTestMode) {
                                                    System.out.println("setCardInputVolumeException (" + String.join(" ", thisInputCardArguments) + " + " + thisCardMixerControlName + "): " + setCardInputVolumeException);
                                                }
                                            }
                                        }
                                    }
                                }
                            } else if (isMacOS) {
                                try {
                                    Runtime.getRuntime().exec(new String[]{"/usr/bin/osascript", "-e", "set volume input volume 100"}).waitFor();
                                } catch (IOException | InterruptedException setMacInputVolumeException) {
                                    if (isTestMode) {
                                        System.out.println("setMacInputVolumeException: " + setMacInputVolumeException);
                                    }
                                }
                            }

                            boolean didRecordByteStream = false;
                            ByteArrayOutputStream recordingOutputByteStream = new ByteArrayOutputStream();
                            AudioFormat recordingFormat = new AudioFormat(44100, 16, 2, true, false);

                            if (!isLinux) {
                                // Java AudioSystem is not reliable on Linux and can fail with UnsatisfiedLinkError or an "Invalid Format" Exception for seemingly no reason.
                                // But, worst of all, sometimes it doesn't error and just doesn't play anything.

                                DataLine.Info lineInfo = new DataLine.Info(TargetDataLine.class, recordingFormat);
                                if (AudioSystem.isLineSupported(lineInfo)) {
                                    // Based On: https://docs.oracle.com/javase/tutorial/sound/capturing.html
                                    try (TargetDataLine recordingLine = (TargetDataLine) AudioSystem.getLine(lineInfo)) {
                                        recordingLine.open(recordingFormat);
                                        recordingLine.start();

                                        int recordingBytesRead;
                                        byte[] recordingDataBuffer = new byte[recordingLine.getBufferSize() / 5];
                                        long startTimestamp = 0;
                                        boolean didStartRecording = false;

                                        do {
                                            recordingBytesRead = recordingLine.read(recordingDataBuffer, 0, recordingDataBuffer.length);
                                            recordingOutputByteStream.write(recordingDataBuffer, 0, recordingBytesRead);

                                            if (startTimestamp == 0) {
                                                startTimestamp = new Date().getTime();
                                            } else if (!didStartRecording && (new Date().getTime() - startTimestamp >= 500)) {
                                                // Make sure data is being recorded after a half second.
                                                // If every byte is 0, that means no data was recorded for a half second.
                                                // This is important on macOS to verify we have Microphone access.

                                                boolean didRecordSomeData = false;
                                                for (byte thisRecordingByte : recordingOutputByteStream.toByteArray()) {
                                                    if (thisRecordingByte != 0) {
                                                        didRecordSomeData = true;
                                                        break;
                                                    }
                                                }

                                                if (!didRecordSomeData) {
                                                    recordingLine.stop();

                                                    if (isMacOS) {
                                                        // If no data was recorded, clear Microphone access to prompt again on next attempt.
                                                        // It may require a relaunch to actually be allowed Microphone access though.

                                                        try {
                                                            Runtime.getRuntime().exec(new String[]{"/usr/bin/tccutil", "reset", "Microphone", "org.freegeek.QA-Helper"}).waitFor();
                                                        } catch (IOException | InterruptedException resetMicrophoneAccessException) {
                                                            if (isTestMode) {
                                                                System.out.println("resetMicrophoneAccessException: " + resetMicrophoneAccessException);
                                                            }
                                                        }
                                                    }

                                                    throw new Exception("NO DATA WAS RECORDED");
                                                } else {
                                                    publish("recording");
                                                    didStartRecording = true;
                                                }
                                            }
                                        } while (new Date().getTime() - startTimestamp < 500 + (microphoneTestDurationSeconds * 1000));

                                        recordingBytesRead = recordingLine.read(recordingDataBuffer, 0, recordingDataBuffer.length);
                                        recordingOutputByteStream.write(recordingDataBuffer, 0, recordingBytesRead);

                                        recordingLine.stop();

                                        didRecordByteStream = true;
                                    } catch (Error | Exception recordingErrorOrException) {
                                        if (isTestMode) {
                                            System.out.println("recordingErrorOrException: " + recordingErrorOrException);
                                        }
                                    }
                                }
                            }

                            boolean didRecordFile = false;
                            boolean didAutomateQuickTime = false;

                            if (!didRecordByteStream) {
                                if (isLinux) {
                                    if (new CommandReader("/usr/bin/wmctrl -Fc Sound; echo $?").getFirstOutputLine().equals("0")) {
                                        TimeUnit.SECONDS.sleep(5); // Sound settings window being open interrupts arecord for some reason. Need to wait a bit after closing as well for arecord to not fail.
                                    }
                                    publish("recording");

                                    File micTestRecordingFile = new File(System.getProperty("java.io.tmpdir"), "qa_helper-mic_test.wav");

                                    for (int recordAudioAttempt = 0; recordAudioAttempt < 4; recordAudioAttempt++) {
                                        if (micTestRecordingFile.exists()) {
                                            micTestRecordingFile.delete();
                                        }

                                        if (recordAudioAttempt > 0) {
                                            publish("re-recording");
                                        }

                                        try {
                                            long startTimestamp = new Date().getTime();

                                            ArrayList<String> arecordCommand = new ArrayList<>();
                                            arecordCommand.addAll(Arrays.asList("/usr/bin/arecord", "-D", "hw:" + inputCard + "," + inputDevice, "-f", "cd"));
                                            if (recordAudioAttempt > 1) { // Try forcing SINGLE CHANNEL recording if first 2 attempts failed as some USB Mics don't work with dual channel recording.
                                                arecordCommand.addAll(Arrays.asList("-c", "1"));
                                            }
                                            arecordCommand.addAll(Arrays.asList("-d", String.valueOf(microphoneTestDurationSeconds), micTestRecordingFile.getPath()));

                                            Runtime.getRuntime().exec(arecordCommand.toArray(String[]::new)).waitFor();

                                            long recordingDuration = new Date().getTime() - startTimestamp;
                                            if (recordingDuration >= (microphoneTestDurationSeconds * 1000) - 1000) {
                                                didRecordFile = micTestRecordingFile.exists();

                                                if (didRecordFile) {
                                                    break;
                                                } else if (isTestMode) {
                                                    System.out.println("recordAudioError: NO FILE SAVED");
                                                    TimeUnit.SECONDS.sleep(1);
                                                }
                                            } else {
                                                if (isTestMode) {
                                                    System.out.println("recordAudioError: NOT ENOUGH TIME PASSED (" + recordingDuration + " MS < " + ((microphoneTestDurationSeconds * 1000) - 1000) + " MS)");
                                                }
                                                TimeUnit.SECONDS.sleep(1);
                                            }
                                        } catch (IOException | InterruptedException arecordAudioException) {
                                            if (isTestMode) {
                                                System.out.println("arecordAudioException: " + arecordAudioException);
                                            }
                                            TimeUnit.SECONDS.sleep(1);
                                        }
                                    }
                                } else if (isMacOS) {
                                    // T2 and Apple Silicon Macs appear to NOT allow Mic access via Java, access is not prompted and the RecordByteStream code above errors.
                                    // Maybe there is another Java recording technique that works, but I just fell back on what I new would work:
                                    // As a workaround, use QuickTime automation instead, the user will just have to approve automation access.

                                    boolean hasQuickTimeAutomationAccess = new CommandReader(new String[]{"/usr/bin/osascript",
                                        "-e", "set systemVersion to (system version of (system info))",
                                        "-e", "considering numeric strings",
                                        "-e", "set isMojaveOrNewer to (systemVersion ≥ \"10.14\")",
                                        "-e", "end considering",
                                        "-e", "if (isMojaveOrNewer) then",
                                        "-e", "try",
                                        "-e", "tell application id \"com.apple.QuickTimePlayerX\" to every window",
                                        "-e", "on error automationAccessErrorMessage number automationAccessErrorNumber",
                                        "-e", "if (automationAccessErrorNumber is equal to -1743) then",
                                        "-e", "return \"NEEDS QUICKTIME AUTOMATION ACCESS\"",
                                        "-e", "end if",
                                        "-e", "end try",
                                        "-e", "end if"}).getFirstOutputLineContaining("NEEDS QUICKTIME AUTOMATION ACCESS").isEmpty();

                                    if (hasQuickTimeAutomationAccess) {
                                        try {
                                            Runtime.getRuntime().exec(new String[]{"/usr/bin/osascript",
                                                "-e", "tell application id \"com.apple.QuickTimePlayerX\"",
                                                "-e", "try",
                                                "-e", "activate",
                                                "-e", "end try",
                                                "-e", "delay 0.5",
                                                "-e", "close every window without saving",
                                                "-e", "delay 0.5",
                                                "-e", "set newAudioRecording to new audio recording",
                                                "-e", "delay 0.5",
                                                "-e", "try",
                                                "-e", "activate",
                                                "-e", "end try",
                                                "-e", "start newAudioRecording",
                                                "-e", "end tell"}).waitFor();

                                            publish("recording");

                                            focusWindow();
                                            TimeUnit.SECONDS.sleep(microphoneTestDurationSeconds);

                                            String quickTimeRecordingDuration = new CommandReader(new String[]{"/usr/bin/osascript",
                                                "-e", "tell application id \"com.apple.QuickTimePlayerX\"",
                                                "-e", "stop (every document)",
                                                "-e", "duration of (document 1)",
                                                "-e", "end tell"}).getFirstOutputLine();

                                            focusWindow();

                                            didAutomateQuickTime = (!quickTimeRecordingDuration.isEmpty() && Float.parseFloat(quickTimeRecordingDuration) > 2);
                                            // Sometimes on T2 Macs, QuickTime appears to record, but then the recorded file is just 0 seconds (or a fraction of a second) and just plays a sort of "click" or "pop" sound.
                                            // Detect if this happened by making sure the recorded document is at least 2 seconds, and error without attempting playback if shorter.
                                        } catch (IOException | InterruptedException | NumberFormatException automateStartQuickTimeRecordingException) {
                                            if (isTestMode) {
                                                System.out.println("automateStartQuickTimeRecordingException: " + automateStartQuickTimeRecordingException);
                                            }
                                        }

                                        if (!didAutomateQuickTime) {
                                            try {
                                                Runtime.getRuntime().exec(new String[]{"/usr/bin/osascript",
                                                    "-e", "tell application id \"com.apple.QuickTimePlayerX\"",
                                                    "-e", "try",
                                                    "-e", "close every window without saving",
                                                    "-e", "end try",
                                                    "-e", "delay 1",
                                                    "-e", "with timeout of 1 second",
                                                    "-e", "quit",
                                                    "-e", "end timeout",
                                                    "-e", "end tell"
                                                }).waitFor();

                                                focusWindow();
                                            } catch (IOException | InterruptedException automateQuitQuickTimePlaybackException) {
                                                if (isTestMode) {
                                                    System.out.println("automateQuitQuickTimePlaybackException: " + automateQuitQuickTimePlaybackException);
                                                }
                                            }
                                        }
                                    } else {
                                        try {
                                            Runtime.getRuntime().exec(new String[]{"/usr/bin/tccutil", "reset", "AppleEvents", "org.freegeek.QA-Helper"}).waitFor();
                                        } catch (IOException | InterruptedException resetAutomationAccessException) {
                                            if (isTestMode) {
                                                System.out.println("resetAutomationAccessException: " + resetAutomationAccessException);
                                            }
                                        }
                                    }
                                }
                            }

                            if (didRecordByteStream || didRecordFile || didAutomateQuickTime) {
                                if (isLinux) {
                                    // Kill any aplay, paplay, and arecord before we start playing new audio
                                    try {
                                        Runtime.getRuntime().exec(new String[]{"/usr/bin/killall", "aplay"});
                                    } catch (IOException quitAplayException) {
                                        if (isTestMode) {
                                            System.out.println("quitAplayException: " + quitAplayException);
                                        }
                                    }

                                    try {
                                        Runtime.getRuntime().exec(new String[]{"/usr/bin/killall", "paplay"});
                                    } catch (IOException quitPaplayException) {
                                        if (isTestMode) {
                                            System.out.println("quitPaplayException: " + quitPaplayException);
                                        }
                                    }

                                    try {
                                        Runtime.getRuntime().exec(new String[]{"/usr/bin/killall", "arecord"});
                                    } catch (IOException quitArecordException) {
                                        if (isTestMode) {
                                            System.out.println("quitArecordException: " + quitArecordException);
                                        }
                                    }

                                    if (!isLinuxUbiquityMode) {
                                        // Wait up to 5 seconds for Pulse to be ready before we start playing new audio. (Pulse isn't loaded in pre-install)
                                        for (int waitForPulseToBeReadyAttempt = 0; waitForPulseToBeReadyAttempt < 10; waitForPulseToBeReadyAttempt++) {
                                            if (new CommandReader(new String[]{"/usr/bin/pactl", "list", "short", "sinks"}).getFirstOutputLine().endsWith("SUSPENDED")) {
                                                break;
                                            } else {
                                                TimeUnit.MILLISECONDS.sleep(500);
                                            }
                                        }
                                    }

                                    // Restoring ALSA before we start seems to help with some volume sync issues on Mint 19.3
                                    try {
                                        Runtime.getRuntime().exec(new String[]{"/usr/sbin/alsactl", "restore"}).waitFor();
                                        TimeUnit.MILLISECONDS.sleep(500);
                                    } catch (IOException | InterruptedException alsaRestoreException) {
                                        if (isTestMode) {
                                            System.out.println("alsaRestoreException: " + alsaRestoreException);
                                        }
                                    }

                                    /* NOTE: No longer picking default output card as of version 2025.2.20-3 to be able to more easily test USB speakers, but keeping old code commented out for reference.
                                    String lastOutputCard = "UNKNOWN CARD";
                                    String[] outputCardsAndDevicesInfo = new CommandReader(new String[]{"/usr/bin/aplay", "-l"}).getOutputLinesContaining("card");

                                    for (String thisOutputCardAndDeviceInfo : outputCardsAndDevicesInfo) {
                                        if (!thisOutputCardAndDeviceInfo.contains("HDMI")) {
                                            String[] thisOutputCardAndDeviceInfoParts = thisOutputCardAndDeviceInfo.split(":");
                                            if (thisOutputCardAndDeviceInfoParts[0].startsWith("card") && !thisOutputCardAndDeviceInfoParts[0].equals(lastOutputCard)) {
                                                lastOutputCard = thisOutputCardAndDeviceInfoParts[0];
                                                String thisOutputCard = lastOutputCard.replaceAll("[^0-9]", "");

                                                // Actual desired volume will get set below.
                                                String setVolumeForOutputCardOutput = new CommandReader(new String[]{"/usr/bin/amixer", "-c", thisOutputCard, "-M", "sset", "Master", "playback", "100%", "unmute"}).getFirstOutputLine();

                                                if (!setVolumeForOutputCardOutput.isEmpty()) {
                                                    outputCard = thisOutputCard;

                                                    if (thisOutputCardAndDeviceInfoParts.length >= 2 && thisOutputCardAndDeviceInfoParts[1].contains("device ")) {
                                                        outputDevice = thisOutputCardAndDeviceInfoParts[1].split("device ")[1];
                                                    }
                                                }
                                            }
                                        }
                                    }
                                     */
                                    TimeUnit.MILLISECONDS.sleep(500);

                                    boolean acpiListenerGotHeadphoneState = false;

                                    if (!headphonesAreConnected && new File("/tmp/qa_helper-acpi_listener.txt").exists()) {
                                        try {
                                            List<String> acpiListenerLines = Files.readAllLines(Paths.get("/tmp/qa_helper-acpi_listener.txt"));
                                            for (String acpiListenerLine : acpiListenerLines) {
                                                // headphonesAreConnected will be accurate for the last event detected. Can't just check last line since other events could get logged.
                                                if (acpiListenerLine.endsWith("HEADPHONE unplug")) {
                                                    headphonesAreConnected = false;
                                                    acpiListenerGotHeadphoneState = true;
                                                } else if (acpiListenerLine.endsWith("HEADPHONE plug")) {
                                                    headphonesAreConnected = true;
                                                    acpiListenerGotHeadphoneState = true;
                                                }
                                            }
                                        } catch (IOException acpiListenerException) {
                                            if (isTestMode) {
                                                System.out.println("acpiListenerException: " + acpiListenerException);
                                            }
                                        }
                                    }

                                    if (!headphonesAreConnected && !acpiListenerGotHeadphoneState && new File("/proc/asound/card" + outputCard + "/codec#0").exists()) {
                                        // This method of headphone detection is not reliable and does not work on all computer.
                                        // But, still use it as a fallback if nothing has been logged yet by acpi_listen which started when QA Helper launched.

                                        try {
                                            List<String> outputCardCodecInfoLines = Files.readAllLines(Paths.get("/proc/asound/card" + outputCard + "/codec#0"));
                                            boolean nextPinCtlsIsHeadphoneJack = false;
                                            for (String thisOutputCardCodecInfoLine : outputCardCodecInfoLines) {
                                                if (thisOutputCardCodecInfoLine.contains("Conn = Analog, Color = Unknown") || thisOutputCardCodecInfoLine.contains("Conn = 1/8, Color = Green")) {
                                                    nextPinCtlsIsHeadphoneJack = true;
                                                } else if (nextPinCtlsIsHeadphoneJack && thisOutputCardCodecInfoLine.contains("Pin-ctls:")) {
                                                    if (thisOutputCardCodecInfoLine.contains("0x00:")) {
                                                        headphonesAreConnected = true;
                                                        break;
                                                    }

                                                    nextPinCtlsIsHeadphoneJack = false;
                                                }
                                            }
                                        } catch (IOException outputCardCodecInfoException) {
                                            if (isTestMode) {
                                                System.out.println("outputCardCodecInfoException: " + outputCardCodecInfoException);
                                            }
                                        }
                                    }

                                    // Everything is quiter in pre-installation environment for some reason. Maybe because Pulse isn't loaded?
                                    // Also, if not a laptop and headphones connected, we don't know if we area testing external speakers or headphones, so also make play louder in that case.
                                    boolean isLaptop = ((computerSpecs != null) && deviceTypeIsLaptop);
                                    String desiredVolumePercentage = (headphonesAreConnected ? ((!isLaptop || isLinuxUbiquityMode) ? "75" : "35") : ((!isLaptop || isLinuxUbiquityMode) ? "100" : "75"));

                                    String[][] outputCardArguments = new String[][]{
                                        {"-c", outputCard},
                                        {}, // Still try to set default volume for when we're not in pre-install environment.
                                        {"-D", "pulse"}, // Still try to set pulse volume for when we're not in pre-install environment.
                                        {"-D", "pipewire"} // And try pipewire which replaces pulse on Mint 22 and newer.
                                    };

                                    for (String[] thisOutputCardArguments : outputCardArguments) {
                                        String thisCardMixerControlName = "Master";
                                        ArrayList<String> amixerScontentsCommand = new ArrayList<>();
                                        amixerScontentsCommand.add("/usr/bin/amixer");
                                        amixerScontentsCommand.addAll(Arrays.asList(thisOutputCardArguments));
                                        amixerScontentsCommand.add("scontents");
                                        for (String thisMixerContentsLine : new CommandReader(amixerScontentsCommand.toArray(String[]::new)).getOutputLines()) {
                                            if (thisMixerContentsLine.startsWith("Simple mixer control '")) {
                                                thisCardMixerControlName = thisMixerContentsLine.substring(21);
                                            } else if (thisMixerContentsLine.startsWith("  Playback channels")) {
                                                try {
                                                    boolean shouldMute = ((headphonesAreConnected && thisCardMixerControlName.startsWith("'Speaker")) || (!headphonesAreConnected && thisCardMixerControlName.startsWith("'Headphone")));
                                                    if (thisCardMixerControlName.startsWith("'Sidetone")) { // Saw that turning up Sidetone on USB headphones causes constant loud buzz, so always MUTE!
                                                        shouldMute = true;
                                                    } else if (selectedOutputCardString.contains(" USB ")) { // Otherwise, never must USB output since it could be speakers OR headphones.
                                                        shouldMute = false;
                                                    }

                                                    ArrayList<String> amixerSsetCommand = new ArrayList<>();
                                                    amixerSsetCommand.add("/usr/bin/amixer");
                                                    amixerSsetCommand.addAll(Arrays.asList(thisOutputCardArguments));
                                                    amixerSsetCommand.addAll(Arrays.asList("-M", "sset", thisCardMixerControlName, "playback", (shouldMute ? "0" : (thisCardMixerControlName.contains(" Boost'") ? "100" : desiredVolumePercentage)) + "%", (shouldMute ? "mute" : "unmute")));
                                                    Runtime.getRuntime().exec(amixerSsetCommand.toArray(String[]::new)).waitFor();
                                                } catch (IOException | InterruptedException setCardOutputVolumeException) {
                                                    if (isTestMode) {
                                                        System.out.println("setCardOutputVolumeException (" + String.join(" ", thisOutputCardArguments) + " + " + thisCardMixerControlName + "): " + setCardOutputVolumeException);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else if (isMacOS) {
                                    try {
                                        Runtime.getRuntime().exec(new String[]{"/usr/bin/osascript", "-e", "set volume output volume 50 without output muted", "-e", "set volume alert volume 100"}).waitFor();
                                    } catch (IOException | InterruptedException setMacOutputVolumeException) {
                                        if (isTestMode) {
                                            System.out.println("setMacOutputVolumeException: " + setMacOutputVolumeException);
                                        }
                                    }
                                }

                                publish("playback");

                                boolean didPlaybackMicrophoneTest = false;

                                if (!isLinux) {
                                    if (didAutomateQuickTime) {
                                        try {
                                            Runtime.getRuntime().exec(new String[]{"/usr/bin/osascript",
                                                "-e", "tell application id \"com.apple.QuickTimePlayerX\"",
                                                "-e", "try",
                                                "-e", "activate",
                                                "-e", "end try",
                                                "-e", "play (document 1)",
                                                "-e", "end tell"}).waitFor();

                                            focusWindow();
                                            TimeUnit.SECONDS.sleep(microphoneTestDurationSeconds);

                                            try {
                                                Runtime.getRuntime().exec(new String[]{"/usr/bin/osascript",
                                                    "-e", "tell application id \"com.apple.QuickTimePlayerX\"",
                                                    "-e", "try",
                                                    "-e", "close every window without saving",
                                                    "-e", "end try",
                                                    "-e", "delay 1",
                                                    "-e", "with timeout of 1 second",
                                                    "-e", "quit",
                                                    "-e", "end timeout",
                                                    "-e", "end tell"
                                                }).waitFor();

                                                focusWindow();
                                                didPlaybackMicrophoneTest = true;
                                            } catch (IOException | InterruptedException automateStartQuickTimePlaybackException) {
                                                if (isTestMode) {
                                                    System.out.println("automateStartQuickTimePlaybackException: " + automateStartQuickTimePlaybackException);
                                                }
                                            }
                                        } catch (IOException | InterruptedException automateStartQuickTimePlaybackException) {
                                            if (isTestMode) {
                                                System.out.println("automateStartQuickTimePlaybackException: " + automateStartQuickTimePlaybackException);
                                            }
                                        }
                                    } else {
                                        // Java AudioSystem is not reliable on Linux and can fail with UnsatisfiedLinkError or an "Invalid Format" Exception for seemingly no reason.
                                        // But, worst of all, sometimes it doesn't error and just doesn't play anything.

                                        try (Clip microphoneTestClip = AudioSystem.getClip()) {
                                            //if (didRecordByteStream) {

                                            // Will only ever have recorded a byte stream since only used on Mac and Windows.
                                            byte[] recordingByteArray = recordingOutputByteStream.toByteArray();
                                            microphoneTestClip.open(new AudioInputStream(new ByteArrayInputStream(recordingByteArray), recordingFormat, recordingByteArray.length));

                                            //} else if (didRecordFile) {
                                            //    microphoneTestClip.open(AudioSystem.getAudioInputStream(new File(System.getProperty("java.io.tmpdir"), "qa_helper-mic_test.wav")));
                                            //}
                                            microphoneTestClip.start();

                                            TimeUnit.SECONDS.sleep(microphoneTestDurationSeconds);

                                            didPlaybackMicrophoneTest = true;
                                        } catch (Error | Exception playbackMicrophoneTestClipErrorOrException) {
                                            if (isTestMode) {
                                                System.out.println("playbackMicrophoneTestClipErrorOrException: " + playbackMicrophoneTestClipErrorOrException);
                                            }
                                        }
                                    }
                                }

                                if (!didPlaybackMicrophoneTest && !isWindows) {
                                    File microphoneTestTempFile = null;
                                    String microphoneTestTempPath = "";

                                    if (didRecordByteStream) {
                                        microphoneTestTempFile = File.createTempFile("qa_helper-mic_test", ".wav");
                                        microphoneTestTempFile.deleteOnExit();

                                        byte[] recordingByteArray = recordingOutputByteStream.toByteArray();
                                        try (AudioInputStream microphoneTestInputStream = new AudioInputStream(new ByteArrayInputStream(recordingByteArray), recordingFormat, recordingByteArray.length)) {
                                            AudioSystem.write(microphoneTestInputStream, AudioFileFormat.Type.WAVE, microphoneTestTempFile);
                                            microphoneTestTempPath = microphoneTestTempFile.getPath();
                                        } catch (Exception readMicrophoneTestException) {
                                            if (isTestMode) {
                                                System.out.println("readMicrophoneTestException: " + readMicrophoneTestException);
                                            }
                                        }
                                    }

                                    if (didRecordFile || !microphoneTestTempPath.isEmpty()) {
                                        if (microphoneTestTempPath.isEmpty()) {
                                            microphoneTestTempPath = new File(System.getProperty("java.io.tmpdir"), "qa_helper-mic_test.wav").getPath();
                                        }

                                        for (int playbackRecordingAttempt = 0; playbackRecordingAttempt < 3; playbackRecordingAttempt++) {
                                            if (playbackRecordingAttempt > 0) {
                                                publish("re-playback");
                                            }

                                            try {
                                                Runtime.getRuntime().exec((isLinux // Mint 19.3 in pre-install seems to have an issue on some computers where the beginning get's cut off. This "aplay /dev/null; sleep 1" seems to help work around it. (Like aplay needs to be warmed up or something stupid like that?)
                                                        ? new String[]{"/bin/sh", "-c", "/usr/bin/aplay /dev/null; /bin/sleep 1; /usr/bin/aplay -D hw:" + outputCard + "," + outputDevice + " '" + microphoneTestTempPath.replace("'", "'\\''") + "' ||  /usr/bin/aplay -D plughw:" + outputCard + "," + outputDevice + " '" + microphoneTestTempPath.replace("'", "'\\''") + "'"} // If "hw:" device fails, try the "plughw:" device to include software conversions.
                                                        : new String[]{"/usr/bin/afplay", microphoneTestTempPath})
                                                );

                                                TimeUnit.SECONDS.sleep(microphoneTestDurationSeconds + (isLinux ? 1 : 0));

                                                didPlaybackMicrophoneTest = true;

                                                break;
                                            } catch (IOException | InterruptedException playbackMicrophoneTestFileException) {
                                                if (isTestMode) {
                                                    System.out.println("playbackMicrophoneTestFileException: " + playbackMicrophoneTestFileException);
                                                }
                                                TimeUnit.SECONDS.sleep(1);
                                            }
                                        }
                                    }

                                    if ((microphoneTestTempFile != null) && microphoneTestTempFile.exists()) {
                                        microphoneTestTempFile.delete();
                                    }

                                    if (!didPlaybackMicrophoneTest) {
                                        didRecordAndPlayBack = false;
                                    }
                                }
                            } else {
                                didRecordAndPlayBack = false;
                            }

                            if (isLinux) {
                                try { // There is an odd rare bug on Linux Mint 20.3 (not sure if it affect other versions) which may be caused by driver issues where the audio keeps looping in segments and it can go on for a long time, so "killall aplay" just in case to stop it.
                                    Runtime.getRuntime().exec(new String[]{"/usr/bin/killall", "aplay"});
                                } catch (IOException quitAplayException) {
                                    if (isTestMode) {
                                        System.out.println("quitAplayException: " + quitAplayException);
                                    }
                                }

                                File micTestRecordingFile = new File(System.getProperty("java.io.tmpdir"), "qa_helper-mic_test.wav");
                                if (micTestRecordingFile.exists()) {
                                    micTestRecordingFile.delete();
                                }
                            } else if (isWindows) {
                                try {
                                    Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "$WscriptShell = New-Object -ComObject Wscript.Shell; if ($WscriptShell.AppActivate('Sound')) { $WscriptShell.SendKeys('%{F4}') }; Start-Sleep -Milliseconds 500; if ($WscriptShell.AppActivate('Sound')) { $WscriptShell.SendKeys('%{F4}') }"}).waitFor(); // Try closing Sound window twice in case the Properties windows is open.
                                } catch (IOException | InterruptedException quitRecordingPropertiesException) {
                                    if (isTestMode) {
                                        System.out.println("quitRecordingPropertiesException: " + quitRecordingPropertiesException);
                                    }
                                }

                                try {
                                    Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\taskkill.exe", "/im", "SndVol.exe", "/t"}).waitFor();
                                } catch (IOException | InterruptedException quitSoundMixerException) {
                                    if (isTestMode) {
                                        System.out.println("quitSoundMixerException: " + quitSoundMixerException);
                                    }
                                }
                            }

                            return didRecordAndPlayBack;
                        }

                        @Override
                        protected void process(java.util.List<String> tasks) {
                            tasks.forEach((thisTask) -> {
                                switch (thisTask) {
                                    case "recording":
                                    case "re-recording":
                                        boolean isReRecording = (thisTask.startsWith("re-"));
                                        loadingWindow.setLoadingTextAndDisplay("QA Helper is " + (isReRecording ? "Re-" : "") + "Recording " + microphoneTestDurationSeconds + " Seconds of Audio", "Testing", "StudioMicrophone");
                                        loadingWindow.setLoadingProgressBarToMax(microphoneTestDurationSeconds);

                                        if (!isReRecording) {
                                            (new SwingWorker<Void, String>() {
                                                @Override
                                                protected Void doInBackground() throws Exception {
                                                    do {
                                                        TimeUnit.SECONDS.sleep(1);
                                                        publish("progress");
                                                    } while (loadingWindow.isVisible());

                                                    return null;
                                                }

                                                @Override
                                                protected void process(java.util.List<String> tasks) {
                                                    loadingWindow.incrementLoadingProgressBar();
                                                }
                                            }).execute();

                                            loadingWindow.incrementLoadingProgressBar();
                                        }

                                        break;
                                    case "playback":
                                    case "re-playback":
                                        loadingWindow.setLoadingTextAndDisplay("QA Helper is " + (thisTask.startsWith("re-") ? "Re-" : "") + "Playing Back " + microphoneTestDurationSeconds + " Second Recording", "Testing", true, "SpeakerHighVolume");
                                        loadingWindow.setLoadingProgressBarToMax(microphoneTestDurationSeconds + (isLinux ? 1 : 0));
                                        break;
                                    default:
                                        break;
                                }
                            });
                        }

                        @Override
                        protected void done() {
                            if (isLinux && new File("/tmp/qa_helper-audio_output_card.txt").exists()) {
                                new File("/tmp/qa_helper-audio_output_card.txt").delete();
                            }

                            focusWindow(); // To make sure we have focus after closing Sound and Recording stuff on Windows.

                            loadingWindow.closeWindow();

                            try {
                                boolean microphoneTestDidRecord = get();

                                ArrayList<String> microphoneTestCompletedButtons = new ArrayList<>(Arrays.asList("Continue", "Test Microphone Again"));

                                int microphoneTestCompletedDialogResponse;

                                if (microphoneTestDidRecord) {
                                    microphoneTestCompletedDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html><b>Microphone Test Completed</b>"
                                            + "<br/><br/><br/>"
                                            + new TwemojiImage("CheckMarkButton", qaHelperWindow).toImgTag("left") + " <b style='color: " + successColorHTML + "'>MICROPHONE TEST PASSED IF:</b>"
                                            + "<ul style='margin-left: 20px'>"
                                            + "<li>You heard your recording <u>crisply and clearly</u>.</li>"
                                            + "</ul>"
                                            + "<br/>"
                                            + new TwemojiImage("CrossMark", qaHelperWindow).toImgTag("left") + " <b style='color: " + errorColorHTML + "'>MICROPHONE TEST FAILED IF:</b>"
                                            + "<ul style='margin-left: 20px'>"
                                            + "<li><u>Nothing</u> got recorded.</li>"
                                            + "<li>The recording <u>didn't sound crisp and clear</u>.</li>"
                                            + "</ul>"
                                            + "<br/>"
                                            + ((isLinux && (microphoneInputVolumeComboBox.getSelectedIndex() == 2))
                                            ? new TwemojiImage("Warning", qaHelperWindow).toImgTag("left") + " <b style='color: " + attentionColorHTML + "'>IF THE RECORDING WAS <u>VERY QUIET/SILENT</u> OR <u>VERY LOAD/DISTORTED</u>:</b><br/>"
                                            + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <b style='color: " + attentionColorHTML + "'><i>TEST AGAIN WITH <u>HIGHER OR LOWER MIC INPUT VOLUME</u> SELECTED</i></b>"
                                            : new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>CONSULT AN INSTRUCTOR IF MICROPHONE TEST FAILED</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right"))
                                            + "</html>", "QA Helper  —  Microphone Test Completed", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("StudioMicrophone", qaHelperWindow).toImageIcon(), microphoneTestCompletedButtons.toArray(), microphoneTestCompletedButtons.get(0));
                                } else {
                                    Collections.reverse(microphoneTestCompletedButtons);

                                    playAlertSound("error");
                                    microphoneTestCompletedDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html>" + new TwemojiImage("Warning", qaHelperWindow).toImgTag("left") + " <b>Failed to Record Audio or Playback Recording</b>" + (isMacOS ? (((computerSpecs != null) && computerSpecs.getFullCPU().endsWith("+ T2 Security Chip")) ? "<br/><br/>Sometimes the recording fails on T2 Macs. Try again." : "<br/><br/>If you approved Microphone access and still got this error, quit and relaunch QA Helper and then try again.") : "") + "</html>", "QA Helper  —  Microphone Test Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE, new TwemojiImage("StudioMicrophone", qaHelperWindow).toImageIcon(32), microphoneTestCompletedButtons.toArray(), microphoneTestCompletedButtons.get(0));
                                }

                                String microphoneTestCompletedDialogResponseString = "Continue";
                                if (microphoneTestCompletedDialogResponse > -1) {
                                    microphoneTestCompletedDialogResponseString = microphoneTestCompletedButtons.get(microphoneTestCompletedDialogResponse);
                                }

                                if (microphoneTestCompletedDialogResponseString.contains("Test")) {
                                    setActionsEnabled(true);
                                    btnTestMicrophoneActionPerformed(evt);
                                } else if (microphoneTestDidRecord && !isMicrophoneVerified && btnVerifyMicrophone.isVisible() && btnVerifyMicrophone.isEnabled()) {
                                    btnVerifyMicrophoneActionPerformed(null);
                                }
                            } catch (HeadlessException | InterruptedException | ExecutionException finishMicrophoneTestException) {
                                if (isTestMode) {
                                    System.out.println("finishMicrophoneTestException: " + finishMicrophoneTestException);
                                }
                            }

                            setActionsEnabled(true);
                        }
                    }).execute();
                } else {
                    if (isWindows) {
                        try {
                            Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "$WscriptShell = New-Object -ComObject Wscript.Shell; if ($WscriptShell.AppActivate('Sound')) { $WscriptShell.SendKeys('%{F4}') }; Start-Sleep -Milliseconds 500; if ($WscriptShell.AppActivate('Sound')) { $WscriptShell.SendKeys('%{F4}') }"}).waitFor(); // Try closing Sound window twice in case the Properties windows is open.
                        } catch (IOException | InterruptedException quitRecordingPropertiesException) {
                            if (isTestMode) {
                                System.out.println("quitRecordingPropertiesException: " + quitRecordingPropertiesException);
                            }
                        }

                        try {
                            Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\taskkill.exe", "/im", "SndVol.exe", "/t"}).waitFor();
                        } catch (IOException | InterruptedException quitSoundMixerException) {
                            if (isTestMode) {
                                System.out.println("quitSoundMixerException: " + quitSoundMixerException);
                            }
                        }
                    }

                    setActionsEnabled(true);
                    if (!isPeripheralTestMode) {
                        focusNextTestTaskVerifyButton(btnTestMicrophone);
                    }
                }
            }
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnTestMicrophoneActionPerformed

    private void btnVerifyMicrophoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifyMicrophoneActionPerformed
        if ((actionsEnabled || (evt == null)) && !isWindowsPE && (!isMacOS || !new CommandReader(new String[]{"/usr/bin/osascript", "-e", "input volume of (get volume settings)"}).getFirstOutputLine().equals("missing value"))) {
            setActionsEnabled(false);

            if (JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>" + ((evt == null) ? "Would you like " : "Are you sure you want ") + "to <i>" + (isMicrophoneVerified ? "UNVERIFY" : "verify") + "</i> the microphone?</b></html>", "QA Helper  —  Confirm " + (isMicrophoneVerified ? "Unverify" : "Verify") + " Microphone", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage((isMicrophoneVerified ? "CrossMark" : "CheckBoxWithCheck"), qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                isMicrophoneVerified = !isMicrophoneVerified;

                writeToHelperLogFile("Test: Microphone " + (isMicrophoneVerified ? "Verified" : "UNVERIFIED"));

                btnVerifyMicrophone.setText((isMicrophoneVerified ? "Verified" : "Verify"));
                btnVerifyMicrophone.setFont(btnVerifyMicrophone.getFont().deriveFont((isMicrophoneVerified ? Font.BOLD : lblVersion.getFont().getStyle())));
                btnVerifyMicrophone.setForeground(isMicrophoneVerified ? verifiedColor : defaultColor);
                btnVerifyMicrophone.setBorderPainted(!isMicrophoneVerified);

                new LinuxAutoScripts("Microphone " + (isMicrophoneVerified ? "Verified" : "Unverified"), adminPassword);

                focusNextTestTaskVerifyButton(btnVerifyMicrophone);
            } else {
                focusNextTestTaskVerifyButton(btnTestMicrophone);
            }

            setActionsEnabled(true);
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnVerifyMicrophoneActionPerformed

    private void btnTestCameraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestCameraActionPerformed
        if (actionsEnabled && !isWindowsPE) {
            setActionsEnabled(false);

            if ((computerSpecs != null) && !computerSpecs.hasCamera()) {
                playAlertSound("error");
                JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>No Camera Detected</b><br/><br/><i>If this computer is supposed to have a camera, then Camera Test has failed.</i></html>", "QA Helper  —  Camera Test Error", JOptionPane.ERROR_MESSAGE, new TwemojiImage("NoEntry", qaHelperWindow).toImageIcon(32));

                setActionsEnabled(true);
                focusNextTestTaskVerifyButton(btnTestCamera);
            } else {
                boolean enoughRAMforCameraTest = true;

                if (isLinuxBootedToRAM) {
                    // There may not be enough free RAM for Camera Test when booted "toram"
                    try {
                        enoughRAMforCameraTest = (2000000000 <= Long.parseLong(new CommandReader("/usr/bin/free -b | /usr/bin/awk '($1 == \"Mem:\") { print $4; exit }'").getFirstOutputLine()));
                    } catch (NumberFormatException getFreeMemoryException) {
                        if (isTestMode) {
                            System.out.println("getFreeMemoryException: " + getFreeMemoryException);
                        }
                    }
                }

                if (enoughRAMforCameraTest) {
                    final int cameraTestDurationSeconds = (isPeripheralTestMode ? 30 : 10); // Give more time in Peripheral Test Mode since may need to switch Camera inputs.

                    JCheckBox useAlternateWebCamAppCheckbox = new JCheckBox("Use Alternate Web Cam App");

                    int cameraTestPromptReturn = JOptionPane.showConfirmDialog(qaHelperWindow, new Object[]{
                        "<html><b>Camera Test will open a camera feed in " + (isLinux ? "full screen" : (isMacOS ? "<i>Photo Booth</i>" : "<i>Camera</i>")) + " and keep it open for <u>" + cameraTestDurationSeconds + " seconds</u>.</b>"
                        + "<br/><br/>"
                        + "<center>" + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>YOU DO NOT NEED TO RECORD THE VIDEO</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right") + "</center>"
                        + "<br/>"
                        + new TwemojiImage("WavingHand", qaHelperWindow).toImgTag("left") + " <u>Wave your hands</u> in front of the camera to make sure the <u>camera feed updates properly</u>."
                        + "<br/><br/>"
                        + new TwemojiImage("Eyes", qaHelperWindow).toImgTag("left") + " <u>Look around the entire image</u> to make sure the camera feed is <u>crisp, clear, and bright</u>.<br/>"
                        + new TwemojiImage("Blank", qaHelperWindow).toImgTag("left") + " Also, make sure there is <u>no darkness around the edge</u> as well as <u>no spots or artifacts</u>."
                        + "<br/><br/>"
                        + new TwemojiImage("Stopwatch", qaHelperWindow).toImgTag("left") + " <b><i>After " + cameraTestDurationSeconds + " seconds</i>, the camera feed will be <u>closed automatically</u>.</b>"
                        + "<br/><br/><br/>"
                        + new TwemojiImage("CheckMarkButton", qaHelperWindow).toImgTag("left") + " <b style='color: " + successColorHTML + "'>CAMERA TEST PASSED IF:</b>"
                        + "<ul style='margin-left: 20px'>"
                        + "<li>The image is <u>crisp, clear, and bright</u>.</li>"
                        + "<li>There is <u>no dark edge</u> around the image.</li>"
                        + "<li>There are <u>no spots or artifacts</u> in the image.</li>"
                        + "</ul>"
                        + "<br/>"
                        + new TwemojiImage("CrossMark", qaHelperWindow).toImgTag("left") + " <b style='color: " + errorColorHTML + "'>CAMERA TEST FAILED IF:</b>"
                        + "<ul style='margin-left: 20px'>"
                        + "<li>The image is <u>blurry or dim</u>.</li>"
                        + "<li>There is a <u>dark edge</u> around the image.</li>"
                        + "<li>There are <u>any spots or artifacts</u> in the image.</li>"
                        + "</ul>"
                        + "<br/><center>"
                        + (isLinux ? new TwemojiImage("Warning", qaHelperWindow).toImgTag("left") + " <i>IF THE CAMERA OUTPUT IS ONLY BLACK, TRY AGAIN WITH \"Use Alternate Web Cam App\" CHECKED</i><br/>" : "")
                        + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>CONSULT AN INSTRUCTOR IF CAMERA TEST FAILS</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")
                        + "</center></html>",
                        (isLinux ? " " : ""),
                        (isLinux ? useAlternateWebCamAppCheckbox : "")
                    }, "QA Helper  —  Camera Test", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, new TwemojiImage("MovieCamera", qaHelperWindow).toImageIcon());

                    if (cameraTestPromptReturn == JOptionPane.OK_OPTION) {
                        loadingWindow.setLoadingTextAndDisplay("QA Helper is Setting Up Camera Test", "Testing", "MovieCamera");

                        String webCamAppName = (useAlternateWebCamAppCheckbox.isSelected() ? "webcamoid" : "cheese");

                        (new SwingWorker<String, String>() {
                            @Override
                            protected String doInBackground() throws Exception {
                                if (isLinux) {
                                    String webCamAppPath = ("/usr/bin/" + webCamAppName);
                                    boolean webCamAppWasInstalled = !new CommandReader(webCamAppPath + " -v").getFirstOutputLineContaining(".").isEmpty();

                                    /* NO LONGER INCLUDING CHEESE IN PRESEED DEPENDENCIES LIKE THIS ANYMORE, FULLY PREINSTALLING INSTEAD AND UNINSTALLING VIA AUTO-SCRIPT AFTER OEM-CONFIG. 
                                    if (!webCamAppWasInstalled && webCamAppName.equals("cheese") && new File("/usr/share/glib-2.0/schemas/org.gnome.Cheese.gschema.xml").exists()) {
                                        String possibleWebCamAppPath = "LD_LIBRARY_PATH=/cdrom/preseed/dependencies/ /cdrom/preseed/dependencies/cheese";
                                        webCamAppWasInstalled = !new CommandReader(possibleWebCamAppPath + " -v").getFirstOutputLineContaining(".").isEmpty();

                                        if (webCamAppWasInstalled) {
                                            webCamAppPath = possibleWebCamAppPath;
                                        }
                                    }
                                     */
                                    if (isTestMode) {
                                        System.out.println("webCamAppPath: " + webCamAppPath);
                                    }

                                    boolean webCamAppInstalledViaTerminal = false;
                                    boolean webCamAppIsInstalled = webCamAppWasInstalled;

                                    if (!webCamAppWasInstalled) {
                                        String previousAdminPassword = adminPassword;
                                        getAdminPassword("Run Camera Test"); // Double-check that admin password is still correct.

                                        if (!adminPassword.equals(previousAdminPassword) && !isPeripheralTestMode) {
                                            computerSpecs.reloadSpecs(adminPassword, isTestMode);

                                            publish("reloaded");
                                        }

                                        if (!adminPassword.equals("*UNKNOWN*")) {
                                            try {
                                                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /usr/bin/apt-get install --no-install-recommends -qq " + webCamAppName}).waitFor();
                                                webCamAppIsInstalled = !new CommandReader(webCamAppPath + " -v").getFirstOutputLineContaining(".").isEmpty();
                                            } catch (IOException | InterruptedException installWebCamAppException) {
                                                if (isTestMode) {
                                                    System.out.println("installWebCamAppException: " + installWebCamAppException);
                                                }
                                            }

                                            if (!webCamAppIsInstalled && !isLinuxUbiquityMode) {
                                                try {
                                                    File waitForTerminalPIDtempFile = File.createTempFile("qa_helper-wait_for_terminal_pid", ".txt");
                                                    waitForTerminalPIDtempFile.deleteOnExit();

                                                    Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /usr/bin/" + (isLinuxMATE ? "mate" : "gnome") + "-terminal --window" + (isLinuxMATE ? "" : "-with-profile-internal-id '0'") + " --title 'QA Helper  —  Installing \"" + webCamAppName + "\"' --hide-menubar --geometry '80x25+0+0' -x /bin/bash -c 'orig_temp_owner=$(/usr/bin/stat -c %U " + waitForTerminalPIDtempFile.getPath() + "); /bin/chown root " + waitForTerminalPIDtempFile.getPath() + "; echo $$ > " + waitForTerminalPIDtempFile.getPath() + "; /bin/chown ${orig_temp_owner} " + waitForTerminalPIDtempFile.getPath() + "; echo \"\nINSTALLING \\\"" + webCamAppName + "\\\"\n\n\"; /usr/local/bin/apt install --no-install-recommends -y " + webCamAppName + "; echo \"\n\nFINISHED INSTALLING \\\"" + webCamAppName + "\\\"\nTHIS TERMINAL WINDOW WILL CLOSE IN 5 SECONDS - OR PRESS ENTER TO CLOSE NOW\"; read -t 5; /usr/bin/wmctrl -a \"QA Helper\"'"});

                                                    String waitForTerminalPID = "";

                                                    for (int i = 0; i < 10; i++) {
                                                        if (waitForTerminalPIDtempFile.exists()) {
                                                            try {
                                                                List<String> waitForTerminalPIDtempFileLines = Files.readAllLines(waitForTerminalPIDtempFile.toPath());

                                                                if (!waitForTerminalPIDtempFileLines.isEmpty()) {
                                                                    waitForTerminalPID = waitForTerminalPIDtempFileLines.get(0);
                                                                    if (!waitForTerminalPID.isEmpty()) {
                                                                        break;
                                                                    }
                                                                }
                                                            } catch (IOException | IndexOutOfBoundsException getTerminalPIDException) {
                                                                if (isTestMode) {
                                                                    System.out.println("getTerminalPIDException: " + getTerminalPIDException);
                                                                }
                                                            }
                                                        }

                                                        TimeUnit.MILLISECONDS.sleep(500);
                                                    }

                                                    if (waitForTerminalPIDtempFile.exists()) {
                                                        waitForTerminalPIDtempFile.delete();
                                                    }

                                                    if (!waitForTerminalPID.isEmpty()) {
                                                        while (!new CommandReader(new String[]{"/bin/ps", "-p", waitForTerminalPID, "-o", "pid="}).getFirstOutputLine().isEmpty()) {
                                                            TimeUnit.MILLISECONDS.sleep(500);
                                                        }
                                                    }

                                                    webCamAppIsInstalled = !new CommandReader(webCamAppPath + " -v").getFirstOutputLineContaining(".").isEmpty();
                                                    webCamAppInstalledViaTerminal = webCamAppIsInstalled;
                                                } catch (IOException | InterruptedException installWebCamAppViaTerminalException) {
                                                    if (isTestMode) {
                                                        System.out.println("installWebCamAppViaTerminalException: " + installWebCamAppViaTerminalException);
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    if (webCamAppIsInstalled) {
                                        try {
                                            if (webCamAppName.equals("cheese")) {
                                                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", webCamAppPath + " -f"});
                                            } else if (webCamAppName.equals("webcamoid")) {
                                                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c",
                                                    "/bin/mkdir -p '" + System.getProperty("user.home").replace("'", "'\\''") + "/.config/Webcamoid'; "
                                                    + "echo '[GeneralConfigs]\n"
                                                    + "windowSize=@Size(99999 99999)\n"
                                                    + "\n"
                                                    + "[Updates]\n"
                                                    + "notify=false\n"
                                                    + "showDialog=false' > '" + System.getProperty("user.home").replace("'", "'\\''") + "/.config/Webcamoid/Webcamoid.conf'; "
                                                    + webCamAppPath});
                                            }
                                        } catch (IOException runWebCamAppException) {
                                            if (isTestMode) {
                                                System.out.println("runWebCamAppException: " + runWebCamAppException);
                                            }
                                        }

                                        for (int waitForWebCamApp = 0; waitForWebCamApp < 30; waitForWebCamApp++) {
                                            TimeUnit.MILLISECONDS.sleep(500);

                                            String openWindowsList = new CommandReader(new String[]{"/usr/bin/wmctrl", "-l"}).getOutputLinesAsString();
                                            if (openWindowsList.contains("Cheese") || openWindowsList.contains("Photo") || openWindowsList.contains("Webcamoid")) {
                                                break;
                                            }
                                        }

                                        String openWindowsList = new CommandReader(new String[]{"/usr/bin/wmctrl", "-l"}).getOutputLinesAsString();
                                        if (openWindowsList.contains("Cheese") || openWindowsList.contains("Photo") || openWindowsList.contains("Webcamoid")) {
                                            TimeUnit.SECONDS.sleep(1); // Sleep 1 extra second to make sure app is fully loaded.

                                            publish("running");

                                            for (int i = 0; i < cameraTestDurationSeconds; i++) {
                                                TimeUnit.SECONDS.sleep(1);

                                                if (i == 0) {
                                                    try {
                                                        Runtime.getRuntime().exec(new String[]{"/usr/bin/wmctrl", "-a", (openWindowsList.contains("Cheese") ? "Cheese" : (openWindowsList.contains("Photo") ? "Photo" : "Webcamoid"))});
                                                    } catch (IOException focusWebCamAppException) {
                                                        if (isTestMode) {
                                                            System.out.println("focusWebCamAppException: " + focusWebCamAppException);
                                                        }
                                                    }
                                                } else if ((i >= (cameraTestDurationSeconds / 2)) && new CommandReader(new String[]{"/usr/bin/pgrep", webCamAppName}).getFirstOutputLine().isEmpty()) {
                                                    playAlertSound("error");
                                                    break;
                                                }
                                            }
                                        }

                                        publish("finishing"); // Must be here to always set loadingWindow to alwaysOnTop.
                                        TimeUnit.SECONDS.sleep(1); // Sleep for a second to make sure the finishing progress has time to show before being closed.

                                        try {
                                            Runtime.getRuntime().exec(new String[]{"/usr/bin/killall", webCamAppName}).waitFor();
                                        } catch (IOException | InterruptedException quitWebCamAppException) {
                                            if (isTestMode) {
                                                System.out.println("quitWebCamAppException: " + quitWebCamAppException);
                                            }
                                        }

                                        if (!webCamAppWasInstalled) {
                                            if (webCamAppInstalledViaTerminal) {
                                                try {
                                                    File waitForTerminalPIDtempFile = File.createTempFile("qa_helper-wait_for_terminal_pid", ".txt");
                                                    waitForTerminalPIDtempFile.deleteOnExit();

                                                    Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /usr/bin/" + (isLinuxMATE ? "mate" : "gnome") + "-terminal --window" + (isLinuxMATE ? "" : "-with-profile-internal-id '0'") + " --title 'QA Helper  —  Uninstalling \"" + webCamAppName + "\"' --hide-menubar --geometry '80x25+0+0' -x /bin/bash -c 'orig_temp_owner=$(/usr/bin/stat -c %U " + waitForTerminalPIDtempFile.getPath() + "); /bin/chown root " + waitForTerminalPIDtempFile.getPath() + "; echo $$ > " + waitForTerminalPIDtempFile.getPath() + "; /bin/chown ${orig_temp_owner} " + waitForTerminalPIDtempFile.getPath() + "; echo \"\nUNINSTALLING \\\"" + webCamAppName + "\\\"\n\n\"; /usr/local/bin/apt purge --auto-remove -y " + webCamAppName + "; echo \"\n\nFINISHED UNINSTALLING \\\"" + webCamAppName + "\\\"\nTHIS TERMINAL WINDOW WILL CLOSE IN 5 SECONDS - OR PRESS ENTER TO CLOSE NOW\"; read -t 5; /usr/bin/wmctrl -a \"QA Helper\"'"});

                                                    String waitForTerminalPID = "";

                                                    for (int i = 0; i < 10; i++) {
                                                        if (waitForTerminalPIDtempFile.exists()) {
                                                            try {
                                                                List<String> waitForTerminalPIDtempFileLines = Files.readAllLines(waitForTerminalPIDtempFile.toPath());

                                                                if (!waitForTerminalPIDtempFileLines.isEmpty()) {
                                                                    waitForTerminalPID = waitForTerminalPIDtempFileLines.get(0);
                                                                    if (!waitForTerminalPID.isEmpty()) {
                                                                        break;
                                                                    }
                                                                }
                                                            } catch (IOException | IndexOutOfBoundsException getTerminalPIDException) {
                                                                if (isTestMode) {
                                                                    System.out.println("getTerminalPIDException: " + getTerminalPIDException);
                                                                }
                                                            }
                                                        }

                                                        TimeUnit.MILLISECONDS.sleep(500);
                                                    }

                                                    if (waitForTerminalPIDtempFile.exists()) {
                                                        waitForTerminalPIDtempFile.delete();
                                                    }

                                                    if (!waitForTerminalPID.isEmpty()) {
                                                        while (!new CommandReader(new String[]{"/bin/ps", "-p", waitForTerminalPID, "-o", "pid="}).getFirstOutputLine().isEmpty()) {
                                                            TimeUnit.MILLISECONDS.sleep(500);
                                                        }
                                                    }
                                                } catch (IOException | InterruptedException uninstallWebCamAppViaTerminalException) {
                                                    if (isTestMode) {
                                                        System.out.println("uninstallWebCamAppViaTerminalException: " + uninstallWebCamAppViaTerminalException);
                                                    }
                                                }
                                            } else {
                                                try {
                                                    Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk /usr/bin/apt-get purge --auto-remove -qq " + webCamAppName}).waitFor();
                                                } catch (IOException | InterruptedException uninstallWebCamAppException) {
                                                    if (isTestMode) {
                                                        System.out.println("uninstallWebCamAppException: " + uninstallWebCamAppException);
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        return "install-error";
                                    }
                                } else if (isMacOS) {
                                    try {
                                        Runtime.getRuntime().exec(new String[]{"/usr/bin/open", "-b", "com.apple.PhotoBooth"}).waitFor();
                                        TimeUnit.SECONDS.sleep(1); // Sleep 1 extra second to make sure app is fully loaded.

                                        publish("running");

                                        for (int i = 0; i < cameraTestDurationSeconds; i++) {
                                            TimeUnit.SECONDS.sleep(1);

                                            if (i == 0) {
                                                Runtime.getRuntime().exec(new String[]{"/usr/bin/open", "-b", "com.apple.PhotoBooth"}); // To focus window (won't open another instance).
                                            } else if ((i >= (cameraTestDurationSeconds / 2)) && new CommandReader(new String[]{"/usr/bin/pgrep", "Photo Booth"}).getFirstOutputLine().isEmpty()) {
                                                playAlertSound("error");
                                                break;
                                            }
                                        }
                                    } catch (IOException | InterruptedException runPhotoBoothException) {
                                        if (isTestMode) {
                                            System.out.println("runPhotoBoothException: " + runPhotoBoothException);
                                        }
                                    }

                                    publish("finishing"); // Must be here to always set loadingWindow to alwaysOnTop.
                                    TimeUnit.SECONDS.sleep(1); // Sleep for a second to make sure the finishing progress has time to show before being closed.

                                    try {
                                        Runtime.getRuntime().exec(new String[]{"/usr/bin/osascript", "-e", "with timeout of 1 second", "-e", "tell application id \"com.apple.PhotoBooth\" to quit", "-e", "end timeout"}).waitFor();
                                    } catch (IOException | InterruptedException quitPhotoBoothException) {
                                        if (isTestMode) {
                                            System.out.println("quitPhotoBoothException: " + quitPhotoBoothException);
                                        }
                                    }
                                } else if (isWindows) {
                                    try {
                                        Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\cmd.exe", "/c", "START microsoft.windows.camera:"}).waitFor();
                                        TimeUnit.SECONDS.sleep(1); // Sleep 1 extra second to make sure app is fully loaded.

                                        publish("running");

                                        for (int i = 0; i < cameraTestDurationSeconds; i++) {
                                            TimeUnit.SECONDS.sleep(1);

                                            if (i == 0) {
                                                Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "(New-Object -ComObject Wscript.Shell).AppActivate('Camera')"});
                                            } else if ((i >= (cameraTestDurationSeconds / 2)) && new CommandReader(new String[]{"\\Windows\\System32\\tasklist.exe", "/nh", "/fi", "WINDOWTITLE eq Camera"}).getFirstOutputLineContaining("ApplicationFrameHost.exe").isEmpty()) {
                                                playAlertSound("error");
                                                break;
                                            }
                                        }
                                    } catch (IOException | InterruptedException runCameraAppException) {
                                        if (isTestMode) {
                                            System.out.println("runCameraAppException: " + runCameraAppException);
                                        }
                                    }

                                    publish("finishing"); // Must be here to always set loadingWindow to alwaysOnTop.
                                    TimeUnit.SECONDS.sleep(1); // Sleep for a second to make sure the finishing progress has time to show before being closed.

                                    try {
                                        Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\taskkill.exe", "/fi", "WINDOWTITLE eq Camera", "/t"}).waitFor();
                                    } catch (IOException | InterruptedException quitCameraAppException) {
                                        if (isTestMode) {
                                            System.out.println("quitCameraAppException: " + quitCameraAppException);
                                        }
                                    }
                                }

                                return "done";
                            }

                            @Override
                            protected void process(java.util.List<String> tasks) {
                                tasks.forEach((thisTask) -> {
                                    switch (thisTask) {
                                        case "reloaded":
                                            displayComputerSpecs();
                                            break;
                                        case "running":
                                            loadingWindow.setAlwaysOnTop(false);
                                            loadingWindow.setLoadingTextAndDisplay("QA Helper is Testing Camera for " + cameraTestDurationSeconds + " Seconds", "Testing", "MovieCamera");

                                            (new SwingWorker<Void, String>() {
                                                @Override
                                                protected Void doInBackground() throws Exception {
                                                    do {
                                                        TimeUnit.SECONDS.sleep(1);
                                                        publish("progress");
                                                    } while (loadingWindow.isVisible());

                                                    return null;
                                                }

                                                @Override
                                                protected void process(java.util.List<String> tasks) {
                                                    loadingWindow.incrementLoadingProgressBar();
                                                }
                                            }).execute();

                                            loadingWindow.setLoadingProgressBarToMax(cameraTestDurationSeconds);
                                            loadingWindow.incrementLoadingProgressBar();
                                            break;
                                        case "finishing":
                                            if (loadingWindow.isVisible()) {
                                                // Make sure to only do this if the window is still visible in case the multi-threaded timing make it so that we finish before this gets processed.
                                                loadingWindow.setLoadingTextAndDisplay("QA Helper is Finishing Camera Test", "Testing", "MovieCamera");
                                                loadingWindow.setLoadingProgressBarToMax(0);
                                                loadingWindow.setAlwaysOnTop(true);
                                            }
                                            break;
                                        default:
                                            break;
                                    }
                                });
                            }

                            @Override
                            protected void done() {
                                focusWindow();

                                loadingWindow.closeWindow();

                                try {
                                    String webCamAppReturn = get();

                                    if (webCamAppReturn.equals("install-error")) {
                                        playAlertSound("error");
                                        JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Failed to Install \"" + webCamAppName + "\"</b><br/><br/><i>To manually install \"" + webCamAppName + "\", open Terminal and run:</i><br/><pre>sudo apt install " + webCamAppName + "</pre><br/>After \"" + webCamAppName + "\" is installed, come back here and try again.</html>", "QA Helper  —  Camera Test Error", JOptionPane.ERROR_MESSAGE);
                                    } else {
                                        String[] cameraTestCompletedButtons = new String[]{"Continue", "Test Camera Again"};

                                        focusWindow();
                                        int cameraTestCompletedDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html><b>Camera Test Completed</b>"
                                                + "<br/><br/><br/>"
                                                + new TwemojiImage("CheckMarkButton", qaHelperWindow).toImgTag("left") + " <b style='color: " + successColorHTML + "'>CAMERA TEST PASSED IF:</b>"
                                                + "<ul style='margin-left: 20px'>"
                                                + "<li>The image was <u>crisp, clear, and bright</u>.</li>"
                                                + "<li>There was <u>no dark edge</u> around the image.</li>"
                                                + "<li>There were <u>no spots or artifacts</u> in the image.</li>"
                                                + "</ul>"
                                                + "<br/>"
                                                + new TwemojiImage("CrossMark", qaHelperWindow).toImgTag("left") + " <b style='color: " + errorColorHTML + "'>CAMERA TEST FAILED IF:</b>"
                                                + "<ul style='margin-left: 20px'>"
                                                + "<li>The image was <u>blurry or dim</u>.</li>"
                                                + "<li>There was a <u>dark edge</u> around the image.</li>"
                                                + "<li>There were <u>any spots or artifacts</u> in the image.</li>"
                                                + "</ul>"
                                                + "<br/><center>"
                                                + (isLinux ? new TwemojiImage("Warning", qaHelperWindow).toImgTag("left") + " <i>IF THE CAMERA OUTPUT IS ONLY BLACK, TRY AGAIN WITH \"Use Alternate Web Cam App\" CHECKED</i><br/>" : "")
                                                + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>CONSULT AN INSTRUCTOR IF CAMERA TEST FAILED</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")
                                                + "</center></html>", "QA Helper  —  Camera Test Completed", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("MovieCamera", qaHelperWindow).toImageIcon(), cameraTestCompletedButtons, cameraTestCompletedButtons[0]);

                                        String cameraTestCompletedDialogResponseString = "Continue";
                                        if (cameraTestCompletedDialogResponse > -1) {
                                            cameraTestCompletedDialogResponseString = cameraTestCompletedButtons[cameraTestCompletedDialogResponse];
                                        }

                                        if (cameraTestCompletedDialogResponseString.contains("Test")) {
                                            setActionsEnabled(true);
                                            btnTestCameraActionPerformed(evt);
                                        } else if (!isCameraVerified && btnVerifyCamera.isVisible() && btnVerifyCamera.isEnabled()) {
                                            btnVerifyCameraActionPerformed(null);
                                        }
                                    }
                                } catch (HeadlessException | InterruptedException | ExecutionException finishCameraTestException) {
                                    if (isTestMode) {
                                        System.out.println("finishCameraTestException: " + finishCameraTestException);
                                    }
                                }

                                setActionsEnabled(true);
                            }
                        }).execute();
                    } else {
                        setActionsEnabled(true);
                        if (!isPeripheralTestMode) {
                            focusNextTestTaskVerifyButton(btnTestCamera);
                        }
                    }
                } else {
                    playAlertSound("beep");
                    JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Not Enough Free RAM to Test Camera</b><br/><br/><i>You will be able to test the camera after you've installed the OS.</i></html>", "QA Helper  —  Cannot Run Camera Test", JOptionPane.WARNING_MESSAGE);

                    setActionsEnabled(true);
                    if (!isPeripheralTestMode) {
                        focusNextTestTaskVerifyButton(btnTestCamera);
                    }
                }
            }
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnTestCameraActionPerformed

    private void btnVerifyCameraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifyCameraActionPerformed
        if ((actionsEnabled || (evt == null)) && computerSpecs.hasCamera() && !isWindowsPE) {
            setActionsEnabled(false);

            if (JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>" + ((evt == null) ? "Would you like " : "Are you sure you want ") + "to <i>" + (isCameraVerified ? "UNVERIFY" : "verify") + "</i> the camera?</b></html>", "QA Helper  —  Confirm " + (isCameraVerified ? "Unverify" : "Verify") + " Camera", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage((isCameraVerified ? "CrossMark" : "CheckBoxWithCheck"), qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                isCameraVerified = !isCameraVerified;

                writeToHelperLogFile("Test: Camera " + (isCameraVerified ? "Verified" : "UNVERIFIED"));

                btnVerifyCamera.setText((isCameraVerified ? "Verified" : "Verify"));
                btnVerifyCamera.setFont(btnVerifyCamera.getFont().deriveFont((isCameraVerified ? Font.BOLD : lblVersion.getFont().getStyle())));
                btnVerifyCamera.setForeground(isCameraVerified ? verifiedColor : defaultColor);
                btnVerifyCamera.setBorderPainted(!isCameraVerified);

                new LinuxAutoScripts("Camera " + (isCameraVerified ? "Verified" : "Unverified"), adminPassword);

                focusNextTestTaskVerifyButton(btnVerifyCamera);
            } else {
                focusNextTestTaskVerifyButton(btnTestCamera);
            }

            setActionsEnabled(true);
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnVerifyCameraActionPerformed

    private void btnTestKeyboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestKeyboardActionPerformed
        if (actionsEnabled) {
            setActionsEnabled(false);

            int keyboardTestPromptReturn = JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>Keyboard Test will open the <u>Keyboard Test</u> app.</b>"
                    + "<br/><br/>"
                    + new TwemojiImage("CheckMarkButton", qaHelperWindow).toImgTag("left") + " The best way to test a keyboard is to <u>TYPE ACTUAL WORDS</u> and make sure that exactly<br/>"
                    + new TwemojiImage("Blank", qaHelperWindow).toImgTag("left") + " what you typed <u>shows up in the text box</u> and that each key highlights <b style='color: green; background-color: white'>&nbsp;Green&nbsp;</b> <u>as you type</u>."
                    + "<br/><br/>"
                    + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " Start testing the keyboard by typing <b><i>The quick brown fox jumps over the lazy dog.</i></b>"
                    + "<br/><br/>"
                    + new TwemojiImage("BackhandIndexPointingDown", qaHelperWindow).toImgTag("left") + " When a <u>key is pressed</u> on the keyboard, it will <u>momentarily highlight</u> <b style='color: orange; background-color: white'>&nbsp;Orange&nbsp;</b><br/>"
                    + new TwemojiImage("Blank", qaHelperWindow).toImgTag("left") + " and then <u>highlight</u> <b style='color: green; background-color: white'>&nbsp;Green&nbsp;</b> in the <u>Keyboard Test</u> app."
                    + "<br/><br/>"
                    + new TwemojiImage("Prohibited", qaHelperWindow).toImgTag("left") + " You <u>SHOULD NOT just slide your finger across the keyboard</u> to hit every key.<br/>"
                    + new TwemojiImage("Blank", qaHelperWindow).toImgTag("left") + " <i>With water damaged keyboards, it's common that one key on the keyboard may trigger the wrong key, or multiple keys.</i><br/>"
                    + new TwemojiImage("Blank", qaHelperWindow).toImgTag("left") + " Also, modifier keys such as <b>Shift</b>, <b>Control</b>, <b>" + (isMacOS ? "Option" : "Alt") + "</b>, etc <u>could be stuck down</u> which can make <u>other keys behave incorrectly</u>."
                    + "<br/><br/>"
                    + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("left") + " <u>DO NOT just press</u> the <b>Shift</b>, <b>" + (isMacOS ? "Option" : "Alt") + "</b>, and <b>Caps Lock</b> keys <u>by themselves</u>.<br/>"
                    + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <u>Type while using these keys</u> to make sure they are working properly."
                    + "<br/><br/>"
                    + (isMacOS ? new TwemojiImage("Warning", qaHelperWindow).toImgTag("left") + " The <b>Caps Lock</b> key <u>WILL highlight</u> <b style='color: green; background-color: white'>&nbsp;Green&nbsp;</b> when turned ON, but <u>WILL NOT highlight <b style='color: green; background-color: white'>&nbsp;Green&nbsp;</b> when turned OFF</u>.<br/><br/>" : "")
                    + new TwemojiImage("IndexPointingUp", qaHelperWindow).toImgTag("left") + " You <u>MAY need to hold down</u> the <b>FN</b> key to test the top row of <b>Function</b> keys."
                    + "<br/><br/>"
                    + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " Also, make sure that <u>no keys feel funky, sticky, or get stuck down</u> as you type."
                    + "<br/><br/>"
                    + "<center>"
                    + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>CONSULT AN INSTRUCTOR IF KEYBOARD TEST FAILS</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")
                    + "</center></html>", "QA Helper  —  Keyboard Test", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, new TwemojiImage("Keyboard", qaHelperWindow).toImageIcon());

            if (keyboardTestPromptReturn == JOptionPane.OK_OPTION) {
                String javaPath = "";
                try {
                    URI launchURI = QAHelper.class.getProtectionDomain().getCodeSource().getLocation().toURI();
                    String launchURIString = launchURI.toString();

                    String launchPath;
                    if (isWindows && launchURIString.startsWith("file://")) {
                        launchPath = new File(launchURIString.replace("file://", "//").replace("%20", " ")).getPath(); // To fix server (or Parallels shared folder) paths on Windows.
                    } else {
                        launchPath = new File(launchURI).getPath();
                    }

                    String launchDirectory = launchPath.substring(0, launchPath.lastIndexOf((isWindows ? "\\" : "/")));
                    javaPath = launchDirectory + "/java-jre/bin/java";

                    if (isLinux) {
                        String runningJarInfo = new CommandReader(new String[]{"/usr/bin/pgrep", "-fa", "QA_Helper\\.jar"}).getFirstOutputLineNotContaining("sudo ");
                        String runningJarInfoFirstPart = runningJarInfo.split(" -jar ")[0];
                        javaPath = runningJarInfoFirstPart.substring(runningJarInfoFirstPart.indexOf(" ") + 1);
                    } else if (isWindows) {
                        javaPath = new CommandReader(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "(Get-CimInstance Win32_Process -Filter \\\"Name LIKE 'java%.exe' AND CommandLine LIKE '%QA_Helper.jar%'\\\" | Select-Object -First 1).Path"}).getFirstOutputLine();
                        if (javaPath.endsWith("java.exe") && new File(javaPath.replace("java.exe", "javaw.exe")).exists()) {
                            javaPath = javaPath.replace("java.exe", "javaw.exe");
                        }
                    }

                    if (!isLinux && (launchPath.endsWith(".app/Contents/Java/QA_Helper.jar") || launchPath.endsWith(".app/Contents/app/QA_Helper.jar"))) {
                        javaPath = launchPath.replace("/Java/QA_Helper.jar", "").replace("/app/QA_Helper.jar", "") + "/Frameworks/Java.runtime/Contents/Home/bin/java";
                    }

                    if (!isWindows && (!new File(javaPath).exists() || !new File(javaPath).canExecute())) {
                        javaPath = "/usr/bin/java";
                    }
                } catch (URISyntaxException getLaunchPathException) {
                    if (isTestMode) {
                        System.out.println("getLaunchPathException: " + getLaunchPathException);
                    }
                }

                if (!javaPath.isEmpty() && new File(javaPath).exists() && new File(javaPath).canExecute() && (keyboardTestJarTempPath == null)) {
                    try (InputStream keyboardTestJarInputStream = this.getClass().getClassLoader().getResourceAsStream("Resources/Keyboard_Test.jar")) {
                        File keyboardTestJarTempFile = File.createTempFile("qa_helper-Keyboard_Test", ".jar");
                        keyboardTestJarTempFile.deleteOnExit();

                        try (FileOutputStream keyboardTestJarOutputStream = new FileOutputStream(keyboardTestJarTempFile)) {
                            byte[] buf = new byte[1024];
                            int bytesRead;

                            while ((bytesRead = keyboardTestJarInputStream.read(buf)) > 0) {
                                keyboardTestJarOutputStream.write(buf, 0, bytesRead);
                            }

                            keyboardTestJarTempFile.setExecutable(true);
                            keyboardTestJarTempPath = keyboardTestJarTempFile.getPath();
                        } catch (Exception writeKeyboardTestJarException) {
                            if (isTestMode) {
                                System.out.println("writeKeyboardTestJarException: " + writeKeyboardTestJarException);
                            }
                        }
                    } catch (Exception readKeyboardTestJarException) {
                        if (isTestMode) {
                            System.out.println("readKeyboardTestJarException: " + readKeyboardTestJarException);
                        }
                    }
                }

                boolean keyboardTestAlreadyRunning = false;
                if ((keyboardTestJarTempPath != null) && new File(keyboardTestJarTempPath).exists()) {
                    try {
                        if (isWindows) {
                            keyboardTestAlreadyRunning = (new CommandReader(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "(Get-CimInstance Win32_Process -Filter \\\"Name LIKE 'java%.exe' AND CommandLine LIKE '%Keyboard_Test%.jar%'\\\" -Property Name,CommandLine).CommandLine"}).getOutputLines().length > 0);
                        } else {
                            keyboardTestAlreadyRunning = (new CommandReader(new String[]{"/usr/bin/pgrep", "-fl", "Keyboard_Test"}).getOutputLinesContaining((isMacOS ? "/java" : " java")).length > 0);
                        }

                        if (keyboardTestAlreadyRunning) {
                            try {
                                Runtime.getRuntime().exec((isWindows
                                        // Based On: https://stackoverflow.com/a/58548853
                                        // This new method is much better than the previous AppActivate method, but still also do the AppActive method since it seems to maybe not work as well on Windows 11.
                                        ? new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "$focusWindowFunctionTypes = Add-Type -PassThru -Name FocusWindow -MemberDefinition @'\n"
                                            + "[DllImport(\\\"user32.dll\\\")] public static extern bool SetForegroundWindow(IntPtr hWnd);\n"
                                            + "[DllImport(\\\"user32.dll\\\")] public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);\n"
                                            + "[DllImport(\\\"user32.dll\\\")] public static extern bool IsIconic(IntPtr hWnd);\n"
                                            + "'@\n"
                                            + "$keyboardTestPID = (Get-CimInstance Win32_Process -Filter \\\"Name LIKE 'java%.exe' AND CommandLine LIKE '%Keyboard_Test%.jar%'\\\" -Property ProcessId).ProcessId\n"
                                            + "if ($keyboardTestPID) {\n"
                                            + "$keyboardTestWindowHandle = (Get-Process | Where-Object Id -eq $keyboardTestPID).MainWindowHandle\n"
                                            + "if ($keyboardTestWindowHandle) {\n"
                                            + "$focusWindowFunctionTypes::SetForegroundWindow($keyboardTestWindowHandle) | Out-Null\n"
                                            + "if ($focusWindowFunctionTypes::IsIconic($keyboardTestWindowHandle)) {\n"
                                            + "$focusWindowFunctionTypes::ShowWindow($keyboardTestWindowHandle, 9) | Out-Null\n"
                                            + "}\n"
                                            + "}\n"
                                            + "}\n"
                                            + "$WshellScript = (New-Object -ComObject Wscript.Shell); $WshellScript.AppActivate('Keyboard Test')"
                                        }
                                        : (isLinux ? new String[]{"/usr/bin/wmctrl", "-Fa", "Keyboard Test"}
                                        : new String[]{"/usr/bin/osascript", "-e", "if (application id \"net.java.openjdk.java\" is running) then tell application id \"net.java.openjdk.java\" to activate"})));
                            } catch (IOException focusKeyboardTestException) {
                                System.out.println("focusKeyboardTestException: " + focusKeyboardTestException);
                            }
                        } else {
                            float currentScaleFactor = UIScale.getUserScaleFactor();
                            if (isLinux && (linuxInitialScaleFactor != 1.0f)) {
                                currentScaleFactor = (currentScaleFactor / linuxInitialScaleFactor);
                            }

                            String currentScaleFactorPercentage = Math.round(currentScaleFactor * 100) + "%"; // Pass scale factor percetage to Keyboard Test as argument which will be parsed and used so that it is launched with a matching scale factor to QA Helper.
                            Runtime.getRuntime().exec(new String[]{javaPath, "-jar", keyboardTestJarTempPath, currentScaleFactorPercentage});
                        }
                    } catch (IOException launchKeyboardTestAppError) {
                        System.out.println("launchKeyboardTestAppError: " + launchKeyboardTestAppError);
                    }

                    if (isWindowsPE) {
                        setState(Frame.ICONIFIED);
                    } else if (!keyboardTestAlreadyRunning) {
                        JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>The <u>Keyboard Test</u> app will open momentarily...</b>"
                                + "<br/><br/><center>"
                                + new TwemojiImage("CheckMarkButton", qaHelperWindow).toImgTag("left") + " When you are finished testing the keyboard, come back here and click \"OK\" to proceed " + new TwemojiImage("ThumbsUp", qaHelperWindow).toImgTag("right")
                                + "<br/><br/>"
                                + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>CONSULT AN INSTRUCTOR IF KEYBOARD TEST FAILED</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")
                                + "</center></html>", "QA Helper  —  Keyboard Test", JOptionPane.PLAIN_MESSAGE, new TwemojiImage("Keyboard", qaHelperWindow).toImageIcon());

                        if ((computerSpecs != null) && computerSpecs.getKeyboardRecalled()) {
                            JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Keyboard Possibly Recalled for Repair</b><br/><br/><i>If this keyboard had any bad keys or other issues, it may be able to be replaced for free by the manufacturer.</i></html>", "QA Helper  —  Keyboard Recall", JOptionPane.WARNING_MESSAGE, new TwemojiImage("Construction", qaHelperWindow).toImageIcon(32));
                        }
                    }

                    if (!isKeyboardVerified && btnVerifyKeyboard.isVisible() && btnVerifyKeyboard.isEnabled()) {
                        if (isWindowsPE) {
                            btnVerifyKeyboard.requestFocusInWindow();
                        } else {
                            btnVerifyKeyboardActionPerformed(null);
                        }
                    }

                    setActionsEnabled(true, !isWindowsPE);
                } else {
                    playAlertSound("beep");
                    JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Keyboard Test App Not Found</b><br/><br/><pre>javaPath = " + javaPath + "<br/>keyboardTestJarTempPath = " + keyboardTestJarTempPath + "</pre><br/><i>This should not have happened, please inform Free Geek I.T.</i></html>", "QA Helper  —  Cannot Run Keyboard Test", JOptionPane.WARNING_MESSAGE);

                    setActionsEnabled(true);
                    if (!isPeripheralTestMode) {
                        focusNextTestTaskVerifyButton(btnTestKeyboard);
                    }
                }
            } else {
                setActionsEnabled(true);
                if (!isPeripheralTestMode) {
                    focusNextTestTaskVerifyButton(btnTestKeyboard);
                }
            }
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnTestKeyboardActionPerformed

    private void btnVerifyKeyboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifyKeyboardActionPerformed
        if (actionsEnabled || (evt == null)) {
            setActionsEnabled(false);

            if (JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>" + ((evt == null) ? "Would you like " : "Are you sure you want ") + "to <i>" + (isKeyboardVerified ? "UNVERIFY" : "verify") + "</i> the keyboard?</b></html>", "QA Helper  —  Confirm " + (isKeyboardVerified ? "Unverify" : "Verify") + " Keyboard", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage((isKeyboardVerified ? "CrossMark" : "CheckBoxWithCheck"), qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                isKeyboardVerified = !isKeyboardVerified;

                writeToHelperLogFile("Test: Keyboard " + (isKeyboardVerified ? "Verified" : "UNVERIFIED"));

                btnVerifyKeyboard.setText((isKeyboardVerified ? "Verified" : "Verify"));
                btnVerifyKeyboard.setFont(btnVerifyKeyboard.getFont().deriveFont((isKeyboardVerified ? Font.BOLD : lblVersion.getFont().getStyle())));
                btnVerifyKeyboard.setForeground(isKeyboardVerified ? verifiedColor : defaultColor);
                btnVerifyKeyboard.setBorderPainted(!isKeyboardVerified);

                new LinuxAutoScripts("Keyboard " + (isKeyboardVerified ? "Verified" : "Unverified"), adminPassword);

                focusNextTestTaskVerifyButton(btnVerifyKeyboard);
            } else {
                focusNextTestTaskVerifyButton(btnTestKeyboard);
            }

            setActionsEnabled(true);
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnVerifyKeyboardActionPerformed

    private void btnTestMouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestMouseActionPerformed
        if (actionsEnabled && !isWindowsPE) {
            setActionsEnabled(false);

            QAMouseTestWindow mouseTestWindow = new QAMouseTestWindow(qaHelperWindow, true);
            mouseTestWindow.setLocationRelativeTo(null);
            mouseTestWindow.setVisible(true);

            if (!isMouseVerified && btnVerifyMouse.isVisible() && btnVerifyMouse.isEnabled()) {
                btnVerifyMouseActionPerformed(null);
            }

            setActionsEnabled(true);
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnTestMouseActionPerformed

    private void btnVerifyMouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifyMouseActionPerformed
        if ((actionsEnabled || (evt == null)) && !isWindowsPE) {
            setActionsEnabled(false);

            if (JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>" + ((evt == null) ? "Would you like " : "Are you sure you want ") + "to <i>" + (isMouseVerified ? "UNVERIFY" : "verify") + "</i> the mouse?</b></html>", "QA Helper  —  Confirm " + (isMouseVerified ? "Unverify" : "Verify") + " Mouse", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage((isMouseVerified ? "CrossMark" : "CheckBoxWithCheck"), qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                isMouseVerified = !isMouseVerified;

                writeToHelperLogFile("Test: Mouse " + (isMouseVerified ? "Verified" : "UNVERIFIED"));

                btnVerifyMouse.setText((isMouseVerified ? "Verified" : "Verify"));
                btnVerifyMouse.setFont(btnVerifyMouse.getFont().deriveFont((isMouseVerified ? Font.BOLD : lblVersion.getFont().getStyle())));
                btnVerifyMouse.setForeground(isMouseVerified ? verifiedColor : defaultColor);
                btnVerifyMouse.setBorderPainted(!isMouseVerified);

                new LinuxAutoScripts("Mouse " + (isMouseVerified ? "Verified" : "Unverified"), adminPassword);

                focusNextTestTaskVerifyButton(btnVerifyMouse);
            } else {
                focusNextTestTaskVerifyButton(btnTestMouse);
            }

            setActionsEnabled(true);
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnVerifyMouseActionPerformed

    private void btnSetupBIOSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetupBIOSActionPerformed
        if (actionsEnabled && !isMacOS) {
            setActionsEnabled(false);

            String[] biosSetupButtons = ((isLoggedIn && (computerSpecs != null) && pid.startsWith("FG")) ? new String[]{"OK", "Log Absolute Persistence/Computrace Enabled"} : new String[]{"OK"});

            // Tried using <ol> here but the numbers look bad on Windows and Linux (not anti-aliased).
            int biosSetupDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html>"
                    + "<b style='font-family: monospace'>&nbsp;1)</b> <u>Boot into UEFI/BIOS Setup</u> and " + new TwemojiImage("Memo", qaHelperWindow).toImgTag("inline") + " <b>make a note of the UEFI/BIOS Setup and Boot Options keys.</b>"
                    + "<br/><br/>"
                    + "<b style='font-family: monospace'>&nbsp;2)</b> Confirm there are <u>no UEFI/BIOS passwords set</u>. " + new TwemojiImage("Unlocked", qaHelperWindow).toImgTag("inline") + " <b><i>If possible</i>, remove any existing UEFI/BIOS passwords.</b>"
                    + "<br/>"
                    + "<b style='font-family: monospace'>&nbsp;&nbsp;&nbsp;</b> " + new TwemojiImage("LockedWithKey", qaHelperWindow).toImgTag("left") + " <i>IF A UEFI/BIOS PASSWORD IS SET THAT CANNOT BE REMOVED, INFORM AN INSTRUCTOR</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")
                    + "<br/><br/>"
                    + "<b style='font-family: monospace'>&nbsp;3)</b> <u>Set the date and time</u> in UEFI/BIOS Setup to the <b>current date and time.</b>"
                    + "<br/><br/>"
                    + "<b style='font-family: monospace'>&nbsp;4)</b> <u>RESET</u> and <u>SAVE</u> the <b>default UEFI/BIOS Setup configuration.</b>"
                    + "<br/><br/>"
                    + "<b style='font-family: monospace'>&nbsp;5)</b> Fully <u>SHUT DOWN</u> the computer <i>(don't just reboot)</i> and <u>DISCONNECT</u> the power and <b>wait a moment.</b>"
                    + "<br/><br/>"
                    + "<b style='font-family: monospace'>&nbsp;6)</b> <u>Re-connect the power</u> and <b>boot the computer back into UEFI/BIOS Setup.</b>"
                    + "<br/><br/>"
                    + "<b style='font-family: monospace'>&nbsp;7)</b> <u>Double-check the date and time</u> in UEFI/BIOS Setup and <b>confirm it is still correct.</b>"
                    + "<br/>"
                    + "<b style='font-family: monospace'>&nbsp;&nbsp;&nbsp;</b> " + new TwemojiImage("ThumbsDown", qaHelperWindow).toImgTag("left") + " <i>If the date and time is no longer correct, the CMOS battery may need to be replaced.</i>"
                    + "<br/>"
                    + "<b style='font-family: monospace'>&nbsp;&nbsp;&nbsp;</b> " + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>IF THE DATE AND TIME IS NO LONGER CORRECT, INFORM AN INSTRUCTOR</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")
                    + "<br/><br/>"
                    + "<b style='font-family: monospace'>&nbsp;8)</b> For <u>UEFI</u>, <i>set the boot mode</i> to <b>UEFI Only <i>(with CSM Off)</i></b> or to <b>Both <i>with UEFI First (and CSM On)</i>.</b>"
                    + "<br/>"
                    + "<b style='font-family: monospace'>&nbsp;&nbsp;&nbsp;</b> For <u>Legacy BIOS</u>, <i>set boot mode</i> to <b>Legacy BIOS Only</b> or to <b>Both <i>with Legacy BIOS First</i>.</b>"
                    + "<br/><br/>"
                    + "<b style='font-family: monospace'>&nbsp;9)</b> For <u>Legacy BIOS</u>, or <u>if UEFI allows a custom boot order</u>, set the <i>following boot order/sequence/priority:</i>"
                    + "<br/>"
                    + "<b style='font-family: monospace'>&nbsp;&nbsp;&nbsp;</b> <b>Optical Drive, Hard Drive/Solid State Drive, USB</b>"
                    + "<br/><br/>"
                    + "<b style='font-family: monospace'>10)</b> Set <u>SATA Operation</u> to <b>AHCI.</b>"
                    + "<br/><br/>"
                    + "<b style='font-family: monospace'>11)</b> <u>DISABLE any and all SECURITY settings</u> related to the <i>following keywords:</i>"
                    + "<br/>"
                    + "<b style='font-family: monospace'>&nbsp;&nbsp;&nbsp;</b> <b>MEBx, AMT, Intel ME, OROM Keyboard Access, Absolute Persistence/Computrace, Remote Management</b>"
                    + "<br/>"
                    + "<b style='font-family: monospace'>&nbsp;&nbsp;&nbsp;</b> " + new TwemojiImage("Eyes", qaHelperWindow).toImgTag("left") + " <i>Check all sections thoroughly for any of these settings as they may be stored separately and in a variety of sections.</i>"
                    + "<br/>"
                    + "<b style='font-family: monospace'>&nbsp;&nbsp;&nbsp;</b> " + new TwemojiImage("Unlocked", qaHelperWindow).toImgTag("left") + " <i>These settings could allow a low level backdoor, they must be disabled to ensure all refurbished computers are secure.</i>"
                    + "<br/>"
                    + "<b style='font-family: monospace'>&nbsp;&nbsp;&nbsp;</b> " + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>IF ANY OF THESE SETTINGS ARE ENABLED AND CANNOT BE DISABLED, INFORM AN INSTRUCTOR</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")
                    + "<br/><br/>"
                    + "<b style='font-family: monospace'>12)</b> <u>Save the UEFI/BIOS Setup configuration</u> and <b>reboot the computer to boot up normally.</b>"
                    + "</html>", "QA Helper  —  UEFI/BIOS Setup Setup Information", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("ControlKnobs", qaHelperWindow).toImageIcon(), biosSetupButtons, biosSetupButtons[0]);

            String biosSetupDialogResponseString = "Cancel";
            if (biosSetupDialogResponse > -1) {
                biosSetupDialogResponseString = biosSetupButtons[biosSetupDialogResponse];
            }

            switch (biosSetupDialogResponseString) {
                case "OK":
                    if (!isBIOSverified && btnVerifyBIOS.isVisible() && btnVerifyBIOS.isEnabled()) {
                        btnVerifyBIOSActionPerformed(null);
                    }

                    setActionsEnabled(true);

                    break;
                case "Log Absolute Persistence/Computrace Enabled":
                    setActionsEnabled(true);

                    logAbsoluteComputraceEnabled(true);

                    break;
                default:
                    setActionsEnabled(true);

                    break;
            }
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnSetupBIOSActionPerformed

    private void logAbsoluteComputraceEnabled(boolean shouldConfirm) {
        if (actionsEnabled && isLoggedIn && (computerSpecs != null) && pid.startsWith("FG") && !isMacOS) {
            setActionsEnabled(false);

            if (!shouldConfirm || JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>Are you sure you want to log ID \"" + pid + "\" as Absolute Persistence/Computrace enabled?</b><br/><br/><p style='font-family: monospace'><b>Serial:</b> " + computerSpecs.getSerial() + "<br/><b>&nbsp;&nbsp;UUID:</b> " + computerSpecs.getBiosUUID() + "</p></html>", "QA Helper  —  Confirm Log Absolute Persistence/Computrace Enabled", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage("ControlKnobs", qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                loadingWindow.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
                setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

                loadingWindow.setLoadingTextAndDisplay("QA Helper is Logging Absolute Persistence/Computrace Enabled", "Working", "ControlKnobs");

                LinkedHashMap<String, String> logAbsoluteEnabledParameters = new LinkedHashMap<>();
                logAbsoluteEnabledParameters.put("id", pid);
                logAbsoluteEnabledParameters.put("serial", computerSpecs.getSerial());
                logAbsoluteEnabledParameters.put("uuid", computerSpecs.getBiosUUID());
                logAbsoluteEnabledParameters.put("brand", computerSpecs.getFullBrand());
                logAbsoluteEnabledParameters.put("model", computerSpecs.getFullModel());

                (new SwingWorker<String, Void>() {
                    @Override
                    protected String doInBackground() throws Exception {
                        if (!shouldConfirm) { // If reattempting (without confirming again), sleep a second before trying the server again.
                            try {
                                TimeUnit.SECONDS.sleep(1);
                            } catch (InterruptedException sleepException) {
                                // Ignore sleepException
                            }
                        }

                        return new WebReader(privateStrings.getLogAbsoluteEnabledURL(isTestMode), logAbsoluteEnabledParameters, 15).getFirstOutputLine();
                    }

                    @Override
                    protected void done() {
                        try {
                            loadingWindow.closeWindow();

                            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                            loadingWindow.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                            setActionsEnabled(true);

                            String logAbsoluteEnabledResult = get();

                            if (isTestMode) {
                                System.out.println("logAbsoluteEnabledResult = " + logAbsoluteEnabledResult);
                            }

                            if (logAbsoluteEnabledResult.endsWith("LOGGED")) {
                                JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>" + (logAbsoluteEnabledResult.startsWith("ALREADY") ? "Already" : "Successfully") + " Logged ID \"" + pid + "\" as Absolute Persistence/Computrace Enabled</u></b><br/><br/><p style='font-family: monospace'><b>Serial:</b> " + computerSpecs.getSerial() + "<br/><b>&nbsp;&nbsp;UUID:</b> " + computerSpecs.getBiosUUID() + "</p></html>", "QA Helper  —  " + (logAbsoluteEnabledResult.startsWith("ALREADY") ? "Already" : "Successfully") + " Logged Absolute Persistence/Computrace Enabled", JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("ControlKnobs", qaHelperWindow).toImageIcon(32));
                            } else {
                                if (logAbsoluteEnabledResult.isEmpty()) {
                                    logAbsoluteEnabledResult = "NO RESPONSE";
                                }

                                sendErrorEmail("Failed to Log Absolute Persistence/Computrace Enabled - " + logAbsoluteEnabledResult);

                                playAlertSound("error");

                                JTextArea logAbsoluteEnabledErrorTextArea = new JTextArea(5, 100);
                                logAbsoluteEnabledErrorTextArea.setText(logAbsoluteEnabledResult);
                                logAbsoluteEnabledErrorTextArea.setEditable(false);
                                logAbsoluteEnabledErrorTextArea.setLineWrap(true);
                                logAbsoluteEnabledErrorTextArea.setWrapStyleWord(true);
                                logAbsoluteEnabledErrorTextArea.setFont(new Font(Font.MONOSPACED, lblVersion.getFont().getStyle(), logAbsoluteEnabledErrorTextArea.getFont().getSize()));
                                JScrollPane logRemoteManagedMacErrorScrollPane = new JScrollPane(logAbsoluteEnabledErrorTextArea);

                                int failedToLogAbsoluteEnabledResult = JOptionPane.showOptionDialog(qaHelperWindow, new Object[]{"<html><b>Failed to Log Absolute Persistence/Computrace Enabled</b><br/><br/></html>",
                                    logRemoteManagedMacErrorScrollPane,
                                    "<html><br/><b>You must be connected to the internet to be able to log that Absolute Persistence/Computrace is enabled on this computer.</b><br/><br/>"
                                    + "Make sure you're connected to either a Wi-Fi network or plugged in with an Ethernet cable.<br/>"
                                    + "If this computer does not have an Ethernet port, use a USB to Ethernet adapter.<br/>"
                                    + "Once you're connected to Wi-Fi or Ethernet, it may take a few moments for the internet connection to be established.<br/>"
                                    + "If it takes more than a few minutes, consult an instructor or inform Free Geek I.T.</html>"},
                                        "QA Helper  —  Log Absolute Enabled Error", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, null, new String[]{"Try Again", "Cancel"}, "Try Again");

                                if (failedToLogAbsoluteEnabledResult == JOptionPane.YES_OPTION) {
                                    logAbsoluteComputraceEnabled(false);
                                }
                            }
                        } catch (InterruptedException | ExecutionException logSpecsException) {
                            System.out.println("logSpecsException: " + logSpecsException);
                        }
                    }
                }).execute();
            } else {
                setActionsEnabled(true);
            }
        } else {
            playAlertSound("beep");
        }
    }

    private void btnVerifyBIOSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifyBIOSActionPerformed
        if ((actionsEnabled || (evt == null)) && !isMacOS) {
            setActionsEnabled(false);

            if (JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>" + ((evt == null) ? "Would you like " : "Are you sure you want ") + "to <i>" + (isBIOSverified ? "UNVERIFY" : "verify") + "</i> the UEFI/BIOS Setup configuration?</b></html>", "QA Helper  —  Confirm " + (isBIOSverified ? "Unverify" : "Verify") + " UEFI/BIOS Setup", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage((isBIOSverified ? "CrossMark" : "CheckBoxWithCheck"), qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                isBIOSverified = !isBIOSverified;

                writeToHelperLogFile("Task: UEFI/BIOS Setup " + (isBIOSverified ? "Verified" : "UNVERIFIED"));

                btnVerifyBIOS.setText((isBIOSverified ? "Verified" : "Verify"));
                btnVerifyBIOS.setFont(btnVerifyBIOS.getFont().deriveFont((isBIOSverified ? Font.BOLD : lblVersion.getFont().getStyle())));
                btnVerifyBIOS.setForeground(isBIOSverified ? verifiedColor : defaultColor);
                btnVerifyBIOS.setBorderPainted(!isBIOSverified);

                new LinuxAutoScripts("UEFI/BIOS Setup " + (isBIOSverified ? "Verified" : "Unverified"), adminPassword);

                focusNextTestTaskVerifyButton(btnVerifyBIOS);
            } else {
                focusNextTestTaskVerifyButton(btnSetupBIOS);
            }

            setActionsEnabled(true);
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnVerifyBIOSActionPerformed

    private void btnCheckPortsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckPortsActionPerformed
        if (actionsEnabled) {
            setActionsEnabled(false);

            JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Test All USB Ports:</b>"
                    + "<br/><br/>"
                    + new TwemojiImage("ComputerMouse", qaHelperWindow).toImgTag("left") + " <u>Plug a USB mouse into a USB port</u> and test the USB port by <u>moving the cursor on screen with the USB mouse</u>."
                    + "<br/><br/>"
                    + new TwemojiImage("ShuffleTracksButton", qaHelperWindow).toImgTag("left") + " Repeat this test for <u>every USB port</u>."
                    + "<br/><br/>"
                    + new TwemojiImage("Memo", qaHelperWindow).toImgTag("left") + " Make note of <u>any USB ports that do not function</u> and <u>cover broken or non-functional ports with electrical tape</u>."
                    + "<br/><br/><br/>"
                    + "<b>Test HDMI/DisplayPort/Mini DisplayPort:</b>"
                    + "<br/><br/>"
                    + new TwemojiImage("ElectricPlug", qaHelperWindow).toImgTag("left") + " <u>Plug an external monitor into this computer</u> with an HDMI/DisplayPort/Mini DisplayPort cable."
                    + "<br/><br/>"
                    + new TwemojiImage("CheckBoxWithCheck", qaHelperWindow).toImgTag("left") + " If HDMI/DisplayPort/Mini DisplayPort is working correctly, you should <u>see this computers desktop picture on the external monitor</u>."
                    + "<br/><br/>"
                    + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>IF YOU DO NOT SEE THE DESKTOP PICTURE ON THE EXTERNAL MONITOR, INFORM AN INSTRUCTOR</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")
                    + "</html>", "QA Helper  —  Check Ports", JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("PuzzlePiece", qaHelperWindow).toImageIcon());

            if (!isPortsVerified && btnVerifyPorts.isVisible() && btnVerifyPorts.isEnabled()) {
                btnVerifyPortsActionPerformed(null);
            }

            setActionsEnabled(true);
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnCheckPortsActionPerformed

    private void btnVerifyPortsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifyPortsActionPerformed
        if (actionsEnabled || (evt == null)) {
            setActionsEnabled(false);

            if (JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>" + ((evt == null) ? "Would you like " : "Are you sure you want ") + "to <i>" + (isPortsVerified ? "UNVERIFY" : "verify") + "</i> the ports?</b></html>", "QA Helper  —  Confirm " + (isPortsVerified ? "Unverify" : "Verify") + " Ports", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage((isPortsVerified ? "CrossMark" : "CheckBoxWithCheck"), qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                isPortsVerified = !isPortsVerified;

                writeToHelperLogFile("Task: Ports " + (isPortsVerified ? "Verified" : "UNVERIFIED"));

                btnVerifyPorts.setText((isPortsVerified ? "Verified" : "Verify"));
                btnVerifyPorts.setFont(btnVerifyPorts.getFont().deriveFont((isPortsVerified ? Font.BOLD : lblVersion.getFont().getStyle())));
                btnVerifyPorts.setForeground(isPortsVerified ? verifiedColor : defaultColor);
                btnVerifyPorts.setBorderPainted(!isPortsVerified);

                new LinuxAutoScripts("Ports " + (isPortsVerified ? "Verified" : "Unverified"), adminPassword);

                focusNextTestTaskVerifyButton(btnVerifyPorts);
            } else {
                focusNextTestTaskVerifyButton(btnCheckPorts);
            }

            setActionsEnabled(true);
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnVerifyPortsActionPerformed

    private void btnCheckDriversActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckDriversActionPerformed
        if (actionsEnabled && isLinux && !isLinuxLiveBoot) {
            if (!new CommandReader(new String[]{"/usr/bin/pgrep", "-f", "(driver-manager|mintdrivers)"}).getFirstOutputLine().isEmpty()) {
                try {
                    Runtime.getRuntime().exec(new String[]{"/usr/bin/wmctrl", "-a", "Driver Manager"});
                } catch (IOException focusDriverManagerException) {
                    if (isTestMode) {
                        System.out.println("focusDriverManagerException: " + focusDriverManagerException);
                    }
                }

                if (!isDriversVerified && btnVerifyDrivers.isVisible() && btnVerifyDrivers.isEnabled()) {
                    btnVerifyDriversActionPerformed(null);
                }
            } else {
                setActionsEnabled(false);

                String[] aptProcesses = new CommandReader(new String[]{"/usr/bin/pgrep", "-fa", "(apt|mintUpdate)"}).getOutputLines();
                boolean aptIsRunning = false;
                for (String thisAptProcess : aptProcesses) {
                    if (thisAptProcess.contains("apt-get") || thisAptProcess.contains("/bin/apt") || thisAptProcess.contains("/apt/methods/") || (thisAptProcess.contains("/mintUpdate/") && !thisAptProcess.endsWith("/mintUpdate/mintUpdate.py"))) {
                        aptIsRunning = true;
                        break;
                    }
                }

                if (aptIsRunning) {
                    playAlertSound("beep");

                    JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Another installation process (such as \"apt\" or \"mintUpdate\") is currently running. <i>This process may be running in the background.</i></b><br/><br/><i>This other installation process could interrupt <i>Driver Manager</i> or <i>Driver Manager</i> may interrupt the other installation process.</i><br/><br/>Try again after the other installation process has finished.</html>", "QA Helper  —  Check Drivers Warning", JOptionPane.WARNING_MESSAGE);
                } else {
                    String possibleSudo = (!adminPassword.equals("*UNKNOWN*") ? "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk " : "/usr/bin/pkexec ");

                    try {
                        Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", possibleSudo + "/usr/bin/driver-manager"});

                        loadingWindow.setLoadingTextAndDisplay("QA Helper is Waiting for Driver Manager to Launch", "Working", "Toolbox");

                        (new SwingWorker<Void, Void>() {
                            @Override
                            protected Void doInBackground() throws Exception {
                                for (int waitForDriverManager = 0; waitForDriverManager < 60; waitForDriverManager++) {
                                    TimeUnit.MILLISECONDS.sleep(500);

                                    if (!new CommandReader(new String[]{"/usr/bin/wmctrl", "-l"}).getFirstOutputLineContaining("Driver Manager").isEmpty()) {
                                        Runtime.getRuntime().exec(new String[]{"/usr/bin/wmctrl", "-r", "Driver Manager", "-e", "0,-100,-100,-1,-1"}); // In Mint 21.1, the "Driver Manager" window will not go all the way to the top right corner if "0,0" are specified, so use "-100,-100" instead to accomodate this behavior (and "wmctrl" will not put the window off screen even if "-100" is actuall too much).
                                        break;
                                    }
                                }

                                return null;
                            }

                            @Override
                            protected void done() {
                                loadingWindow.closeWindow();
                            }
                        }).execute();

                        // TODO: Add a message describing what should be checked in Driver Manager
                        //JOptionPane.showMessageDialog(qaHelperWindow, "<html><b><i>Driver Manager</i> will open momentarily.</b></html>", "QA Helper  —  Check Drivers", JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("Toolbox", qaHelperWindow).toImageIcon(32));
                        if (!isDriversVerified && btnVerifyDrivers.isVisible() && btnVerifyDrivers.isEnabled()) {
                            btnVerifyDriversActionPerformed(null);
                        }
                    } catch (IOException openDriverManagerException) {
                        if (isTestMode) {
                            System.out.println("openDriverManagerException: " + openDriverManagerException);
                        }
                    }
                }

                setActionsEnabled(true);
            }
        } else if (actionsEnabled && isWindows && !isWindowsPE) {
            setActionsEnabled(false);

            loadingWindow.setLoadingTextAndDisplay("QA Helper is Checking Drivers", "Working", "Toolbox");

            (new SwingWorker<String, Void>() {
                @Override
                protected String doInBackground() throws Exception {
                    // ConfigManagerErrorCode NOTES:
                    // Get-PnpDevice outputs ConfigManagerErrorCode as Problem Strings rather than Error Code integers (such as CM_PROB_FAILED_INSTALL, which is Error Code 28).
                    // But Win32_PnPEntity, Win32_VideoController, and Win32_SoundDevice (which are all used within GetComputerSpecs) output the Error Code integer.
                    // Although, Get-PnpDevice can still filter ConfigManagerErrorCode by their Error Code integers (rather than having to use the Problem Strings) as I do in the following code:
                    // Ignore ConfigManagerErrorCode 45 because it only indicates the disconnected status of a device and is not a problem.
                    // Ignore ConfigManagerErrorCode 24 for PS/2 Keyboard or PS/2 Mouse because it just means a PS/2 Keyboard or PS/2 Mouse is not plugged in.
                    String[] pnpDevicesWithErrorCodes = new CommandReader(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "[Console]::OutputEncoding = New-Object System.Text.UTF8Encoding; Get-PnpDevice | Where-Object { ($_.ConfigManagerErrorCode -ne 0)" + (isTestMode ? "" : " -and ($_.ConfigManagerErrorCode -ne 45) -and (($_.ConfigManagerErrorCode -ne 24) -or (($_.Caption -notlike '*PS/2 Keyboard*') -and ($_.Caption -notlike '*PS/2 Mouse*')))") + " } | Format-List Caption,ConfigManagerErrorCode,DeviceID"}).getOutputLines();
                    int numberOfPnPDevicesWithErrorCodes = 0;

                    String pnpDevicesWithErrors = "";

                    String thisDeviceCaption = "";
                    String thisDeviceErrorCode = "";
                    for (String thisPnpDeviceWithErrorCodeLine : pnpDevicesWithErrorCodes) {
                        if (thisPnpDeviceWithErrorCodeLine.contains(": ")) {
                            String thisPnpDeviceProperty = thisPnpDeviceWithErrorCodeLine.substring(thisPnpDeviceWithErrorCodeLine.indexOf(": ") + 2);

                            if (thisPnpDeviceWithErrorCodeLine.startsWith("Caption")) {
                                thisDeviceCaption = thisPnpDeviceProperty;
                            } else if (thisPnpDeviceWithErrorCodeLine.startsWith("ConfigManagerErrorCode")) {
                                thisDeviceErrorCode = thisPnpDeviceProperty.replace("CM_PROB_", "");
                            } else if (thisPnpDeviceWithErrorCodeLine.startsWith("DeviceID")) {
                                numberOfPnPDevicesWithErrorCodes++;

                                String thisDeviceID = thisPnpDeviceProperty;

                                // Some devices won't be PCI devices, so they won't get fully translated, but might get a vendor at least.
                                String thisDeviceName = computerSpecs.getCleanNameForWindowsDeviceID(thisDeviceID, thisDeviceCaption);

                                if (thisDeviceName.equals("N/A")) {
                                    String[] thisDeviceIDparts = thisDeviceID.split("\\\\");

                                    if ((thisDeviceIDparts.length == 3) && thisDeviceIDparts[2].contains("&")) { // Get rid of any concatenated Instance IDs on the end of Device IDs, because that part isn't useful in Google searches.
                                        thisDeviceID = thisDeviceIDparts[0] + "\\" + thisDeviceIDparts[1];
                                    }
                                }

                                if (thisDeviceCaption.isEmpty() && thisDeviceName.equals("N/A")) {
                                    pnpDevicesWithErrors += "<li>Unknown Device: <i>" + thisDeviceID + "</i>";
                                } else {
                                    pnpDevicesWithErrors += "<li>" + (thisDeviceCaption.isEmpty() ? "" : thisDeviceCaption + ": ") + "<i>" + (thisDeviceName.equals("N/A") ? thisDeviceID : thisDeviceName) + "</i>";
                                }

                                pnpDevicesWithErrors += " <b style='color: " + errorColorHTML + "'>(Error " + thisDeviceErrorCode + ")</b></li>";

                                thisDeviceErrorCode = "";
                                thisDeviceCaption = "";
                            }
                        }
                    }

                    boolean gpuNotDetected = computerSpecs.getGPUarray().isEmpty();
                    String gpuErrorString = computerSpecs.getGPUerrorString();

                    boolean audioNotDetected = computerSpecs.getAudioArray().isEmpty();
                    String audioErrorString = computerSpecs.getAudioErrorString();
                    String wirelessErrorString = computerSpecs.getWirelessErrorString();

                    return new TwemojiImage((gpuNotDetected ? "Warning" : (!gpuErrorString.isEmpty() ? "CrossMark" : "CheckMarkButton")), qaHelperWindow).toImgTag("left") + " <b style='color: " + (gpuNotDetected ? warningColorHTML : (!gpuErrorString.isEmpty() ? errorColorHTML : successColorHTML)) + "'>"
                            + (gpuNotDetected ? "GPU NOT DETECTED" : (!gpuErrorString.isEmpty() ? "GPU " + gpuErrorString : "GPU Drivers Installed with No Errors")) + "</b><br/><br/>"
                            + new TwemojiImage((audioNotDetected ? "Warning" : (!audioErrorString.isEmpty() ? (audioErrorString.equals("DRIVER MAY NOT BE INSTALLED") ? "Warning" : "CrossMark") : "CheckMarkButton")), qaHelperWindow).toImgTag("left") + " <b style='color: " + (audioNotDetected ? warningColorHTML : (!audioErrorString.isEmpty() ? (audioErrorString.equals("DRIVER MAY NOT BE INSTALLED") ? warningColorHTML : errorColorHTML) : successColorHTML)) + "'>"
                            + (audioNotDetected ? "AUDIO NOT DETECTED" : (!audioErrorString.isEmpty() ? "AUDIO " + audioErrorString : "Audio Drivers Installed with No Errors")) + "</b>" + (audioErrorString.contains("DRIVER MAY NOT BE INSTALLED")
                            ? "<br/>" + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <b style='color: " + attentionColorHTML + "'><i>If Audio Test Passed &amp; No Other Audio or GPU Driver Errors</i>, \"DRIVER MAY NOT BE INSTALLED\" Warning Can Be Ignored</b>" : "")
                            + "<br/><br/>"
                            + (!wirelessErrorString.isEmpty() ? new TwemojiImage("CrossMark", qaHelperWindow).toImgTag("left") + " <b style='color: " + errorColorHTML + "'>WIRELESS " + wirelessErrorString + "</b><br/><br/>" : "")
                            + ((numberOfPnPDevicesWithErrorCodes > 0)
                                    ? new TwemojiImage("CrossMark", qaHelperWindow).toImgTag("left") + " <b style='color: " + errorColorHTML + "'>" + numberOfPnPDevicesWithErrorCodes + " DEVICE" + ((numberOfPnPDevicesWithErrorCodes > 1) ? "S" : "") + " WITH DRIVER ERROR" + ((numberOfPnPDevicesWithErrorCodes > 1) ? "S" : "") + ":</b><ul style='margin-left: 20px'>" + pnpDevicesWithErrors + "</ul>"
                                    : new TwemojiImage("CheckMarkButton", qaHelperWindow).toImgTag("left") + " <b style='color: " + successColorHTML + "'>All Other Device Drivers Installed with No Errors</b><br/><br/>");
                }

                @Override
                protected void done() {
                    loadingWindow.closeWindow();

                    try {
                        String driverSummaryBodyOutput = get();

                        boolean driverErrors = driverSummaryBodyOutput.contains("NOT DETECTED") || driverSummaryBodyOutput.contains("NOT INSTALLED") || driverSummaryBodyOutput.contains("MAY NOT BE INSTALLED") || driverSummaryBodyOutput.contains("DRIVER ERROR");

                        ArrayList<String> driversDialogButtons = new ArrayList<>();

                        driversDialogButtons.add("OK");

                        driversDialogButtons.add("Open Device Manager");

                        if (driverErrors) {
                            driversDialogButtons.add("Open Windows Update");
                        }

                        boolean isLenovoWithSystemUpdateApp = (computerSpecs.getFullBrand().equals("Lenovo") && new File("\\Program Files (x86)\\Lenovo\\System Update\\tvsu.exe").exists());

                        if (isLenovoWithSystemUpdateApp) {
                            driversDialogButtons.add("Open Lenovo System Update");
                        }

                        if (computerSpecs.getFullBrand().equals("Dell") || computerSpecs.getFullBrand().equals("Lenovo") || computerSpecs.getFullBrand().equals("HP")) {
                            driversDialogButtons.add(computerSpecs.getFullBrand() + " Support Site for Serial");
                        }

                        driversDialogButtons.add("Search Google for Drivers");

                        JButton viewDriverErrorMessagesAndSolutionsButton = null;

                        if (driverSummaryBodyOutput.contains("DRIVER ERROR")) {
                            viewDriverErrorMessagesAndSolutionsButton = new JButton("Open Microsoft Documentation to Read Driver Error Messages & Solutions for Error Codes Listed Above");

                            viewDriverErrorMessagesAndSolutionsButton.addActionListener((java.awt.event.ActionEvent evt1) -> {
                                try {
                                    // This link DOES NOT have the Problem Name strings which are outputted by Get-PnpDevice:
                                    // https://support.microsoft.com/en-us/help/310123/error-codes-in-device-manager-in-windows
                                    // But this one DOES:
                                    Desktop.getDesktop().browse(new URI("https://docs.microsoft.com/en-us/windows-hardware/drivers/install/device-manager-error-messages"));
                                } catch (IOException | URISyntaxException openDriverErrorCodeInfoException) {
                                    if (isTestMode) {
                                        System.out.println("openDriverErrorCodeInfoException: " + openDriverErrorCodeInfoException);
                                    }
                                    playAlertSound("error");
                                }
                            });
                        }

                        playAlertSound(driverErrors ? "error" : "success");

                        JEditorPane driverErrorsEditorPane = new JEditorPane();
                        if (driverSummaryBodyOutput.contains("<ul ")) {
                            driverErrorsEditorPane.setContentType("text/html");
                            driverErrorsEditorPane.setText("<html><br/>" + driverSummaryBodyOutput + "</html>");
                            driverErrorsEditorPane.setCaretPosition(0);
                            driverErrorsEditorPane.setEditable(false);
                            driverErrorsEditorPane.setPreferredSize(new Dimension((int) driverErrorsEditorPane.getPreferredSize().getWidth(), 200));
                        }

                        OUTER:
                        for (;;) {
                            int driversDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, new Object[]{"<html>"
                                + (driverErrors
                                ? new TwemojiImage("Warning", qaHelperWindow).toImgTag("left") + " <b style='color: " + warningColorHTML + "'>Some Drivers Are Not Installed or Have Errors</b>"
                                : new TwemojiImage("CheckMarkButton", qaHelperWindow).toImgTag("left") + " <b style='color: " + successColorHTML + "'>All Drivers Installed with No Errors</b>")
                                + "<br/><br/></html>",
                                (driverSummaryBodyOutput.contains("<ul ") ? new JScrollPane(driverErrorsEditorPane) : "<html><br/>" + driverSummaryBodyOutput + "</html>"),
                                ((viewDriverErrorMessagesAndSolutionsButton != null) ? " " : ""), viewDriverErrorMessagesAndSolutionsButton,
                                "<html><br/>"
                                + (driverErrors
                                ? "<b>You can attempt to install the missing drivers a few different ways:</b>"
                                + "<ul style='margin-left: 20px'>"
                                + "<li>Using the \"Update driver\" action in <b>Device Manager</b> for each device.<br/><i>(Check \"Other devices\", \"Display adapters\", and \"Sound controllers\" sections for devices needing drivers.)</i></li>"
                                + "<li>Running \"Check for updates\" in <b>Windows Update</b>.</li>"
                                + (isLenovoWithSystemUpdateApp ? "<li>Running \"Get new updates\" in <b>Lenovo System Update</b>.</li>" : "")
                                + ((computerSpecs.getFullBrand().equals("Dell") || computerSpecs.getFullBrand().equals("Lenovo") || computerSpecs.getFullBrand().equals("HP")) ? "<li>Opening the <b>" + computerSpecs.getFullBrand() + "</b> support site for this serial number.</li>" : "")
                                + "<li><b>Searching Google for drivers</b> for this computers model or GPU.</li>"
                                + "</ul>"
                                : "<i>Even though all drivers are installed properly</i>, you can "
                                + (isLenovoWithSystemUpdateApp ? "<i>run \"Get new updates\"</i> in <u>Lenovo System Update</u> or " : "")
                                + "<u>search for drivers</u><br/>"
                                + "for this computers model or GPU to get the <u>newest drivers as well as BIOS updates</u>, etc.<br/>"
                                + "<i>" + (isLenovoWithSystemUpdateApp ? "Running Lenovo System Update or s" : "S") + "earching for drivers in not required if you're not having any issues with this computer.</i>") + "</html>"}, "QA Helper  —  Check Drivers", JOptionPane.DEFAULT_OPTION, (driverErrors ? JOptionPane.ERROR_MESSAGE : JOptionPane.INFORMATION_MESSAGE), new TwemojiImage("Toolbox", qaHelperWindow).toImageIcon(), driversDialogButtons.toArray(), driversDialogButtons.get(0));

                            String driversDialogResponseString = "OK";
                            if (driversDialogResponse > -1) {
                                driversDialogResponseString = driversDialogButtons.get(driversDialogResponse);
                            }

                            switch (driversDialogResponseString) {
                                case "Open Device Manager":
                                    try {
                                        Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\control.exe", "/name", "Microsoft.DeviceManager"});
                                    } catch (IOException openDeviceManagerException) {
                                        if (isTestMode) {
                                            System.out.println("openDeviceManagerException: " + openDeviceManagerException);
                                        }
                                        playAlertSound("error");
                                    }

                                    break;
                                case "Open Windows Update":
                                    try {
                                        Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\control.exe", "update"});
                                    } catch (IOException openWindowsUpdateException) {
                                        if (isTestMode) {
                                            System.out.println("openWindowsUpdateException: " + openWindowsUpdateException);
                                        }
                                        playAlertSound("error");
                                    }

                                    break;
                                case "Open Lenovo System Update":
                                    try {
                                        Runtime.getRuntime().exec(new String[]{"\\Program Files (x86)\\Lenovo\\System Update\\tvsu.exe"});
                                    } catch (IOException openLenovoSystemUpdateException) {
                                        if (isTestMode) {
                                            System.out.println("openLenovoSystemUpdateException: " + openLenovoSystemUpdateException);
                                        }
                                        playAlertSound("error");
                                    }

                                    break;
                                case "Dell Support Site for Serial":
                                case "Lenovo Support Site for Serial":
                                    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(computerSpecs.getFullSerial()), null); // Shouldn't need serial in clipboard since it will be search directly, but still set it just in case.

                                    try {
                                        Desktop.getDesktop().browse(new URI(((computerSpecs.getFullBrand().equals("Dell"))
                                                ? "https://www.dell.com/support/product-details/servicetag/"
                                                : "https://pcsupport.lenovo.com/products/")
                                                + URLEncoder.encode(computerSpecs.getFullSerial(), StandardCharsets.UTF_8.toString())));
                                    } catch (IOException | URISyntaxException manufacturerSupportSiteForSerialException) {
                                        if (isTestMode) {
                                            System.out.println("manufacturerSupportSiteForSerialException: " + manufacturerSupportSiteForSerialException);
                                        }
                                        playAlertSound("error");
                                    }

                                    break;
                                case "HP Support Site for Serial":
                                    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(computerSpecs.getFullSerial()), null);

                                    try {
                                        Desktop.getDesktop().browse(new URI("https://support.hp.com/us-en/drivers/" + (deviceTypeIsLaptop ? "laptops" : "desktops")));
                                    } catch (IOException | URISyntaxException hpSupportSiteForSerialException) {
                                        if (isTestMode) {
                                            System.out.println("hpSupportSiteForSerialException: " + hpSupportSiteForSerialException);
                                        }
                                        playAlertSound("error");
                                    }

                                    break;
                                case "Search Google for Drivers":
                                    String[] searchDriversDialogButtons = new String[]{"Search Google for Model Drivers & Copy Serial to Clipboard", "Search Google for GPU Drivers", "Cancel"};

                                    String brandAndModel = (deviceTypeIsMotherboard ? (computerSpecs.getFullMotherboardBrand() + " " + computerSpecs.getFullMotherboardModel()) : (computerSpecs.getFullBrand() + " " + computerSpecs.getFullModel()));
                                    String gpu = computerSpecs.getFullGPU();

                                    int searchDriversDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html><b>Would you like to search Google for model or GPU drivers?</b><br/><br/><b>Model:</b> " + brandAndModel + "<br/><b>Serial to Copy to Clipboard:</b> " + escapeSingleLineSpecStringForHTML((deviceTypeIsMotherboard ? computerSpecs.getFullMotherboardSerial() : computerSpecs.getFullSerial())) + "<br/><br/><b>GPU:</b> " + gpu + "</html>",
                                            "QA Helper  —  Search Google for Drivers", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("MagnifyingGlassTiltedLeft", qaHelperWindow).toImageIcon(32), searchDriversDialogButtons, searchDriversDialogButtons[0]);
                                    String searchDriversDialogResponseString = "Cancel";
                                    if (searchDriversDialogResponse > -1) {
                                        searchDriversDialogResponseString = searchDriversDialogButtons[searchDriversDialogResponse];
                                    }

                                    if (!searchDriversDialogResponseString.equals("Cancel")) {
                                        boolean isSearchingGPU = searchDriversDialogResponseString.contains("GPU");

                                        if (!isSearchingGPU) {
                                            Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection((deviceTypeIsMotherboard ? computerSpecs.getFullMotherboardSerial() : computerSpecs.getFullSerial())), null);
                                        }

                                        try {
                                            Desktop.getDesktop().browse(new URI("https://google.com/search?q=" + URLEncoder.encode("Drivers for " + (isSearchingGPU ? gpu : brandAndModel), StandardCharsets.UTF_8.toString())));
                                        } catch (IOException | URISyntaxException searchGoogleForDriversException) {
                                            if (isTestMode) {
                                                System.out.println("searchGoogleForDriversException: " + searchGoogleForDriversException);
                                            }
                                            playAlertSound("error");
                                        }
                                    }

                                    break;
                                default:
                                    break OUTER;
                            }
                        }

                        if (!driverErrors && !isDriversVerified && btnVerifyDrivers.isVisible() && btnVerifyDrivers.isEnabled()) {
                            btnVerifyDriversActionPerformed(null);
                        }
                    } catch (HeadlessException | InterruptedException | ExecutionException checkWindowsDriversException) {
                        if (isTestMode) {
                            System.out.println("checkWindowsDriversException: " + checkWindowsDriversException);
                        }
                        playAlertSound("error");
                        JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>UNKNOWN ERROR CHECKING DRIVERS</b><br/><br/><i>Please Try Again</i></html>", "QA Helper  —  Check Drivers Error", JOptionPane.ERROR_MESSAGE);
                    }

                    setActionsEnabled(true);
                }
            }).execute();
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnCheckDriversActionPerformed

    private void btnVerifyDriversActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifyDriversActionPerformed
        if ((actionsEnabled || (evt == null)) && !isMacOS && !isLinuxLiveBoot && !isWindowsPE) {
            setActionsEnabled(false);

            if (JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>" + ((evt == null) ? "Would you like " : "Are you sure you want ") + "to <i>" + (isDriversVerified ? "UNVERIFY" : "verify") + "</i> the drivers?</b></html>", "QA Helper  —  Confirm " + (isDriversVerified ? "Unverify" : "Verify") + " Drivers", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage((isDriversVerified ? "CrossMark" : "CheckBoxWithCheck"), qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                isDriversVerified = !isDriversVerified;

                writeToHelperLogFile("Task: Drivers " + (isDriversVerified ? "Verified" : "UNVERIFIED"));

                btnVerifyDrivers.setText((isDriversVerified ? "Verified" : "Verify"));
                btnVerifyDrivers.setFont(btnVerifyDrivers.getFont().deriveFont((isDriversVerified ? Font.BOLD : lblVersion.getFont().getStyle())));
                btnVerifyDrivers.setForeground(isDriversVerified ? verifiedColor : defaultColor);
                btnVerifyDrivers.setBorderPainted(!isDriversVerified);

                new LinuxAutoScripts("Drivers " + (isDriversVerified ? "Verified" : "Unverified"), adminPassword);

                focusNextTestTaskVerifyButton(btnVerifyDrivers);
            } else {
                focusNextTestTaskVerifyButton(btnCheckDrivers);
            }

            setActionsEnabled(true);
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnVerifyDriversActionPerformed

    private void btnSystemUpdatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSystemUpdatesActionPerformed
        if (actionsEnabled) {
            setActionsEnabled(false);

            boolean didLaunchSystemUpdates = false;

            if (isLinux) {
                if (!isLinuxLiveBoot) {
                    // NO LONGER INSTALLING SYSTEM UPDATED DURING REFURB TO SAVE TIME (IT'S FINE TO BE AS UP-TO-DATE AS THE LAST INSTALLER UPDATE),
                    // NOW THIS BUTTON IS PRIMARILY FOR FIRMWARE UPDATES IN LINUX.

                    try {
                        String possibleSudo = (!adminPassword.equals("*UNKNOWN*") ? "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk " : "");

                        Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", possibleSudo + "/usr/bin/" + (isLinuxMATE ? "mate" : "gnome") + "-terminal --window" + (isLinuxMATE ? "" : "-with-profile-internal-id '0'") + " --title 'QA Helper  —  Checking Firmware Updates' --hide-menubar --geometry '80x25+0+0' -x /bin/sh -c 'echo \"\nCHECKING FOR FIRMWARE UPDATES:\"; /usr/bin/fwupdmgr refresh --force; /usr/bin/fwupdmgr update; echo \"\n\nFINISHED CHECKING FOR FIRMWARE UPDATES\n\nPRESS ENTER TO CLOSE THIS WINDOW\"; read line; /usr/bin/wmctrl -a \"QA Helper\"'"});
                        didLaunchSystemUpdates = true;

                        TimeUnit.SECONDS.sleep(1);

                        focusWindow();

                        String[] softwareUpdateButtons = new String[]{"OK", "Also Install System Updates"};
                        int softwareUpdateDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html><b>Checking for <i>Firmware Updates</i> in <i>Terminal</i></b><br/><br/><i>You can continue using QA Helper while Firmware Updates are checked and prepared in the Terminal.</i><br/><br/>When Firmware Updates are done checking and preparing, you may need to reboot to install them.<br/><br/><br/><b>To save time during refurbishment, <u>installing <i>system updates</i> IS NOT REQUIRED</u>.</b><br/><br/><i>If you would like to also check for and install system updates anyway, click the \"Also Install System Updates\" button below.</i></html>", "QA Helper  —  Firmware Updates", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("CounterclockwiseArrowsButton", qaHelperWindow).toImageIcon(32), softwareUpdateButtons, softwareUpdateButtons[0]);

                        String softwareUpdateDialogResponseString = "OK";
                        if (softwareUpdateDialogResponse > -1) {
                            softwareUpdateDialogResponseString = softwareUpdateButtons[softwareUpdateDialogResponse];
                        }

                        if (!softwareUpdateDialogResponseString.equals("OK")) {
                            String[] aptProcesses = new CommandReader(new String[]{"/usr/bin/pgrep", "-fa", "(apt|mintUpdate)"}).getOutputLines();
                            boolean aptIsRunning = false;
                            for (String thisAptProcess : aptProcesses) {
                                if (thisAptProcess.contains("apt-get") || thisAptProcess.contains("/bin/apt") || thisAptProcess.contains("/apt/methods/") || (thisAptProcess.contains("/mintUpdate/") && !thisAptProcess.endsWith("/mintUpdate/mintUpdate.py"))) {
                                    aptIsRunning = true;
                                    break;
                                }
                            }

                            if (aptIsRunning) {
                                playAlertSound("beep");

                                JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Another installation process (such as \"apt\" or \"mintUpdate\") is currently running. <i>This process may be running in the background.</i></b><br/><br/><i>This other installation process could interrupt <i>System Updates</i> or <i>System Updates</i> may interrupt the other installation process.</i><br/><br/>Try again after the other installation process has finished.</html>", "QA Helper  —  System Updates Warning", JOptionPane.WARNING_MESSAGE);
                            } else {
                                String systemUpdateCommand = "/usr/bin/sudo /usr/local/bin/apt update && /usr/bin/sudo /usr/local/bin/apt upgrade -y";

                                if (new File("/usr/bin/mintupdate-cli").exists()) {
                                    // Will exist on Mint 19 and newer
                                    systemUpdateCommand = "/usr/bin/sudo /usr/bin/mintupdate-cli upgrade -ry";
                                } else if (new File("/usr/bin/mintupdate-tool").exists()) {
                                    // Will exist on Mint 18.3 and older
                                    systemUpdateCommand = "/usr/bin/sudo /usr/bin/mintupdate-tool upgrade -l12345 -ry";
                                }

                                // Run update commands 3 times to make sure that all possible updates are installed since some updates require others to be installed first.
                                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", possibleSudo + "/usr/bin/" + (isLinuxMATE ? "mate" : "gnome") + "-terminal --window" + (isLinuxMATE ? "" : "-with-profile-internal-id '0'") + " --title 'QA Helper  —  Installing System Updates' --hide-menubar --geometry '80x25+0+0' -x /bin/sh -c 'echo \"\nINSTALLING SYSTEM UPDATES\n\nSYSTEM UPDATE 1 OF 3:\"; " + systemUpdateCommand + "; echo \"\nSYSTEM UPDATE 2 OF 3:\"; " + systemUpdateCommand + "; echo \"\nAUTOREMOVE ONCE BEFORE LAST UPDATE CYCLE:\"; /usr/bin/sudo /usr/local/bin/apt autoremove -y; echo \"\nSYSTEM UPDATE 3 OF 3:\"; " + systemUpdateCommand + "; echo \"\n\nFINISHED INSTALLING SYSTEM UPDATES\n\nPRESS ENTER TO CLOSE THIS WINDOW\"; read line; /usr/bin/wmctrl -a \"QA Helper\"'"});

                                TimeUnit.SECONDS.sleep(1);

                                focusWindow();
                                JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Started <i>System Updates</i> in <i>Terminal</i></b><br/><br/><i>You can continue using QA Helper while System Updates install in the Terminal.</i><br/><br/>When System Updates are done, the Terminal will stay open and you can press enter in the Terminal window to close it.</html>", "QA Helper  —  System Updates", JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("CounterclockwiseArrowsButton", qaHelperWindow).toImageIcon(32));
                            }
                        }
                    } catch (HeadlessException | IOException | InterruptedException | NumberFormatException installUpdatesViaTerminalException) {
                        if (isTestMode) {
                            System.out.println("installUpdatesViaTerminalException: " + installUpdatesViaTerminalException);
                        }
                    }
                } else {
                    playAlertSound("beep");
                }
            } else if (isMacOS) {
                if (new File("/Users/Shared/.fgResetSnapshotCreated").exists()) {
                    JOptionPane.showMessageDialog(qaHelperWindow, "<html><b style='color: " + warningColorHTML + "'>System Updates <i style='color: " + errorColorHTML + "'>MUST NOT</i> Be Installed on This Mac!</b><br/><br/><b>This Mac will be reset using a specially made reset Snapshot.</b><br/><br/><i>If any System Updates are installed, that reset Snapshot will be automatically deleted by macOS which would prevent resetting this Mac.</i></html>", "QA Helper  —  System Updates", JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("CounterclockwiseArrowsButton", qaHelperWindow).toImageIcon(32));
                    focusNextTestTaskVerifyButton(btnSystemUpdates);
                } else {
                    String[] macOSversionParts = System.getProperty("os.version").replaceAll("[^0-9.]", "").split("\\.");
                    if ((Integer.parseInt(macOSversionParts[0]) >= 11) || (Integer.parseInt(macOSversionParts[1]) >= 14)) {
                        try {
                            String systemPreferencesOrSettingsAppName = new CommandReader(new String[]{"/usr/bin/osascript", "-e", "name of application id \"com.apple.systempreferences\""}).getFirstOutputLine(); // Use "name of application id" to correctly display "System Preferences" or "System Settings" depending on macOS version.

                            if (systemPreferencesOrSettingsAppName.isEmpty()) {
                                systemPreferencesOrSettingsAppName = "System Preferences/Settings";
                            }

                            String[] softwareUpdateButtons = new String[]{"OK", "Open Software Update in " + systemPreferencesOrSettingsAppName};
                            int softwareUpdateDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html><b>To save time during refurbishment, <u>installing system updates IS NOT REQUIRED</u>.</b><br/><br/><i>If you would like to check for or install system updates anyway, click the \"Open Software Update in " + systemPreferencesOrSettingsAppName + "\" button below.</i><br/><br/>When Software Update in " + systemPreferencesOrSettingsAppName + " is opened, updates will be checked automatically.<br/>To install any available updates, click the \"Update Now\" button in " + systemPreferencesOrSettingsAppName + ".</html>", "QA Helper  —  System Updates", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("CounterclockwiseArrowsButton", qaHelperWindow).toImageIcon(32), softwareUpdateButtons, softwareUpdateButtons[0]);

                            String softwareUpdateDialogResponseString = "OK";
                            if (softwareUpdateDialogResponse > -1) {
                                softwareUpdateDialogResponseString = softwareUpdateButtons[softwareUpdateDialogResponse];
                            }

                            if (!softwareUpdateDialogResponseString.equals("OK")) {
                                Desktop.getDesktop().browse(new URI(systemPreferencesOrSettingsAppName.equals("System Settings") ? "x-apple.systempreferences:com.apple.Software-Update-Settings.extension" : "x-apple.systempreferences:com.apple.preferences.softwareupdate"));
                                // https://github.com/bvanpeski/SystemPreferences/blob/main/macos_preferencepanes-Monterey.md#software-update-comapplepreferencessoftwareupdate
                                // https://github.com/bvanpeski/SystemPreferences/blob/main/macos_preferencepanes-Ventura.md#general

                                didLaunchSystemUpdates = true;
                            }
                        } catch (HeadlessException | IOException | URISyntaxException openSystemPreferencesUpdatesException) {
                            if (isTestMode) {
                                System.out.println("openSystemPreferencesUpdatesException: " + openSystemPreferencesUpdatesException);
                            }
                            playAlertSound("error");
                        }
                    } else {
                        try {
                            String[] softwareUpdateButtons = new String[]{"OK", "Open Update Section in Mac App Store"};
                            int softwareUpdateDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html><b>To save time during refurbishment, <u>installing system updates IS NOT REQUIRED</u>.</b><br/><br/><i>If you would like to check for or install system updates anyway, click the \"Open Update Section in Mac App Store\" button below.</i><br/><br/>When the Update section in Mac App Store is opened, updates will be checked automatically.<br/>To install any available updates, click the \"Update All\" button in Mac App Store.</html>", "QA Helper  —  System Updates", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("CounterclockwiseArrowsButton", qaHelperWindow).toImageIcon(32), softwareUpdateButtons, softwareUpdateButtons[0]);

                            String softwareUpdateDialogResponseString = "OK";
                            if (softwareUpdateDialogResponse > -1) {
                                softwareUpdateDialogResponseString = softwareUpdateButtons[softwareUpdateDialogResponse];
                            }

                            if (!softwareUpdateDialogResponseString.equals("OK")) {
                                Desktop.getDesktop().browse(new URI("macappstore://showUpdatesPage"));
                                didLaunchSystemUpdates = true;
                            }
                        } catch (HeadlessException | IOException | URISyntaxException openMacAppStoreUpdatesException) {
                            if (isTestMode) {
                                System.out.println("openMacAppStoreUpdatesException: " + openMacAppStoreUpdatesException);
                            }
                            playAlertSound("error");
                        }
                    }
                }
            } else if (isWindows && !isWindowsPE) {
                try {
                    String[] windowsUpdateButtons = new String[]{"OK", "Open Windows Update in Settings"};
                    int windowsUpdateDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html><b>To save time during refurbishment, <u>installing Windows updates IS NOT REQUIRED</u>.</b><br/><br/><i>If you would like to check for and install Windows updates anyway, click the \"Open Windows Update in Settings\" button below.</i><br/><br/>When the Windows Update in Settings is opened, click the \"Check for updates\" button in Settings to install any available updates.</html>", "QA Helper  —  Windows Update", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("CounterclockwiseArrowsButton", qaHelperWindow).toImageIcon(32), windowsUpdateButtons, windowsUpdateButtons[0]);

                    String windowsUpdateDialogResponseString = "OK";
                    if (windowsUpdateDialogResponse > -1) {
                        windowsUpdateDialogResponseString = windowsUpdateButtons[windowsUpdateDialogResponse];
                    }

                    if (!windowsUpdateDialogResponseString.equals("OK")) {
                        Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\control.exe", "update"});
                        didLaunchSystemUpdates = true;
                    }
                } catch (IOException openWindowsUpdateException) {
                    if (isTestMode) {
                        System.out.println("openWindowsUpdateException: " + openWindowsUpdateException);
                    }
                    playAlertSound("error");
                }
            } else {
                playAlertSound("beep");
            }

            if (!didLaunchSystemUpdates) {
                focusNextTestTaskVerifyButton(btnSystemUpdates);
            } else if (didLaunchSystemUpdates && !isUpdatesVerified && btnVerifySystemUpdates.isVisible() && btnVerifySystemUpdates.isEnabled()) {
                btnVerifySystemUpdatesActionPerformed(null);
            }

            setActionsEnabled(true);
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnSystemUpdatesActionPerformed

    private void btnVerifySystemUpdatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifySystemUpdatesActionPerformed
        if ((actionsEnabled || (evt == null)) && !isWindowsPE && (!isMacOS || !new File("/Users/Shared/.fgResetSnapshotCreated").exists())) {
            setActionsEnabled(false);

            if (JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>" + ((evt == null) ? "Would you like " : "Are you sure you want ") + "to <i>" + (isUpdatesVerified ? "UNVERIFY" : "verify") + "</i> that the " + (isLinux ? "firmware" : "system") + " is up-to-date?</b></html>", "QA Helper  —  Confirm " + (isUpdatesVerified ? "Unverify" : "Verify") + " System Updates", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage((isUpdatesVerified ? "CrossMark" : "CheckBoxWithCheck"), qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                isUpdatesVerified = !isUpdatesVerified;

                writeToHelperLogFile("Task: Updates " + (isUpdatesVerified ? "Verified" : "UNVERIFIED"));

                btnVerifySystemUpdates.setText((isUpdatesVerified ? "Verified" : "Verify"));
                btnVerifySystemUpdates.setFont(btnVerifySystemUpdates.getFont().deriveFont((isUpdatesVerified ? Font.BOLD : lblVersion.getFont().getStyle())));
                btnVerifySystemUpdates.setForeground(isUpdatesVerified ? verifiedColor : defaultColor);
                btnVerifySystemUpdates.setBorderPainted(!isUpdatesVerified);

                new LinuxAutoScripts("Updates " + (isUpdatesVerified ? "Verified" : "Unverified"), adminPassword);

                focusNextTestTaskVerifyButton(btnVerifySystemUpdates);
            } else {
                focusNextTestTaskVerifyButton(btnSystemUpdates);
            }

            setActionsEnabled(true);
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnVerifySystemUpdatesActionPerformed

    private void btnCheckWindowsLicenseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckWindowsLicenseActionPerformed
        String[] statusNames = privateStrings.getPCsCRMStatusNames();
        if ((actionsEnabled || (evt == null) || evt.getActionCommand().equals(statusNames[12] + " License Issue")) && isWindows && !isWindowsPE) {
            setActionsEnabled(false);

            loadingWindow.setLoadingTextAndDisplay("QA Helper is Checking Windows License", "Working", "Window");

            (new SwingWorker<String, Void>() {
                @Override
                protected String doInBackground() throws Exception {
                    String windowsLicenseInfo = computerSpecs.getWindowsLicenseInfo(isTestMode, isLoggedIn);
                    // The following code does a lot of not ideal string parsing because getWindowsLicenseInfo was originally used just for a simple
                    // Windows license info output display, but things slowly evolved and a lot more complex stuff if being done and getWindowsLicenseInfo
                    // should really be broken out to its own class with sepearate properties to be able to make the following code much cleaner and simpler.

                    if (windowsLicenseInfo.contains("REPLACE_FOR_SUCESS_TITLE")) {
                        windowsLicenseInfo = windowsLicenseInfo.replace("<b style='color: REPLACE_FOR_SUCESS_TITLE'>", new TwemojiImage("CheckMarkButton", qaHelperWindow).toImgTag("left") + " <b style='color: " + successColorHTML + "'>");
                    } else if (windowsLicenseInfo.contains("REPLACE_FOR_WARNING_TITLE")) {
                        windowsLicenseInfo = windowsLicenseInfo.replace("<b style='color: REPLACE_FOR_WARNING_TITLE'>", new TwemojiImage("Warning", qaHelperWindow).toImgTag("left") + " <b style='color: " + warningColorHTML + "'>");
                    } else if (windowsLicenseInfo.contains("REPLACE_FOR_ERROR_TITLE")) {
                        windowsLicenseInfo = windowsLicenseInfo.replace("<b style='color: REPLACE_FOR_ERROR_TITLE'>", new TwemojiImage("CrossMark", qaHelperWindow).toImgTag("left") + " <b style='color: " + errorColorHTML + "'>");
                    }

                    boolean isLicensed = windowsLicenseInfo.contains("<b>License Status:</b> Licensed");
                    boolean possibleNonRefurbProductKey = windowsLicenseInfo.contains("LICENSED WITH A NON-REFURBISHED PC PRODUCT KEY");

                    if (isLoggedIn) {
                        boolean isRefurbDPK = false;
                        boolean didUploadCBRifDPK = true;

                        if (isLicensed && !possibleNonRefurbProductKey && windowsLicenseInfo.contains("OEM:DM")) {
                            isRefurbDPK = true;
                            didUploadCBRifDPK = false;

                            if (new File(helperLogFilePath).exists()) {
                                try {
                                    String productKeyID = "";

                                    for (String thisWindowsLicenseInfoLine : windowsLicenseInfo.split("<br/>")) {
                                        if (thisWindowsLicenseInfoLine.contains(":</b> ")) {
                                            String thisWindowsLicenseInfoProperty = thisWindowsLicenseInfoLine.substring(thisWindowsLicenseInfoLine.indexOf(":</b> ") + 6).trim();

                                            if (!thisWindowsLicenseInfoProperty.isEmpty()) {
                                                if (thisWindowsLicenseInfoLine.startsWith("<b>Product Key ID:</b>")) {
                                                    productKeyID = thisWindowsLicenseInfoProperty;
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    List<String> allHelperLogLines = Files.readAllLines(Paths.get(helperLogFilePath));
                                    for (String thisHelperLogLine : allHelperLogLines) {
                                        if (thisHelperLogLine.startsWith("Uploaded CBR for DPK: CBR+WIN" + (isWindows11 ? "11" : "10") + "-" + (isWindowsHomeEdition ? "HOM" : "PRO") + "-" + (windowsLicenseInfo.contains("<i>Citizenship</i>") ? "CIT" : "COM") + "-DPK+" + productKeyID + "+" + computerSpecs.getFullSerial().replaceAll("[^A-Za-z0-9]", "") + "+" + pid + ".xml")) {
                                            didUploadCBRifDPK = true;
                                        } else if (thisHelperLogLine.startsWith("Reverted DPK")) {
                                            didUploadCBRifDPK = false;
                                        }
                                    }
                                } catch (IOException readLogForCBRexception) {
                                    if (isTestMode) {
                                        System.out.println("readLogForCBRexception: " + readLogForCBRexception);
                                    }
                                }
                            }
                        }

                        try {
                            HashMap<String, String> windowsProductKeyInfoSavedInPCsCRM = PCsCRMManager.getSpecsForPID(pid, isTestMode, true);

                            String productKeySavedInPCsCRM = windowsProductKeyInfoSavedInPCsCRM.get("Windows Product Key");
                            if (productKeySavedInPCsCRM.equals("NOT LOGGED")) {
                                productKeySavedInPCsCRM = "";
                            }

                            String newCoaIdSavedInPCsCRM = windowsProductKeyInfoSavedInPCsCRM.get("Windows New COA ID");
                            if (newCoaIdSavedInPCsCRM.equals("NOT LOGGED")) {
                                newCoaIdSavedInPCsCRM = "";
                            }

                            if (!productKeySavedInPCsCRM.isEmpty() && !newCoaIdSavedInPCsCRM.isEmpty()) {
                                String dpkTypeCodeOrPreExistingCoaIdSavedInPCsCRM = windowsProductKeyInfoSavedInPCsCRM.get("Windows DPK Type Code or Old COA ID");
                                if (dpkTypeCodeOrPreExistingCoaIdSavedInPCsCRM.equals("NOT LOGGED")) {
                                    dpkTypeCodeOrPreExistingCoaIdSavedInPCsCRM = "";
                                }

                                String savedPreExistingCoaIdLines = "";
                                String savedProductKeyWasDPKnote = "";
                                if (!dpkTypeCodeOrPreExistingCoaIdSavedInPCsCRM.isEmpty() && !dpkTypeCodeOrPreExistingCoaIdSavedInPCsCRM.replaceAll("[^0-9]", "").equals("00999999000777")) { // "00999-999-000-777" is Microsofts specified placeholder if the PC does not have a pre-existing COA: https://www.msregrefurb.com/RRPSite/Information/ProgramGuide/ProgramGuide_en.pdf
                                    if (dpkTypeCodeOrPreExistingCoaIdSavedInPCsCRM.endsWith("-DPK") || dpkTypeCodeOrPreExistingCoaIdSavedInPCsCRM.equals("DIGITALPRODUCTKEY")) { // Versions older than 2025.1.22 only supported Commercial DPKs and NOT Citizenship DPKs and would always save "DIGITALPRODUCTKEY" instead of value ending in "-DPK" and starting with specific Windows version and DPK type.
                                        if (!isRefurbDPK) {
                                            isRefurbDPK = true;
                                            didUploadCBRifDPK = false;
                                        }

                                        savedProductKeyWasDPKnote = "<br/><br/>"
                                                + "<b><i>Previously Used Product Key Was a <u>Windows " + ((dpkTypeCodeOrPreExistingCoaIdSavedInPCsCRM.startsWith("WIN10-")) ? "10" : ((dpkTypeCodeOrPreExistingCoaIdSavedInPCsCRM.startsWith("WIN11-")) ? "11" : "")) + " " + ((dpkTypeCodeOrPreExistingCoaIdSavedInPCsCRM.contains("-HOM-")) ? "Home" : "Pro") + " " + (dpkTypeCodeOrPreExistingCoaIdSavedInPCsCRM.endsWith("-CIT-DPK") ? "Citizenship" : "Commercial") + " Digital Product Key for Refurbished PC</u></i></b>";
                                    } else {
                                        savedPreExistingCoaIdLines = "<br/><br/>"
                                                + "<b>Pre-Existing COA ID / COA Serial Number for ID \"" + pid + "\" (from PCsCRM):</b> " + dpkTypeCodeOrPreExistingCoaIdSavedInPCsCRM;
                                    }
                                }

                                if (windowsLicenseInfo.contains("<b>COA ID / COA Serial Number:</b> " + newCoaIdSavedInPCsCRM) && windowsLicenseInfo.contains("<b>Product Key in Registry:</b> " + productKeySavedInPCsCRM)) {
                                    boolean justSetProductKey = (evt == null);
                                    windowsLicenseInfo += savedPreExistingCoaIdLines + "<br/><br/><br/>"
                                            + new TwemojiImage((justSetProductKey ? "CheckMarkButton" : "ThumbsUp"), qaHelperWindow).toImgTag("left") + " <i " + (justSetProductKey ? "style='color: " + successColorHTML + "'" : "") + ">" + ((isRefurbDPK && didUploadCBRifDPK) ? "UPLOADED CBR FOR THIS DPK & THE" : ((justSetProductKey || isRefurbDPK) ? "THE" : "THIS")) + " PRODUCT KEY " + (isRefurbDPK ? "ID FOR THIS DPK " : "") + (justSetProductKey ? "WAS SUCCESSFULLY" : "IS") + " SAVED TO PCsCRM FOR ID \"" + pid + "\"</i> " + new TwemojiImage("Memo", qaHelperWindow).toImgTag("right")
                                            + (isRefurbDPK
                                                    ? "<br/><br/>"
                                                    + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <b style='color: " + attentionColorHTML + "'>SINCE A DPK HAS BEEN APPLIED, REMEMBER TO AFFIX A \"Genuine Microsoft Refurbisher Label\" (GMRL) STICKER TO THIS COMPUTER <u>AND REMOVE ANY EXISTING COA OR GML STICKERS</u></b> " + new TwemojiImage("BackhandIndexPointingLeft", qaHelperWindow).toImgTag("right")
                                                    : "");
                                } else {
                                    windowsLicenseInfo += "<br/><br/>"
                                            + "<b>Previously Used Product Key for ID \"" + pid + "\" (from PCsCRM):</b> " + productKeySavedInPCsCRM
                                            + savedProductKeyWasDPKnote
                                            + "<br/><br/>"
                                            + "<b>Previously Used COA ID / COA Serial Number for ID \"" + pid + "\" (from PCsCRM):</b> " + newCoaIdSavedInPCsCRM
                                            + savedPreExistingCoaIdLines
                                            + "<br/><br/><br/>"
                                            + ((isLicensed && !possibleNonRefurbProductKey)
                                                    ? new TwemojiImage("Warning", qaHelperWindow).toImgTag("left") + " <u>THE CURRENT REFURBISHED PC PRODUCT KEY IS NOT SAVED TO PCsCRM FOR ID \"" + pid + "\"</u>"
                                                    + "<br/>"
                                                    + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <b>THE CURRENT PRODUCT KEY MUST BE SAVED TO PCsCRM TO CONTINUE</b>"
                                                    + "<br/>"
                                                    + new TwemojiImage("BackhandIndexPointingDown", qaHelperWindow).toImgTag("left") + " <i>USE THE \"Re-License Windows\" BUTTON BELOW TO SAVE THE CURRENT PRODUCT KEY TO PCsCRM</i>"
                                                    : new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <b style='color: " + warningColorHTML + "'>IF THE PREVIOUSLY USED PRODUCT KEY IS NOT CORRECT, YOU MAY HAVE LOGGED IN WITH THE WRONG ID</b> " + new TwemojiImage("BackhandIndexPointingLeft", qaHelperWindow).toImgTag("right")
                                                    + "<br/>"
                                                    + new TwemojiImage("BackhandIndexPointingDown", qaHelperWindow).toImgTag("left") + " <i>USE THE \"" + (isLicensed ? "Change" : "Set") + " Product Key\" BUTTON BELOW TO LICENSE WINDOWS WITH THE PREVIOUSLY USED PRODUCT KEY</i> " + new TwemojiImage("BackhandIndexPointingDown", qaHelperWindow).toImgTag("right"));
                                }
                            } else if (isLicensed && !possibleNonRefurbProductKey) {
                                windowsLicenseInfo += "<br/><br/><br/>"
                                        + new TwemojiImage("Warning", qaHelperWindow).toImgTag("left") + " <u>THIS REFURBISHED PC PRODUCT KEY IS NOT SAVED TO PCsCRM FOR ID \"" + pid + "\"</u>"
                                        + "<br/>"
                                        + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <b>THE PRODUCT KEY MUST BE SAVED TO PCsCRM TO CONTINUE</b>"
                                        + "<br/>"
                                        + new TwemojiImage("BackhandIndexPointingDown", qaHelperWindow).toImgTag("left") + " <i>USE THE \"Re-License Windows\" BUTTON BELOW TO SAVE THE PRODUCT KEY TO PCsCRM</i>";
                            }
                        } catch (Exception checkSavedProductKeyException) {
                            if (isTestMode) {
                                System.out.println("checkSavedProductKeyException: " + checkSavedProductKeyException);
                            }

                            sendErrorEmail("checkSavedProductKeyException: " + checkSavedProductKeyException);

                            windowsLicenseInfo += "<br/><br/><br/>"
                                    + new TwemojiImage("CrossMark", qaHelperWindow).toImgTag("left") + " <b>FAILED TO CONNECT TO PCsCRM TO CHECK FOR SAVED PRODUCT KEY FOR ID \"" + pid + "\"</b> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right");
                        }

                        if (isLicensed && !possibleNonRefurbProductKey && !didUploadCBRifDPK && !windowsLicenseInfo.contains("PRODUCT KEY IS NOT CORRECT")) {
                            windowsLicenseInfo += "<br/><br/><br/>"
                                    + new TwemojiImage("Warning", qaHelperWindow).toImgTag("left") + " <u>THE CBR FOR THIS DIGITAL PRODUCT KEY HAS NOT BEEN UPLOADED YET</u>"
                                    + "<br/>"
                                    + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <b>THE CBR MUST BE UPLOADED FOR THIS DPK TO CONTINUE</b>"
                                    + "<br/>"
                                    + new TwemojiImage("BackhandIndexPointingDown", qaHelperWindow).toImgTag("left") + " <i>USE THE \"Re-License Windows\" BUTTON BELOW TO UPLOAD THE CBR FOR THIS DPK</i>";
                        }

                        return windowsLicenseInfo;
                    }

                    return windowsLicenseInfo
                            + (!isLicensed
                                    ? "<br/><br/><br/><center>" + new TwemojiImage("OldKey", qaHelperWindow).toImgTag("left") + " <b style='color: " + attentionColorHTML + "'>LOG IN TO SET PRODUCT KEY TO LICENSE WINDOWS</b> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right") + "</center>"
                                    : (possibleNonRefurbProductKey
                                            ? "<br/><br/><br/><center>" + new TwemojiImage("OldKey", qaHelperWindow).toImgTag("left") + " <b style='color: " + attentionColorHTML + "'>LOG IN TO CHANGE PRODUCT KEY TO PROPERLY LICENSE WINDOWS</b> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right") + "</center>"
                                            : ""));
                }

                @Override
                protected void done() {
                    loadingWindow.closeWindow();

                    boolean didContinueLicenseWindows = false;

                    try {
                        String windowsLicenseOutput = get();

                        boolean isLicensed = windowsLicenseOutput.contains("<b>License Status:</b> Licensed");
                        boolean possibleNonRefurbProductKey = windowsLicenseOutput.contains("LICENSED WITH A NON-REFURBISHED PC PRODUCT KEY");

                        playAlertSound((isLicensed && !possibleNonRefurbProductKey) ? "success" : "error");

                        String[] windowsLicenseButtons = new String[]{"OK"};

                        if (isLoggedIn) {
                            if (isLicensed) {
                                if (possibleNonRefurbProductKey) {
                                    windowsLicenseButtons = new String[]{"Change Product Key", "OK"};
                                } else if (windowsLicenseOutput.contains("\"Re-License Windows\" BUTTON")) {
                                    windowsLicenseButtons = new String[]{"OK", "Re-License Windows", "Change Product Key"};
                                } else {
                                    windowsLicenseButtons = new String[]{"OK", "Change Product Key"};
                                }
                            } else {
                                windowsLicenseButtons = new String[]{"Set Product Key", "OK"};
                            }
                        }

                        int windowsLicenseResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html>" + windowsLicenseOutput + "</html>", "QA Helper  —  Windows License", JOptionPane.DEFAULT_OPTION, (isLicensed ? (possibleNonRefurbProductKey ? JOptionPane.ERROR_MESSAGE : JOptionPane.INFORMATION_MESSAGE) : JOptionPane.WARNING_MESSAGE), new TwemojiImage("Window", qaHelperWindow).toImageIcon(), windowsLicenseButtons, windowsLicenseButtons[0]);

                        String windowsLicenseResponseString = "OK";
                        if (windowsLicenseResponse > -1) {
                            windowsLicenseResponseString = windowsLicenseButtons[windowsLicenseResponse];
                        }

                        if (windowsLicenseResponseString.contains("Product Key") || windowsLicenseResponseString.contains("License Windows")) {
                            String savedProductKey = "";

                            boolean previousProductKeyIsSaved = windowsLicenseOutput.contains("Previously Used Product Key for ID \"" + pid + "\"");
                            boolean currentProductKeyIsSaved = ((windowsLicenseOutput.contains("SAVED TO PCsCRM FOR ID \"" + pid + "\"</i>") && !windowsLicenseOutput.contains("NOT SAVED")));

                            boolean isRefurbDPK = ((currentProductKeyIsSaved && windowsLicenseOutput.contains("ID FOR THIS DPK"))
                                    || (previousProductKeyIsSaved && windowsLicenseOutput.contains(" Digital Product Key for Refurbished PC</u>"))
                                    || (isLicensed && !possibleNonRefurbProductKey && windowsLicenseOutput.contains("OEM:DM")));

                            if (previousProductKeyIsSaved || currentProductKeyIsSaved || (isLicensed && !possibleNonRefurbProductKey)) {
                                for (String thisWindowsLicenseOutputLine : windowsLicenseOutput.split("<br/>")) {
                                    if (thisWindowsLicenseOutputLine.contains(":</b> ")) {
                                        String thisWindowsLicenseOutputProperty = thisWindowsLicenseOutputLine.substring(thisWindowsLicenseOutputLine.indexOf(":</b> ") + 6).trim();

                                        if (!thisWindowsLicenseOutputProperty.isEmpty()) {
                                            if (currentProductKeyIsSaved && thisWindowsLicenseOutputLine.startsWith("<b>Product Key in Registry:</b>")) {
                                                savedProductKey = thisWindowsLicenseOutputProperty;
                                                break;
                                            } else if (thisWindowsLicenseOutputLine.startsWith("<b>Previously Used Product Key")) {
                                                savedProductKey = thisWindowsLicenseOutputProperty;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }

                            didContinueLicenseWindows = true;

                            if (windowsLicenseResponseString.equals("Re-License Windows")) {
                                if (isRefurbDPK) {
                                    if (new File("\\Install\\DPK\\Logs\\oa3tool-assemble.xml").exists()) {
                                        retrieveAndApplyDigitalProductKey(); // Previous DPK type (Commercial or Citizenship) will be extracted from "oa3tool-assemble.xml"
                                    } else {
                                        playAlertSound("error");
                                        sendErrorEmail("Cannot Re-License Digital Product Key Since DPK Logs Not Found");
                                        JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Cannot Re-License Digital Product Key Since DPK Logs Not Found</b><br/><br/>THIS SHOULD NOT HAVE HAPPENED<br/><br/><i>Please Inform Free Geek I.T.</i></html>", "QA Helper  —  Cannot Re-License DPK", JOptionPane.ERROR_MESSAGE);
                                        setActionsEnabled(true);
                                    }
                                } else { // TODO: Is this condition still possible?
                                    try {
                                        Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\slui.exe", "3"});
                                    } catch (IOException sluiException) {
                                        if (isTestMode) {
                                            System.out.println("sluiException: " + sluiException);
                                        }
                                    }
                                }
                            } else {
                                boolean computerCameWithWindowsInstalled = isLicensed;

                                if (!computerCameWithWindowsInstalled) {
                                    playAlertSound("beep");

                                    String[] confirmGMLorCOAbuttons = new String[]{"Cancel", "Confirm GML", "Confirm COA"};
                                    int confirmGMLorCOAresponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html><b style='color: " + attentionColorHTML + "'>Windows can only be installed and licensed with a Refurbished DPK on computers that originally shipped with Windows.</b><br/><br/><b>You must manually verify that a GML or COA sticker is on this computer since an existing original DPK was NOT detected in the Registry or SMBIOS.</b><br/><br/>Does this computer have a Genuine Microsoft Label (GML) or Certificate of Authenticity (COA) sticker for any of the following Windows versions anywhere on its case?<br/><br/><b style='color: " + verifiedColorHTML + "'>Windows XP, Windows Vista, Windows 7 (Starter, Home Basic, Home Premium, Pro, or Ultimate),<br/>Windows 8 or 8.1 (Home or Pro), Windows 10 (Home or Pro), or Windows 11 (Home or Pro)</b><br/><br/><i>If this computer DOES NOT have a GML or COA sticker on it, Windows CANNOT be licensed with a Refurbished DPK.</i></html>", "QA Helper  —  Confirm Windows GML or COA", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("Window", qaHelperWindow).toImageIcon(), confirmGMLorCOAbuttons, confirmGMLorCOAbuttons[0]);

                                    String confirmGMLorCOAresponseString = "Cancel";
                                    if (confirmGMLorCOAresponse > -1) {
                                        confirmGMLorCOAresponseString = confirmGMLorCOAbuttons[confirmGMLorCOAresponse];
                                    }

                                    if (confirmGMLorCOAresponseString.contains("COA")) {
                                        logSpecsAction("Manually Confirmed Existing COA");
                                        sendNoticeEmail("Manually Confirmed Existing COA");

                                        boolean openManualWindowsLicense = (JOptionPane.showOptionDialog(qaHelperWindow, "<html><b>Since this computer has a Physical COA on it, manually license Windows with<br/>the Product Key on the Physical COA before applying a Refurbished DPK.</b><br/><br/>After you have manually licensed Windows, come back to QA Helper and<br/>click the \"Check Windows License / License Windows\" button again.<br/><br/><i>If this computer DOES NOT have a GML or COA sticker on it,<br/>Windows CANNOT be licensed with a Refurbished DPK.</i></html>", "QA Helper  —  Manually License Windows", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, new TwemojiImage("Window", qaHelperWindow).toImageIcon(), new String[]{"Open Windows Manual License Prompt", "Cancel"}, "Open Windows Manual License Prompt") == JOptionPane.YES_OPTION);

                                        if (openManualWindowsLicense) {
                                            try {
                                                Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\slui.exe", "3"});
                                            } catch (IOException sluiException) {
                                                if (isTestMode) {
                                                    System.out.println("sluiException: " + sluiException);
                                                }
                                            }
                                        }
                                    } else if (confirmGMLorCOAresponseString.contains("GML")) {
                                        computerCameWithWindowsInstalled = true;

                                        logSpecsAction("Manually Confirmed Existing GML");
                                        sendNoticeEmail("Manually Confirmed Existing GML");
                                    }
                                } else {
                                    logSpecsAction("Confirmed Existing Windows License");
                                }

                                if (computerCameWithWindowsInstalled) {
                                    // Refurbished DPKs can only be used on computer that originally shipped with some version of Windows.
                                    // So, if Windows is already licensed, it means it has a non-refurb (such as retail or upgrade) DPK (from the SMBIOS or Registry) which would only happen if it originally shipped with Windows.
                                    // Or, it means a Refurbished Product Key has already been applied by us, which should be allowed to continue since that means this check passed the first time around.
                                    // Also, allow the technician to bypass this check by confirming the computer has a physical GML or COA sticker which would also mean that it originally shipped with an OLDER Windows (https://devicepartner.microsoft.com/en-us/communications/comm-windows-ends-installation-path-for-free-windows-7-8-upgrade).
                                    // NOTICE: This new check to only allow Windows to licensed if a non-refurb DPK already exists makes some old code paths from when physical COA were used never be possible to get hit. But leaving that old code in place for now until we are sure we don't want to allow other scenarios.

                                    if (!isRefurbDPK || new File("\\Install\\DPK\\REVERTED").exists()) { // Creating "\Install\DPK\REVERTED" allows a new DPK to be applied after confirming a previous DPK has been reverted in MSC.
                                        if (new File("\\Install\\DPK\\REVERTED").exists()) {
                                            writeToHelperLogFile("Reverted DPK");
                                            logSpecsAction("Reverted DPK");
                                            sendNoticeEmail("Retrieving New DPK After Confirmed Reverted DPK");

                                            new File("\\Install\\DPK\\REVERTED").delete(); // If reverted override is set, make sure it only applies to setting a single product key.

                                            try {
                                                // If "\Install\DPK\REVERTED" was not an empty folder (if the "Logs" folder was renamed), need to make sure that gets delete since delete() doesn't handle that.
                                                Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\cmd.exe", "/c", "RMDIR /S /Q \"\\Install\\DPK\\REVERTED\\\""}).waitFor(); // Easier to just use batch to delete a folder and contents than using Java.
                                            } catch (IOException rmdirDPKrevertedException) {
                                                if (isTestMode) {
                                                    System.out.println("rmdirDPKrevertedException: " + rmdirDPKrevertedException);
                                                }
                                            }

                                            if (new File("\\Install\\DPK\\Logs\\").exists()) {
                                                // If reverted, delete logs so that a previous DPK in an oa3tool-assemble.xml is no re-used.
                                                try {
                                                    Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\cmd.exe", "/c", "RMDIR /S /Q \"\\Install\\DPK\\Logs\\\""}).waitFor(); // Easier to just use batch to delete a folder and contents than using Java.
                                                } catch (IOException rmdirDPKlogsException) {
                                                    if (isTestMode) {
                                                        System.out.println("rmdirDPKlogsException: " + rmdirDPKlogsException);
                                                    }
                                                }
                                            }
                                        }

                                        if (new File("\\Install\\DPK\\oa3tool.exe").exists()) {
                                            ArrayList<String> productKeyTypeDialogButtons = new ArrayList<>();
                                            productKeyTypeDialogButtons.add("Retrieve and Apply Commercial Refurbished DPK");
                                            if (!isWindowsHomeEdition) {
                                                productKeyTypeDialogButtons.add("Retrieve and Apply Citizenship Refurbished DPK");
                                            }
                                            productKeyTypeDialogButtons.add("Cancel");

                                            int productKeyTypeResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html><b>Would you like to retrieve and apply a <u>Commercial</u>" + (!isWindowsHomeEdition ? " or <i>Citizenship</i>" : "") + " Refurbished Digital Product Key to license Windows?</b>" + (!isWindowsHomeEdition ? "<br/><br/>If you choose a <i>Citizenship</i> Refurbished DPK, this computer will ONLY be able to be distributed to ELIGIBLE organizations or individuals, and will NOT be able to be sold online.<br/><br/><u>Be sure to ONLY choose a <i>Citizenship</i> Refurbished DPK if specifically instructed to do so for this computer.</u>" : "") + "</html>", "QA Helper  —  " + (isWindowsHomeEdition ? "Confirm Refurbished DPK" : "Choose Refurbished DPK Type"), JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("OldKey", qaHelperWindow).toImageIcon(32), productKeyTypeDialogButtons.toArray(), productKeyTypeDialogButtons.get(0));

                                            String productKeyTypeResponseString = "Cancel";
                                            if (productKeyTypeResponse > -1) {
                                                productKeyTypeResponseString = productKeyTypeDialogButtons.get(productKeyTypeResponse);
                                            }

                                            if (productKeyTypeResponseString.equals("Cancel")) {
                                                setActionsEnabled(true);
                                            } else {
                                                boolean retrieveCitizenshipDPK = (productKeyTypeResponseString.contains(" Citizenship "));

                                                if (!savedProductKey.isEmpty()) {
                                                    int confirmChangeProductKeyPromptReturn = JOptionPane.showConfirmDialog(qaHelperWindow,
                                                            "<html><b>Are you sure you want to retrieve and apply a new " + (retrieveCitizenshipDPK ? "<i>Citizenship</i>" : "<u>Commercial</u>") + " Refurbished Digital Product Key?</b>"
                                                            + "<br/><br/><center>"
                                                            + new TwemojiImage("Collision", qaHelperWindow).toImgTag("left") + " <b style='color: " + attentionColorHTML + "'>THIS WILL OVERWRITE THE SAVED PRODUCT KEY IN PCsCRM (<u>" + savedProductKey + "</u>) FOR ID \"" + pid + "\"</b> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")
                                                            + "<br/><br/>"
                                                            + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <b style='color: " + warningColorHTML + "'>IF THE SAVED PRODUCT KEY IS NOT CORRECT, YOU MAY HAVE LOGGED IN WITH THE WRONG ID</b> " + new TwemojiImage("BackhandIndexPointingLeft", qaHelperWindow).toImgTag("right")
                                                            + "</center></html>", "QA Helper  —  Confirm Overwriting Saved Product Key in PCsCRM", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, new TwemojiImage("OldKey", qaHelperWindow).toImageIcon(32));

                                                    if (confirmChangeProductKeyPromptReturn == JOptionPane.OK_OPTION) {
                                                        retrieveAndApplyDigitalProductKey(retrieveCitizenshipDPK);
                                                    } else {
                                                        setActionsEnabled(true);
                                                    }
                                                } else {
                                                    retrieveAndApplyDigitalProductKey(retrieveCitizenshipDPK);
                                                }
                                            }
                                        } else {
                                            playAlertSound("error");

                                            sendErrorEmail("Required OA3Tool Not Found to Retrieve DPK from MSC");
                                            JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Required OA3Tool Not Found to Retrieve Digital Product Key</b><br/><br/>THIS SHOULD NOT HAVE HAPPENED<br/><br/><i>Please Inform Free Geek I.T.</i></html>", "QA Helper  —  OA3Tool Missing", JOptionPane.ERROR_MESSAGE);

                                            setActionsEnabled(true);
                                        }
                                    } else {
                                        playAlertSound("error");

                                        if (!isLicensed || possibleNonRefurbProductKey) {
                                            sendErrorEmail("Cannot Re-Apply Digital Product Key for This ID - MUST REVERT FIRST");
                                            JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Cannot Re-Apply Digital Product Key for This ID</b><br/><br/>The previously applied DPK must be reverted before a new DPK can be applied to this computer.<br/><br/><i>Please contact Free Geek I.T. to be able to apply a new DPK.</i></html>", "QA Helper  —  Cannot Re-Apply DPK", JOptionPane.ERROR_MESSAGE);
                                            // After a DPK has been confirmed to be reverted in MSC, a new DPK can be applied to this computer by creating a "\Install\DPK\REVERTED" file or folder and trying again.
                                        } else {
                                            sendErrorEmail("Cannot Change Product Key After Applying Digital Product Key");
                                            JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Cannot Change Product Key After Applying Digital Product Key</b><br/><br/><i>Please contact Free Geek I.T. if there is an issue with this DPK.</i></html>", "QA Helper  —  Cannot Change DPK", JOptionPane.ERROR_MESSAGE);
                                        }

                                        setActionsEnabled(true);
                                    }
                                } else {
                                    setActionsEnabled(true);
                                }
                            }
                        } else {
                            if (!isWindowsLicenseVerified && btnVerifyWindowsLicense.isVisible() && btnVerifyWindowsLicense.isEnabled()) {
                                if (isLicensed && !possibleNonRefurbProductKey) {
                                    btnVerifyWindowsLicenseActionPerformed(null);
                                } else {
                                    focusNextTestTaskVerifyButton(btnCheckWindowsLicense);
                                }
                            }
                        }
                    } catch (HeadlessException | InterruptedException | ExecutionException checkWindowsLicenseException) {
                        if (isTestMode) {
                            System.out.println("checkWindowsLicenseException: " + checkWindowsLicenseException);
                        }

                        sendErrorEmail("checkWindowsLicenseException: " + checkWindowsLicenseException);

                        playAlertSound("error");
                        JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>UNKNOWN ERROR CHECKING WINDOWS LICENSE</b><br/><br/><i>Please Try Again</i></html>", "QA Helper  —  Check Windows License Error", JOptionPane.ERROR_MESSAGE);
                    }

                    if (!didContinueLicenseWindows) {
                        setActionsEnabled(true);
                    }
                }
            }).execute();
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnCheckWindowsLicenseActionPerformed

    private String getMSCServerAddress() {
        String mscPort = "";
        String sftpPort = "";

        if (new File("\\Install\\DPK\\config.txt").exists()) {
            try {
                List<String> dpkConfigLines = Files.readAllLines(Paths.get("\\Install\\DPK\\config.txt"));
                for (String thisDPKconfigLine : dpkConfigLines) {
                    if (thisDPKconfigLine.startsWith("MSC Port:")) {
                        mscPort = thisDPKconfigLine.substring(thisDPKconfigLine.indexOf(":") + 1).trim();
                    } else if (thisDPKconfigLine.startsWith("SFTP Port:")) {
                        sftpPort = thisDPKconfigLine.substring(thisDPKconfigLine.indexOf(":") + 1).trim();
                    }
                }
            } catch (IOException readDPKconfigException) {
                if (isTestMode) {
                    System.out.println("readDPKconfigException: " + readDPKconfigException);
                }
            }
        }

        if (mscPort.isEmpty() || sftpPort.isEmpty()) {
            return "";
        }

        String mscServerAddress = "";

        if (new File("\\Install\\DPK\\server-address.txt").exists()) {
            try {
                mscServerAddress = Files.readAllLines(Paths.get("\\Install\\DPK\\server-address.txt")).get(0);
            } catch (IOException readMSCserverAddressException) {
                if (isTestMode) {
                    System.out.println("readMSCserverAddressException: " + readMSCserverAddressException);
                }
            }
        }

        // (New-Object System.Net.Sockets.TcpClient).ConnectAsync().Wait() is MUCH faster than Test-NetConnection to check a port: https://copdips.com/2019/09/fast-tcp-port-check-in-powershell.html
        if (mscServerAddress.matches("^[0-9]+[.][0-9]+[.][0-9]+[.][0-9]+$") && new CommandReader(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command",
            "((New-Object System.Net.Sockets.TcpClient).ConnectAsync('" + mscServerAddress + "', '" + mscPort + "').Wait(100) -and (New-Object System.Net.Sockets.TcpClient).ConnectAsync('" + mscServerAddress + "', '" + sftpPort + "').Wait(100))"
        }).getFirstOutputLine().equals("True")) {
            return mscServerAddress;
        }

        String mscServerAddressPrefix = "192.168.2.";
        mscServerAddress = new CommandReader(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command",
            "for ($ipSuffix = 1; $ipSuffix -le 254; $ipSuffix ++) { try { "
            + "if ((New-Object System.Net.Sockets.TcpClient).ConnectAsync(\\\"" + mscServerAddressPrefix + "$ipSuffix\\\", '" + mscPort + "').Wait(20) -and "
            + "(New-Object System.Net.Sockets.TcpClient).ConnectAsync(\\\"" + mscServerAddressPrefix + "$ipSuffix\\\", '" + sftpPort + "').Wait(20)) { "
            + "Write-Output \\\"" + mscServerAddressPrefix + "$ipSuffix\\\"; "
            + "break } } catch {} }"}).getFirstOutputLine();

        if (!mscServerAddress.isEmpty()) {
            try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter("\\Install\\DPK\\server-address.txt"))) {
                bufferedWriter.write(mscServerAddress);
            } catch (IOException saveMSCServerAddressException) {
                if (isTestMode) {
                    System.out.println("saveMSCServerAddressException: " + saveMSCServerAddressException);
                }
            }
        }

        return mscServerAddress;
    }

    private void retrieveAndApplyDigitalProductKey() {
        retrieveAndApplyDigitalProductKey(false); // If "oa3tool-assemble.xml" already exists, the previous DPK type (Commercial or Citizenship) will be extracted from "oa3tool-assemble.xml" instead of this boolean argument being used.
    }

    private void retrieveAndApplyDigitalProductKey(boolean retrieveCitizenshipDPK) {
        if (isLoggedIn && isWindows && !isWindowsPE && new File("\\Install\\DPK\\oa3tool.exe").exists()) {
            setActionsEnabled(false);

            loadingWindow.setLoadingTextAndDisplay("QA Helper is Retrieving Digital Product Key", "Working", "OldKey");

            (new SwingWorker<String, Void>() {
                @Override
                protected String doInBackground() throws Exception {
                    if (computerSpecs.getSerialIsMAC() || computerSpecs.getFullSerial().isEmpty() || computerSpecs.getFullSerial().equals("N/A")) {
                        return "NO SERIAL NUMBER";
                    }

                    if (!new File("\\Install\\DPK\\config.txt").exists()) {
                        return "NO DPK CONFIG";
                    }

                    String mscPort = "";
                    String businessID = "";

                    try {
                        List<String> dpkConfigLines = Files.readAllLines(Paths.get("\\Install\\DPK\\config.txt"));
                        for (String thisDPKconfigLine : dpkConfigLines) {
                            if (thisDPKconfigLine.startsWith("MSC Port:")) {
                                mscPort = thisDPKconfigLine.substring(thisDPKconfigLine.indexOf(":") + 1).trim();
                            } else if (thisDPKconfigLine.startsWith("MSC Business ID:")) {
                                businessID = thisDPKconfigLine.substring(thisDPKconfigLine.indexOf(":") + 1).trim();
                            }
                        }
                    } catch (IOException readDPKconfigException) {
                        if (isTestMode) {
                            System.out.println("readDPKconfigException: " + readDPKconfigException);
                        }
                    }

                    if (mscPort.isEmpty() || businessID.isEmpty()) {
                        return "INVALID DPK CONFIG";
                    }

                    String mscServerAddress = getMSCServerAddress();

                    if (mscServerAddress.isEmpty()) {
                        return "FAILED TO LOCATE MSC SERVER";
                    }

                    String dpkLogsPath = "\\Install\\DPK\\Logs\\";

                    boolean alreadyRetrievedDPK = new File(dpkLogsPath + "oa3tool-assemble.xml").exists();

                    if (alreadyRetrievedDPK || new CommandReader(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "(New-Object System.Net.Sockets.TcpClient).ConnectAsync('" + mscServerAddress + "', '" + mscPort + "').Wait(100)"}).getFirstOutputLine().equals("True")) { // (New-Object System.Net.Sockets.TcpClient).ConnectAsync().Wait() is MUCH faster than Test-NetConnection to check a port: https://copdips.com/2019/09/fast-tcp-port-check-in-powershell.html
                        if (!new File(dpkLogsPath).exists()) {
                            new File(dpkLogsPath).mkdirs();
                        }

                        String licensablePartNumber = "";
                        if (alreadyRetrievedDPK) {
                            String oa3toolAssembleContents = String.join("", Files.readAllLines(Paths.get(dpkLogsPath + "oa3tool-assemble.xml"))).replace(" ", ""); // Remove all spaces because "ProductKeyID" value could have trailing spaces.
                            int productKeyPartNumberOpenTagIndex = oa3toolAssembleContents.indexOf("<ProductKeyPartNumber>");
                            int productKeyPartNumberCloseTagIndex = oa3toolAssembleContents.indexOf("</ProductKeyPartNumber>");
                            if ((productKeyPartNumberOpenTagIndex > 0) && (productKeyPartNumberCloseTagIndex > 0) && ((productKeyPartNumberCloseTagIndex - productKeyPartNumberOpenTagIndex) == 31)) {
                                licensablePartNumber = oa3toolAssembleContents.substring(productKeyPartNumberOpenTagIndex + 22, productKeyPartNumberCloseTagIndex);
                            }
                        } else if (isWindows11) {
                            if (isWindowsHomeEdition) {
                                licensablePartNumber = "WV2-00048";
                            } else if (retrieveCitizenshipDPK) {
                                licensablePartNumber = "QLF-00626";
                            } else {
                                licensablePartNumber = "QLF-00624";
                            }
                        } else {
                            if (isWindowsHomeEdition) {
                                licensablePartNumber = "WV2-00047";
                            } else if (retrieveCitizenshipDPK) {
                                licensablePartNumber = "QLF-00623";
                            } else {
                                licensablePartNumber = "QLF-00621";
                            }
                        }

                        String dpkTypeCode = ""; // Get "dpkTypeCode" from "licensablePartNumber" so that it's accurate even if the "licensablePartNumber" was extracted from an existing "oa3tool-assemble.xml" (which could override the "retrieveCitizenshipDPK" variable).
                        if (licensablePartNumber.isEmpty()) {
                            return "NO DPK LICENSABLE PART NUMBER";
                        } else {
                            switch (licensablePartNumber) {
                                case "WV2-00048":
                                    dpkTypeCode = "WIN11-HOM-COM-DPK";
                                    break;
                                case "QLF-00626":
                                    dpkTypeCode = "WIN11-PRO-CIT-DPK";
                                    break;
                                case "QLF-00624":
                                    dpkTypeCode = "WIN11-PRO-COM-DPK";
                                    break;
                                case "WV2-00047":
                                    dpkTypeCode = "WIN10-HOM-COM-DPK";
                                    break;
                                case "QLF-00623":
                                    dpkTypeCode = "WIN10-PRO-CIT-DPK";
                                    break;
                                case "QLF-00621":
                                    dpkTypeCode = "WIN10-PRO-COM-DPK";
                                    break;
                                default:
                                    break;
                            }
                        }

                        if (dpkTypeCode.isEmpty()) {
                            return "NO DPK TYPE CODE / INVALID LICENSABLE PART NUMBER: " + licensablePartNumber;
                        }

                        if (isWindowsHomeEdition) {
                            if (dpkTypeCode.contains("-CIT-")) {
                                return "CANNOT APPLY CITIZENSHIP DPK TO HOME EDITION";
                            } else if (dpkTypeCode.contains("-PRO-")) {
                                return "CANNOT APPLY PRO DPK TO HOME EDITION";
                            }
                        } else if (dpkTypeCode.contains("-HOM-")) {
                            return "CANNOT APPLY HOME DPK TO PRO EDITION";
                        }

                        if (isWindows11) {
                            if (dpkTypeCode.startsWith("WIN10-")) {
                                return "CANNOT APPLY WIN 10 DPK TO WIN 11";
                            }
                        } else if (dpkTypeCode.startsWith("WIN11-")) {
                            return "CANNOT APPLY WIN 11 DPK TO WIN 10";
                        }

                        String oa3toolAssembleConfigPath = dpkLogsPath + "oa3tool-assemble-config.xml";
                        File oa3toolAssembleConfigFile = new File(oa3toolAssembleConfigPath);

                        if (!alreadyRetrievedDPK) {
                            if (oa3toolAssembleConfigFile.exists()) {
                                oa3toolAssembleConfigFile.delete();
                            }

                            try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(oa3toolAssembleConfigFile))) {
                                // https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/oa3-creating-configuration-file#to-create-the-server-based-configuration-file
                                bufferedWriter.write("<?xml version=\"1.0\"?>\n"
                                        + "<OA3>\n"
                                        + "  <ServerBased>\n"
                                        + "    <KeyProviderServerLocation>\n"
                                        + "      <IPAddress>" + mscServerAddress + "</IPAddress>\n"
                                        + "      <ProtocolSequence>ncacn_ip_tcp</ProtocolSequence>\n"
                                        + "      <EndPoint>" + mscPort + "</EndPoint>\n"
                                        + "      <Options />\n"
                                        + "    </KeyProviderServerLocation>\n"
                                        + "    <Parameters>\n"
                                        + "      <Parameter name=\"LicensablePartNumber\" value=\"" + licensablePartNumber + "\" />\n"
                                        + "      <OEMOptionalInfo />\n"
                                        + "      <BusinessID>" + businessID + "</BusinessID>\n"
                                        + "    </Parameters>\n"
                                        + "  </ServerBased>\n"
                                        + "  <OutputData>\n"
                                        + "    <AssembledBinaryFile>" + dpkLogsPath + "oa3tool-assemble.bin</AssembledBinaryFile>\n"
                                        + "    <ReportedXMLFile>" + dpkLogsPath + "oa3tool-assemble.xml</ReportedXMLFile>\n"
                                        + "  </OutputData>\n"
                                        + "</OA3>");
                            } catch (IOException writeOa3toolAssembleConfigException) {
                                if (isTestMode) {
                                    System.out.println("writeOa3toolAssembleConfigException: " + writeOa3toolAssembleConfigException);
                                }
                            }
                        }

                        if (alreadyRetrievedDPK || oa3toolAssembleConfigFile.exists()) {
                            String oa3toolAssembleOutput = "";
                            if (!alreadyRetrievedDPK) {
                                String[] oa3toolAssembleOuputLines = new CommandReader(new String[]{"\\Install\\DPK\\oa3tool.exe", "/Assemble", "/ConfigFile=\"" + oa3toolAssembleConfigPath + "\""}).getOutputLinesContaining(" "); // Matching lines that contain spaces will get rid of empty lines.
                                if (!isTestMode) {
                                    oa3toolAssembleConfigFile.delete();
                                }

                                if (new File(dpkLogsPath + "oa3tool-assemble.bin").exists()) {
                                    new File(dpkLogsPath + "oa3tool-assemble.bin").delete(); // We don't need this file since we are not flashing DPKs into BIOS.
                                }

                                oa3toolAssembleOuputLines = Arrays.copyOfRange(oa3toolAssembleOuputLines, 3, oa3toolAssembleOuputLines.length); // Remove the header from the output.
                                oa3toolAssembleOutput = String.join("<br/>", oa3toolAssembleOuputLines);
                            }

                            if (alreadyRetrievedDPK || oa3toolAssembleOutput.equals("    The OEM Activation Tool 3.0 successfully completed its required processes.")) {
                                try {
                                    String oa3toolAssembleContents = String.join("", Files.readAllLines(Paths.get(dpkLogsPath + "oa3tool-assemble.xml"))).replace(" ", ""); // Remove all spaces because "ProductKeyID" value could have trailing spaces.

                                    String retrievedLicensablePartNumber = "";
                                    int productKeyPartNumberOpenTagIndex = oa3toolAssembleContents.indexOf("<ProductKeyPartNumber>");
                                    int productKeyPartNumberCloseTagIndex = oa3toolAssembleContents.indexOf("</ProductKeyPartNumber>");
                                    if ((productKeyPartNumberOpenTagIndex > 0) && (productKeyPartNumberCloseTagIndex > 0) && ((productKeyPartNumberCloseTagIndex - productKeyPartNumberOpenTagIndex) == 31)) {
                                        retrievedLicensablePartNumber = oa3toolAssembleContents.substring(productKeyPartNumberOpenTagIndex + 22, productKeyPartNumberCloseTagIndex);
                                    }

                                    if (!licensablePartNumber.equals(retrievedLicensablePartNumber)) {
                                        return "ERROR RETRIEVING REQUESTED LPN FOR " + dpkTypeCode + " (" + licensablePartNumber + " != " + retrievedLicensablePartNumber + ")";
                                    }

                                    int productKeyOpenTagIndex = oa3toolAssembleContents.indexOf("<ProductKey>");
                                    int productKeyCloseTagIndex = oa3toolAssembleContents.indexOf("</ProductKey>");
                                    if ((productKeyOpenTagIndex > 0) && (productKeyCloseTagIndex > 0) && ((productKeyCloseTagIndex - productKeyOpenTagIndex) == 41)) {
                                        String digitalProductKey = oa3toolAssembleContents.substring(productKeyOpenTagIndex + 12, productKeyCloseTagIndex);

                                        if (!alreadyRetrievedDPK) {
                                            String productKeyID = "UNKNOWN PKID FOR " + digitalProductKey.substring(digitalProductKey.length() - 5);
                                            int productKeyIdOpenTagIndex = oa3toolAssembleContents.indexOf("<ProductKeyID>");
                                            int productKeyIdCloseTagIndex = oa3toolAssembleContents.indexOf("</ProductKeyID>");
                                            if ((productKeyIdOpenTagIndex > 0) && (productKeyIdCloseTagIndex > 0) && ((productKeyIdCloseTagIndex - productKeyIdOpenTagIndex) == 27)) {
                                                productKeyID = oa3toolAssembleContents.substring(productKeyIdOpenTagIndex + 14, productKeyIdCloseTagIndex);
                                            }

                                            logSpecsAction(dpkTypeCode + " " + productKeyID + " Retrieved");
                                            sendNoticeEmail(dpkTypeCode + " " + productKeyID + " Retrieved from MSC");
                                        }

                                        return "RETRIEVED " + dpkTypeCode + ": " + digitalProductKey;
                                    }
                                } catch (IOException readOa3toolAssembleXMLcontentsException) {
                                    if (isTestMode) {
                                        System.out.println("readOa3toolAssembleXMLcontentsException: " + readOa3toolAssembleXMLcontentsException);
                                    }
                                }

                                return "ERROR EXTRACTING " + dpkTypeCode;
                            } else {
                                return "ERROR RETRIEVING " + dpkTypeCode + ": " + oa3toolAssembleOutput;
                            }
                        } else {
                            return "FAILED TO CREATE OA3 CONFIG";
                        }
                    } else {
                        return "FAILED TO CONNECT TO MSC";
                    }
                }

                @Override
                protected void done() {
                    loadingWindow.closeWindow();

                    try {
                        String retrieveDPKoutput = get();

                        if (retrieveDPKoutput.startsWith("RETRIEVED ")) {
                            String dpkTypeCode = retrieveDPKoutput.substring(10, retrieveDPKoutput.indexOf(":"));
                            String retrievedDPK = retrieveDPKoutput.substring((retrieveDPKoutput.indexOf(": ") + 2));

                            licenseWindowsWithProductKey(retrievedDPK, dpkTypeCode);
                        } else {
                            playAlertSound("error");

                            sendErrorEmail(retrieveDPKoutput);

                            if (retrieveDPKoutput.equals("NO SERIAL NUMBER")) {
                                JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>No Serial Number for Digital Product Key</b><br/><br/>Since this computer does not have a computer or motherboard serial number available via software,<br/><u>it cannot have a Digital Product Key applied to it.</u></html>", "QA Helper  —  No Serial Number for Digital Product Key", JOptionPane.ERROR_MESSAGE);
                            } else if (retrieveDPKoutput.startsWith("ERROR RETRIEVING ")) {
                                String dpkTypeCode = retrieveDPKoutput.substring(17, retrieveDPKoutput.indexOf(":"));
                                JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Error Retrieving \"" + dpkTypeCode + "\" from MSC</b><br/><br/><pre>" + retrieveDPKoutput.substring((retrieveDPKoutput.indexOf(": ") + 2)) + "</pre><br/><i>Please Inform Free Geek I.T.</i></html>", "QA Helper  —  Retrieve Digital Product Key Error", JOptionPane.ERROR_MESSAGE);
                            } else if (retrieveDPKoutput.equals("FAILED TO CONNECT TO MSC")) {
                                JOptionPane.showMessageDialog(qaHelperWindow, "<html><b style='color: " + warningColorHTML + "'>Local Free Geek Network Is Required to Retrieve Digital Product Key</b>"
                                        + "<br/><br/>"
                                        + "<i>Failed to Connect to MSC</i>"
                                        + "<br/><br/>"
                                        + "Make sure you're connected to the \"FG Staff\" Wi-Fi network or plugged in with an Ethernet cable at Free Geek."
                                        + "<br/><br/>"
                                        + "<i>Please Inform Free Geek I.T. If This Error Continues While Connected to Local Free Geek Network</i></html>", "QA Helper  —  Retrieve Digital Product Key Error", JOptionPane.ERROR_MESSAGE);
                            } else {
                                JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>" + retrieveDPKoutput + "</b><br/><br/>THIS SHOULD NOT HAVE HAPPENED<br/><br/><i>Please Inform Free Geek I.T.</i></html>", "QA Helper  —  Digital Product Key Error", JOptionPane.ERROR_MESSAGE);
                            }

                            setActionsEnabled(true);
                        }
                    } catch (HeadlessException | InterruptedException | ExecutionException retrieveDigitalProductKeyException) {
                        if (isTestMode) {
                            System.out.println("retrieveDigitalProductKeyException: " + retrieveDigitalProductKeyException);
                        }

                        playAlertSound("error");
                        sendErrorEmail("UNKNOWN ERROR RETRIEVING DIGITAL PRODUCT KEY");
                        JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>UNKNOWN ERROR RETRIEVING DIGITAL PRODUCT KEY</b><br/><br/><i>Please Try Again</i></html>", "QA Helper  —  Retrieve Digital Product Key Error", JOptionPane.ERROR_MESSAGE);

                        setActionsEnabled(true);
                    }
                }
            }).execute();
        } else {
            playAlertSound("beep");
            setActionsEnabled(true);
        }
    }

    private void licenseWindowsWithProductKey(String newProductKey, String dpkTypeCode) {
        if (isLoggedIn && isWindows && !isWindowsPE) {
            setActionsEnabled(false);

            if ((newProductKey.length() == 29) && (dpkTypeCode.length() == 17) && dpkTypeCode.endsWith("-DPK")) {
                loadingWindow.setLoadingTextAndDisplay("QA Helper is Licensing Windows", "Working", "OldKey");

                final String productKeyEnding = newProductKey.substring(newProductKey.length() - 5);

                (new SwingWorker<String, Void>() {
                    @Override
                    protected String doInBackground() throws Exception {
                        // Can't only check for "Sent = 1, Received = 1" from ping on Windows because "Destination host unreachable" error will show no packet loss.
                        boolean canConnectToMicrosoft = (new CommandReader(new String[]{"\\Windows\\System32\\PING.EXE", "-w", "5", "-n", "1", "www.microsoft.com"}).getOutputLinesContaining(new String[]{"TTL=", "Sent = 1, Received = 1", "round trip times"}).length == 3);

                        if (canConnectToMicrosoft) {
                            String slmgrIpkOutput = new CommandReader(new String[]{"\\Windows\\System32\\cscript.exe", "/nologo", "\\Windows\\System32\\slmgr.vbs", "/ipk", newProductKey}).getOutputLinesAsString().trim();

                            if (slmgrIpkOutput.equals("Installed product key " + newProductKey + " successfully.")) {
                                // NOTE: When applying a Refurb DPK, we only run "slmgr /ipk" to install/apply the DPK and DO NOT run "slmgr /ato" to Activate Windows as doing so would be a CBR Compliance violation.
                                // Windows will get Activated when the end user goes through OOBE which should be AFTER we have submitted the CBRs via MSC and the Refurb DPK is in "ActivationEnabled" state, which is what Microsoft wants to happen.

                                String windowsLicenseInfo = computerSpecs.getWindowsLicenseInfo(isTestMode, isLoggedIn, false); // Do not obscure DPKs from this output so that we can verify the entire correct Product Key before continuing.
                                // The following code does a lot of not ideal string parsing because getWindowsLicenseInfo was originally used just for a simple
                                // Windows license info output display, but things slowly evolved and a lot more complex stuff if being done and getWindowsLicenseInfo
                                // should really be broken out to its own class with sepearate properties to be able to make the following code much cleaner and simpler.

                                boolean isLicensed = windowsLicenseInfo.contains("<b>License Status:</b> Licensed");
                                boolean possibleNonRefurbProductKey = windowsLicenseInfo.contains("LICENSED WITH A NON-REFURBISHED PC PRODUCT KEY");

                                if (isLicensed && !possibleNonRefurbProductKey && windowsLicenseInfo.contains("<b>Product Key in Registry:</b> " + newProductKey)) {
                                    String coaID = ""; // PCs for People calls this Serial but MS refers to is COA ID and maybe used to call it COA Serial Number
                                    String productKeyID = ""; // This same COA ID is now called "Product Key ID" for DPKs and is just a number with no dashes.

                                    for (String thisWindowsLicenseInfoLine : windowsLicenseInfo.split("<br/>")) {
                                        if (thisWindowsLicenseInfoLine.contains(":</b> ")) {
                                            String thisWindowsLicenseInfoProperty = thisWindowsLicenseInfoLine.substring(thisWindowsLicenseInfoLine.indexOf(":</b> ") + 6).trim();

                                            if (!thisWindowsLicenseInfoProperty.isEmpty()) {
                                                if (thisWindowsLicenseInfoLine.startsWith("<b>COA ID")) {
                                                    coaID = thisWindowsLicenseInfoProperty;
                                                } else if (thisWindowsLicenseInfoLine.startsWith("<b>Product Key ID:</b>")) {
                                                    productKeyID = thisWindowsLicenseInfoProperty;
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    logSpecsAction(dpkTypeCode + " " + (productKeyID.isEmpty() ? ("UNKNOWN PKID FOR " + productKeyEnding) : productKeyID) + " Licensed");

                                    boolean savedProductKeyToPCsCRM = false;

                                    if (!coaID.isEmpty() && !productKeyID.isEmpty() && !newProductKey.isEmpty()) {
                                        boolean didUploadCBR = false;

                                        String dpkLogsPath = "\\Install\\DPK\\Logs\\";

                                        String productKeyIDfromOa3Assemble = "";
                                        try {
                                            String oa3toolAssembleContents = String.join("", Files.readAllLines(Paths.get(dpkLogsPath + "oa3tool-assemble.xml"))).replace(" ", ""); // Remove all spaces because "ProductKeyID" value could have trailing spaces.
                                            int productKeyIdOpenTagIndex = oa3toolAssembleContents.indexOf("<ProductKeyID>");
                                            int productKeyIdCloseTagIndex = oa3toolAssembleContents.indexOf("</ProductKeyID>");
                                            if ((productKeyIdOpenTagIndex > 0) && (productKeyIdCloseTagIndex > 0) && ((productKeyIdCloseTagIndex - productKeyIdOpenTagIndex) == 27)) {
                                                productKeyIDfromOa3Assemble = oa3toolAssembleContents.substring(productKeyIdOpenTagIndex + 14, productKeyIdCloseTagIndex);
                                            }
                                        } catch (IOException readOa3toolAssembleXMLcontentsException) {
                                            if (isTestMode) {
                                                System.out.println("readOa3toolAssembleXMLcontentsException: " + readOa3toolAssembleXMLcontentsException);
                                            }
                                        }

                                        if (!productKeyIDfromOa3Assemble.isEmpty() && productKeyID.equals(productKeyIDfromOa3Assemble)) {
                                            String oa3toolReportConfigPath = dpkLogsPath + "oa3tool-report-config.xml";
                                            File oa3toolReportConfigFile = new File(oa3toolReportConfigPath);

                                            if (oa3toolReportConfigFile.exists()) {
                                                oa3toolReportConfigFile.delete();
                                            }

                                            try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(oa3toolReportConfigFile))) {
                                                // https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/oa3-creating-configuration-file#to-create-the-file-based-configuration-file
                                                bufferedWriter.write("<?xml version=\"1.0\"?>\n"
                                                        + "<OA3>\n"
                                                        + "  <FileBased>\n"
                                                        + "    <InputKeyXMLFile>" + dpkLogsPath + "oa3tool-assemble.xml</InputKeyXMLFile>\n"
                                                        + "  </FileBased>\n"
                                                        + "  <OutputData>\n"
                                                        + "    <AssembledBinaryFile>" + dpkLogsPath + "oa3tool-report.bin</AssembledBinaryFile>\n"
                                                        + "    <ReportedXMLFile>" + dpkLogsPath + "oa3tool-report.xml</ReportedXMLFile>\n"
                                                        + "  </OutputData>\n"
                                                        + "</OA3>");
                                            } catch (IOException writeOa3toolAssembleConfigException) {
                                                if (isTestMode) {
                                                    System.out.println("writeOa3toolAssembleConfigException: " + writeOa3toolAssembleConfigException);
                                                }
                                            }

                                            if (oa3toolReportConfigFile.exists()) {
                                                ArrayList<String> oa3toolReportCommand = new ArrayList<>();
                                                oa3toolReportCommand.addAll(Arrays.asList("\\Install\\DPK\\oa3tool.exe", "/Report", "/NoKeyCheck", "/ConfigFile=\"" + oa3toolReportConfigPath + "\""));
                                                if (isTestMode) {
                                                    oa3toolReportCommand.add("/LogTrace=\"" + dpkLogsPath + "oa3tool-report-log-trace.txt\"");
                                                }

                                                String[] oa3toolReportOuputLines = new CommandReader(oa3toolReportCommand.toArray(String[]::new)).getOutputLinesContaining(" "); // Matching lines that contain spaces will get rid of empty lines.
                                                if (!isTestMode) {
                                                    oa3toolReportConfigFile.delete();
                                                }

                                                if (new File(dpkLogsPath + "oa3tool-report.bin").exists()) {
                                                    new File(dpkLogsPath + "oa3tool-report.bin").delete(); // We don't need this file since we are not flashing DPKs into BIOS. (This one actually appears to not get created anyways.)
                                                }

                                                oa3toolReportOuputLines = Arrays.copyOfRange(oa3toolReportOuputLines, 3, oa3toolReportOuputLines.length); // Remove the header from the output.
                                                String oa3toolReportOutput = String.join("<br/>", oa3toolReportOuputLines);

                                                if (oa3toolReportOutput.equals("    The OEM Activation Tool 3.0 successfully completed its required processes.")) {
                                                    String hardwareHash = "";

                                                    try {
                                                        List<String> oa3toolReportLines = Files.readAllLines(Paths.get(dpkLogsPath + "oa3tool-report.xml"));
                                                        for (String thisOa3toolReportLine : oa3toolReportLines) {
                                                            if (thisOa3toolReportLine.contains("<HardwareHash>")) { // Unlike other XML outputs from oa3tool, this file has all XML keys on a single line.
                                                                hardwareHash = thisOa3toolReportLine.substring((thisOa3toolReportLine.indexOf("<HardwareHash>") + 14), thisOa3toolReportLine.indexOf("</HardwareHash>"));
                                                                break;
                                                            }
                                                        }
                                                    } catch (IOException readOa3toolReportXMLcontentsException) {
                                                        if (isTestMode) {
                                                            System.out.println("readOa3toolReportXMLcontentsException: " + readOa3toolReportXMLcontentsException);
                                                        }
                                                    }

                                                    if (!hardwareHash.isEmpty()) {
                                                        String cbrFilename = "CBR+" + dpkTypeCode + "+" + productKeyID + "+" + computerSpecs.getFullSerial().replaceAll("[^A-Za-z0-9]", "") + "+" + pid + ".xml";
                                                        String cbrToUploadPath = dpkLogsPath + cbrFilename;
                                                        File cbrToUploadFile = new File(cbrToUploadPath);

                                                        if (cbrToUploadFile.exists()) {
                                                            cbrToUploadFile.delete();
                                                        }

                                                        try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(cbrToUploadFile))) {
                                                            // Sort of based on this: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/oa3-creating-configuration-file#to-create-the-file-based-input-xml-file
                                                            // This XML I am building is really based on what was being constructed by the original script from Blair to upload to the MSC VM to be reported to MS via CBR.
                                                            bufferedWriter.write("<?xml version=\"1.0\"?>\n"
                                                                    + "<Key>\n"
                                                                    + "  <ProductKeyID>" + productKeyID + "</ProductKeyID>\n"
                                                                    + "  <ProductKeyState>3</ProductKeyState>\n" // ProductKeyState 3 = BOUND
                                                                    + "  <HardwareHash>" + hardwareHash + "</HardwareHash>\n"
                                                                    + "  <OEMOptionalInfo />\n"
                                                                    + "  <SerialNumber>" + StringEscapeUtils.escapeHtml4(computerSpecs.getFullSerial()) + "</SerialNumber>\n"
                                                                    + "</Key>");
                                                        } catch (IOException writeCBRtoUploadException) {
                                                            if (isTestMode) {
                                                                System.out.println("writeCBRtoUploadException: " + writeCBRtoUploadException);
                                                            }
                                                        }

                                                        if (cbrToUploadFile.exists()) {
                                                            if (!new File("\\Install\\DPK\\config.txt").exists()) {
                                                                return "DPK ERROR: NO SFTP CONFIG TO UPLOAD CBR";
                                                            }

                                                            String sftpPort = "";
                                                            String sftpUser = "";
                                                            String sftpPrivateKey = "";
                                                            boolean isReadingSFTPprivateKey = false;

                                                            try {
                                                                List<String> sftpConfigLines = Files.readAllLines(Paths.get("\\Install\\DPK\\config.txt"));
                                                                for (String thisSFTPconfigLine : sftpConfigLines) {
                                                                    if (thisSFTPconfigLine.startsWith("SFTP Port:")) {
                                                                        sftpPort = thisSFTPconfigLine.substring(thisSFTPconfigLine.indexOf(":") + 1).trim();
                                                                    } else if (thisSFTPconfigLine.startsWith("SFTP User:")) {
                                                                        sftpUser = thisSFTPconfigLine.substring(thisSFTPconfigLine.indexOf(":") + 1).trim();
                                                                    } else if (thisSFTPconfigLine.startsWith("SFTP Private Key:")) {
                                                                        sftpPrivateKey = thisSFTPconfigLine.substring(thisSFTPconfigLine.indexOf(":") + 1).trim();
                                                                        isReadingSFTPprivateKey = true;
                                                                    } else if (isReadingSFTPprivateKey) {
                                                                        sftpPrivateKey += "\n" + thisSFTPconfigLine;

                                                                        if (thisSFTPconfigLine.equals("-----END RSA PRIVATE KEY-----")) {
                                                                            isReadingSFTPprivateKey = false;
                                                                        }
                                                                    }
                                                                }
                                                            } catch (IOException readSFTPconfigException) {
                                                                if (isTestMode) {
                                                                    System.out.println("readSFTPconfigException: " + readSFTPconfigException);
                                                                }
                                                            }

                                                            if (sftpPort.isEmpty() || sftpUser.isEmpty() || sftpPrivateKey.isEmpty()) {
                                                                return "DPK ERROR: INVALID SFTP CONFIG TO UPLOAD CBR";
                                                            }

                                                            String sftpAddress = getMSCServerAddress();

                                                            if (sftpAddress.isEmpty()) {
                                                                return "DPK ERROR: FAILED TO LOCATE SFTP SERVER TO UPLOAD CBR";
                                                            }

                                                            if (!new CommandReader(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "(New-Object System.Net.Sockets.TcpClient).ConnectAsync('" + sftpAddress + "', '" + sftpPort + "').Wait(100)"}).getFirstOutputLine().equals("True")) { // (New-Object System.Net.Sockets.TcpClient).ConnectAsync().Wait() is MUCH faster than Test-NetConnection to check a port: https://copdips.com/2019/09/fast-tcp-port-check-in-powershell.html
                                                                return "DPK ERROR: FAILED TO CONNECT TO SFTP TO UPLOAD CBR";
                                                            }

                                                            String sftpDirCommandPath = dpkLogsPath + "sftp-dir-command.txt";
                                                            File sftpDirCommandFile = new File(sftpDirCommandPath);

                                                            if (sftpDirCommandFile.exists()) {
                                                                sftpDirCommandFile.delete();
                                                            }

                                                            try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(sftpDirCommandFile))) {
                                                                bufferedWriter.write("dir -1");
                                                            } catch (IOException writeSFTPdirCommandException) {
                                                                if (isTestMode) {
                                                                    System.out.println("writeSFTPdirCommandException: " + writeSFTPdirCommandException);
                                                                }
                                                            }

                                                            String sftpPutCommandPath = dpkLogsPath + "sftp-put-command.txt";
                                                            File sftpPutCommandFile = new File(sftpPutCommandPath);

                                                            if (sftpPutCommandFile.exists()) {
                                                                sftpPutCommandFile.delete();
                                                            }

                                                            try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(sftpPutCommandFile))) {
                                                                bufferedWriter.write("put \"" + cbrToUploadPath + "\"");
                                                            } catch (IOException writeSFTPputCommandException) {
                                                                if (isTestMode) {
                                                                    System.out.println("writeSFTPputCommandException: " + writeSFTPputCommandException);
                                                                }
                                                            }

                                                            String sftpPrivateKeyPath = dpkLogsPath + "sftp-private.key";
                                                            File sftpPrivateKeyFile = new File(sftpPrivateKeyPath);

                                                            if (sftpPrivateKeyFile.exists()) {
                                                                sftpPrivateKeyFile.delete();
                                                            }

                                                            try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(sftpPrivateKeyFile))) {
                                                                bufferedWriter.write(sftpPrivateKey);
                                                            } catch (IOException writeSFTPprivateKeyException) {
                                                                if (isTestMode) {
                                                                    System.out.println("writeSFTPprivateKeyException: " + writeSFTPprivateKeyException);
                                                                }
                                                            }

                                                            try {
                                                                // Must set ACL to restrict access to private key or sftp will fail.
                                                                Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "$sftpPrivateKeyACL = Get-Acl '" + sftpPrivateKeyPath + "'\n"
                                                                    + "$sftpPrivateKeyACL.SetAccessRuleProtection($true, $false)\n"
                                                                    + "$sftpPrivateKeyACL.SetAccessRule((New-Object System.Security.AccessControl.FileSystemAccessRule('Administrators', 'FullControl', 'Allow')))\n"
                                                                    + "$sftpPrivateKeyACL.SetAccessRule((New-Object System.Security.AccessControl.FileSystemAccessRule('SYSTEM', 'FullControl', 'Allow')))\n"
                                                                    + "$sftpPrivateKeyACL | Set-Acl"
                                                                }).waitFor();
                                                            } catch (IOException | InterruptedException setSFTPprivateKeyACLException) {
                                                                if (isTestMode) {
                                                                    System.out.println("setSFTPprivateKeyACLException: " + setSFTPprivateKeyACLException);
                                                                }
                                                            }

                                                            if (!sftpDirCommandFile.exists() || !sftpPutCommandFile.exists() || !sftpPrivateKeyFile.exists()) {
                                                                return "DPK ERROR: ERROR CREATING SFTP COMMAND OR KEY FILES";
                                                            }

                                                            String cbrUploadError = "";

                                                            String[] cbrDirOuputLinesBefore = new CommandReader("\\Windows\\System32\\OpenSSH\\sftp.exe -P " + sftpPort + " -b \"" + sftpDirCommandFile + "\" -i \"" + sftpPrivateKeyPath + "\" -o StrictHostKeyChecking=no -o HostkeyAlgorithms=ssh-rsa -o PubkeyAcceptedKeyTypes=ssh-rsa " + sftpUser + "@" + sftpAddress + " 2>&1").getOutputLines();

                                                            if (cbrDirOuputLinesBefore.length > 0 && (cbrDirOuputLinesBefore[0].equals("sftp> dir -1") || (cbrDirOuputLinesBefore[0].startsWith("Warning: Permanently added") && cbrDirOuputLinesBefore[1].equals("sftp> dir -1")))) { // Line 0 will contain an error if something went wrong with the "dir" command, unless is first connection then will have a warning about adding to list of known hosts.
                                                                for (String thisCbrDirOuputLineBefore : cbrDirOuputLinesBefore) {
                                                                    if (!thisCbrDirOuputLineBefore.equals(cbrFilename)) { // It's fine if the exact CBR already exists, it will be overwritten to contain the latest hardware hash.
                                                                        if (thisCbrDirOuputLineBefore.contains("+" + productKeyID + "+")) {
                                                                            cbrUploadError = "NOT UPLOADING CBR - DPK ID CONFLICT:<br/> Current CBR: " + cbrFilename + "<br/>Existing CBR: " + thisCbrDirOuputLineBefore;
                                                                            break;
                                                                        } else if (thisCbrDirOuputLineBefore.contains("+" + computerSpecs.getFullSerial().replaceAll("[^A-Za-z0-9]", "") + "+")) {
                                                                            cbrUploadError = "NOT UPLOADING CBR - SERIAL CONFLICT:<br/> Current CBR: " + cbrFilename + "<br/>Existing CBR: " + thisCbrDirOuputLineBefore;
                                                                            break;
                                                                        } else if (thisCbrDirOuputLineBefore.endsWith("+" + pid + ".xml")) {
                                                                            cbrUploadError = "NOT UPLOADING CBR - ID CONFLICT:<br/> Current CBR:  " + cbrFilename + "<br/>Existing CBR: " + thisCbrDirOuputLineBefore;
                                                                            break;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                cbrUploadError = "FAILED TO CHECK EXISTING CBR FILES:<br/>" + String.join("<br/>", cbrDirOuputLinesBefore);
                                                            }

                                                            if (cbrUploadError.isEmpty()) {
                                                                String[] uploadCBRouputLines = new CommandReader("\\Windows\\System32\\OpenSSH\\sftp.exe -P " + sftpPort + " -b \"" + sftpPutCommandFile + "\" -i \"" + sftpPrivateKeyPath + "\" -o StrictHostKeyChecking=no -o HostkeyAlgorithms=ssh-rsa -o PubkeyAcceptedKeyTypes=ssh-rsa " + sftpUser + "@" + sftpAddress + " 2>&1").getOutputLines();

                                                                if (String.join("", uploadCBRouputLines).equals("sftp> put \"" + cbrToUploadPath.replace("\\", "/") + "\"")) { // If an error occurred, there will be more text in the output.
                                                                    String[] cbrDirOuputLinesAfter = new CommandReader("\\Windows\\System32\\OpenSSH\\sftp.exe -P " + sftpPort + " -b \"" + sftpDirCommandFile + "\" -i \"" + sftpPrivateKeyPath + "\" -o StrictHostKeyChecking=no -o HostkeyAlgorithms=ssh-rsa -o PubkeyAcceptedKeyTypes=ssh-rsa " + sftpUser + "@" + sftpAddress + " 2>&1").getOutputLines();

                                                                    if (cbrDirOuputLinesAfter.length > 0 && cbrDirOuputLinesAfter[0].equals("sftp> dir -1")) { // Line 0 will contain an error if something went wrong with the "dir" command.
                                                                        if (String.join("", cbrDirOuputLinesAfter).contains(cbrFilename)) {
                                                                            slmgrIpkOutput += " And uploaded CBR for DPK.";
                                                                            writeToHelperLogFile("Uploaded CBR for DPK: " + cbrFilename);
                                                                            logSpecsAction(dpkTypeCode + " " + productKeyID + " CBR Uploaded");
                                                                            didUploadCBR = true;
                                                                        } else {
                                                                            cbrUploadError = "FAILED TO CONFIRM CBR UPLOAD";
                                                                        }
                                                                    } else {
                                                                        cbrUploadError = "FAILED TO CONFIRM CBR UPLOAD:<br/>" + String.join("<br/>", cbrDirOuputLinesAfter);
                                                                    }
                                                                } else {
                                                                    cbrUploadError = "FAILED TO UPLOAD CBR:<br/>" + String.join("<br/>", uploadCBRouputLines);
                                                                }
                                                            }

                                                            if (sftpPrivateKeyFile.exists()) {
                                                                sftpPrivateKeyFile.delete();
                                                            }

                                                            if (!isTestMode) {
                                                                if (sftpDirCommandFile.exists()) {
                                                                    sftpDirCommandFile.delete();
                                                                }

                                                                if (sftpPutCommandFile.exists()) {
                                                                    sftpPutCommandFile.delete();
                                                                }
                                                            }

                                                            if (!cbrUploadError.isEmpty()) {
                                                                return "DPK ERROR: " + cbrUploadError;
                                                            }
                                                        } else {
                                                            return "DPK ERROR: ERROR CREATING CBR TO UPLOAD";
                                                        }
                                                    } else {
                                                        return "DPK ERROR: FAILED TO EXTRACT OA3 HARDWARE HASH";
                                                    }
                                                } else {
                                                    return "DPK ERROR: FAILED TO GENERATE OA3 HARDWARE HASH:<br/>" + oa3toolReportOutput;
                                                }
                                            } else {
                                                return "DPK ERROR: FAILED TO CREATE OA3 CONFIG FOR HARDWARE HASH";
                                            }
                                        } else {
                                            return "DPK ERROR: INVALID PRODUCT KEY ID FOR CBR:<br/> PKID for CBR: " + (productKeyID.isEmpty() ? "N/A" : productKeyID) + "<br/>PKID from OA3: " + (productKeyIDfromOa3Assemble.isEmpty() ? "N/A" : productKeyIDfromOa3Assemble);
                                        }

                                        if (didUploadCBR) {
                                            // For DPKs, will only save product key to PCsCRM if successfully uploaded the CBR which is required for all DPKs.
                                            // This also means that the existing logic will block "statusNames[12]" until the CBR has been uploaded (but also added check for "Uploaded CBR for DPK" log entry before allowing "statusNames[12]" for DPKs).

                                            savedProductKeyToPCsCRM = saveWindowsProductKeyToPCsCRM(dpkTypeCode, coaID, ("XXXXX-XXXXX-XXXXX-XXXXX-" + productKeyEnding)); // Do not save entire Refurb DPKs in PCSCRM since MS may not like that and we don't want to ever be able to re-apply them on re-installations (we would want to revert them and issue a new one).
                                        }
                                    }

                                    if (!savedProductKeyToPCsCRM) {
                                        return "FAILED TO SAVE PRODUCT KEY TO PCsCRM";
                                    } else {
                                        slmgrIpkOutput += " And saved Product Key.";

                                        logSpecsAction(dpkTypeCode + " " + (productKeyID.isEmpty() ? ("UNKNOWN PKID FOR " + productKeyEnding) : productKeyID) + " Logged to PCsCRM");
                                    }
                                } else {
                                    return "WINDOWS NOT PROPERLY LICENSED";
                                }
                            }

                            return slmgrIpkOutput;
                        }

                        return "INTERNET REQUIRED TO LICENSE WINDOWS";
                    }

                    @Override
                    protected void done() {
                        loadingWindow.closeWindow();

                        try {
                            String licenseWindowsOutput = get();

                            if (licenseWindowsOutput.equals("Installed product key " + newProductKey + " successfully. And uploaded CBR for DPK. And saved Product Key.")) {
                                // Instead of showing an seperate success message, just reload the full license info and let that be the success message.
                                btnCheckWindowsLicenseActionPerformed(null);
                            } else {
                                sendErrorEmail(licenseWindowsOutput);

                                licenseWindowsOutput = escapeMultiLineStringForHTML(licenseWindowsOutput);
                                String longErrorMessage = "<b style='color: " + errorColorHTML + "'>Failed to License Windows with Product Key:</b>"
                                        + "<br/>"
                                        + newProductKey
                                        + "<br/><br/>"
                                        + "<b>Windows License Error Message:</b>"
                                        + "<br/>"
                                        + "<pre>" + licenseWindowsOutput.replace("Error: ", "") + "</pre>";

                                if (licenseWindowsOutput.startsWith("DPK ERROR: ")) {
                                    longErrorMessage = "<b><span style='color: " + successColorHTML + "'>Licensed Windows</span>, but <span style='color: " + errorColorHTML + "'>Failed to Finalize DPK</span>:</b>"
                                            + "<br/><br/>"
                                            + "<pre>" + licenseWindowsOutput.substring(11) + "</pre>"
                                            + "<br/><i>Please Inform Free Geek I.T.</i>";
                                } else {
                                    switch (licenseWindowsOutput) {
                                        case "INTERNET REQUIRED TO LICENSE WINDOWS":
                                            longErrorMessage = "<b style='color: " + warningColorHTML + "'>Internet Is Required to License Windows</b>"
                                                    + "<br/><br/>"
                                                    + "<i>Failed to Connect to Microsoft.com</i>";
                                            break;
                                        case "WINDOWS NOT PROPERLY LICENSED":
                                            longErrorMessage = "<b><span style='color: " + successColorHTML + "'>Installed Product Key</span>, but <span style='color: " + errorColorHTML + "'>Failed to Properly License Windows</span>:</b>"
                                                    + "<br/>" + newProductKey
                                                    + "<br/><br/>"
                                                    + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>WINDOWS MUST BE PROPERLY LICENSED TO CONTINUE - TRY AGAIN</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right");
                                            break;
                                        case "FAILED TO SAVE PRODUCT KEY TO PCsCRM":
                                            longErrorMessage = "<b><span style='color: " + successColorHTML + "'>Licensed Windows</span>, but <span style='color: " + errorColorHTML + "'>Failed to Save Product Key to PCsCRM</span>:</b>"
                                                    + "<br/>"
                                                    + newProductKey
                                                    + "<br/><br/>"
                                                    + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <i>THE PRODUCT KEY MUST BE SAVED TO PCsCRM TO CONTINUE - TRY AGAIN</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right");
                                            break;
                                        default:
                                            break;
                                    }
                                }

                                playAlertSound("error");
                                JOptionPane.showMessageDialog(qaHelperWindow, "<html>" + longErrorMessage + "</html>", "QA Helper  —  License Windows Error", JOptionPane.ERROR_MESSAGE);

                                licenseWindowsWithProductKey(newProductKey, dpkTypeCode); // Try again if re-attempting after a CBR upload error or something with a DPK.
                            }
                        } catch (HeadlessException | InterruptedException | ExecutionException licenseWindowsException) {
                            if (isTestMode) {
                                System.out.println("licenseWindowsException: " + licenseWindowsException);
                            }

                            sendErrorEmail("licenseWindowsException: " + licenseWindowsException);

                            playAlertSound("error");
                            JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>UNKNOWN ERROR LICENSING WINDOWS</b><br/><br/><i>Please Try Again</i></html>", "QA Helper  —  License Windows Error", JOptionPane.ERROR_MESSAGE);

                            licenseWindowsWithProductKey(newProductKey, dpkTypeCode);
                        }
                    }
                }).execute();
            } else {
                playAlertSound("beep");
                String invalidProductKeyOrDPKTypeCodeError = "Cannot License Invalid Digital Product Key (" + newProductKey + ") or DPK Type Code (" + dpkTypeCode + ")";
                sendErrorEmail(invalidProductKeyOrDPKTypeCodeError);
                JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>" + invalidProductKeyOrDPKTypeCodeError + "</b><br/><br/>THIS SHOULD NOT HAVE HAPPENED<br/><br/><i>Please Inform Free Geek I.T.</i></html>", "QA Helper  —  Cannot Change DPK", JOptionPane.ERROR_MESSAGE);
                setActionsEnabled(true);
            }
        } else {
            playAlertSound("beep");
            setActionsEnabled(true);
        }
    }

    private void btnVerifyWindowsLicenseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifyWindowsLicenseActionPerformed
        if ((actionsEnabled || (evt == null)) && isWindows && !isWindowsPE) {
            setActionsEnabled(false);

            if (JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>" + ((evt == null) ? "Would you like " : "Are you sure you want ") + "to <i>" + (isWindowsLicenseVerified ? "UNVERIFY" : "verify") + "</i> that Windows is licensed with the correct Product Key?</b></html>", "QA Helper  —  Confirm " + (isWindowsLicenseVerified ? "Unverify" : "Verify") + " Windows License", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage((isWindowsLicenseVerified ? "CrossMark" : "CheckBoxWithCheck"), qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                isWindowsLicenseVerified = !isWindowsLicenseVerified;

                writeToHelperLogFile("Task: Windows License " + (isWindowsLicenseVerified ? "Verified" : "UNVERIFIED"));

                btnVerifyWindowsLicense.setText((isWindowsLicenseVerified ? "Verified" : "Verify"));
                btnVerifyWindowsLicense.setFont(btnVerifyWindowsLicense.getFont().deriveFont((isWindowsLicenseVerified ? Font.BOLD : lblVersion.getFont().getStyle())));
                btnVerifyWindowsLicense.setForeground(isWindowsLicenseVerified ? verifiedColor : defaultColor);
                btnVerifyWindowsLicense.setBorderPainted(!isWindowsLicenseVerified);

                focusNextTestTaskVerifyButton(btnVerifyWindowsLicense);
            } else {
                focusNextTestTaskVerifyButton(btnCheckWindowsLicense);
            }

            setActionsEnabled(true);
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnVerifyWindowsLicenseActionPerformed

    private void btnCheckRemoteManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckRemoteManagementActionPerformed
        if (actionsEnabled && isMacOS) {
            setActionsEnabled(false);

            String systemSerialNumber = new CommandReader(new String[]{"/bin/bash", "-c", "/usr/libexec/PlistBuddy -c 'Print :0:IOPlatformSerialNumber' /dev/stdin <<< \"$(/usr/sbin/ioreg -arc IOPlatformExpertDevice -k IOPlatformSerialNumber -d 1)\""}).getFirstOutputLine();
            if (!systemSerialNumber.isEmpty()) {
                if (isLoggedIn) {
                    boolean canConnectToApple = !new CommandReader(new String[]{"/sbin/ping", "-t", "5", "-c", "1", "www.apple.com"}).getFirstOutputLineContaining("1 packets transmitted, 1 ").isEmpty();

                    if (canConnectToApple) {
                        // Only try to get DEP status if we have internet.
                        String possibleAdminUsername = new CommandReader(new String[]{"/usr/bin/id", "-un"}).getFirstOutputLine();
                        List<String> adminUsernames = Arrays.asList(new CommandReader(new String[]{"/bin/bash", "-c", "/usr/libexec/PlistBuddy -c 'Print :dsAttrTypeStandard\\:GroupMembership' /dev/stdin <<< \"$(/usr/bin/dscl -plist . -read /Groups/admin GroupMembership)\" | /usr/bin/awk '(($NF != \"{\") && ($NF != \"root\") && ($NF != \"}\")) { print $NF }'"}).getOutputLines());
                        if (!adminUsernames.isEmpty() && !adminUsernames.contains(possibleAdminUsername)) {
                            possibleAdminUsername = adminUsernames.get(0);
                        }
                        final String shortAdminUsernameForRemoteManagement = possibleAdminUsername;
                        final String fullAdminUsernameForRemoteManagement = new CommandReader(new String[]{"/usr/bin/id", "-F", shortAdminUsernameForRemoteManagement}).getFirstOutputLine();

                        boolean didCancelPasswordPrompt = false;

                        String possibleAdminPasswordForRemoteManagement = "";
                        if (shortAdminUsernameForRemoteManagement.equals("fg-admin") || shortAdminUsernameForRemoteManagement.equals("Staff")) {
                            ArrayList<String> possibleAdminPasswordsForRemoteManagement = new ArrayList<>();
                            possibleAdminPasswordsForRemoteManagement.add(privateStrings.getCurrentFreeGeekPassword());
                            possibleAdminPasswordsForRemoteManagement.add(privateStrings.getPreviousFreeGeekPassword());
                            for (String thisPossibleAdminPasswordForRemoteManagement : possibleAdminPasswordsForRemoteManagement) {
                                if (new CommandReader("/usr/bin/dscl . -authonly '" + shortAdminUsernameForRemoteManagement.replace("'", "'\\''") + "' '" + thisPossibleAdminPasswordForRemoteManagement.replace("'", "'\\''") + "' && echo '<CORRECT>'").getFirstOutputLine().equals("<CORRECT>")) {
                                    possibleAdminPasswordForRemoteManagement = thisPossibleAdminPasswordForRemoteManagement;
                                    break;
                                }
                            }
                        }

                        if (possibleAdminPasswordForRemoteManagement.isEmpty()) {
                            JPasswordField passwordField = new JPasswordField();
                            passwordField.putClientProperty("JTextField.showClearButton", true);

                            Object[] passwordPromptFields = new Object[]{
                                "<html><b>Enter Admin Password for \"" + fullAdminUsernameForRemoteManagement + "\" to <i>Check Remote Management (ADE/DEP/MDM)</i>:</b></html>",
                                passwordField
                            };

                            JOptionPane passwordPromptPane = new JOptionPane(passwordPromptFields, JOptionPane.PLAIN_MESSAGE, JOptionPane.OK_CANCEL_OPTION) {
                                @Override
                                public void selectInitialValue() {
                                    passwordField.requestFocusInWindow();
                                }
                            };

                            passwordPromptPane.createDialog(qaHelperWindow, "QA Helper  —  Admin Password").setVisible(true);

                            if (passwordPromptPane.getValue() != null && (int) passwordPromptPane.getValue() == JOptionPane.OK_OPTION) {
                                possibleAdminPasswordForRemoteManagement = new String(passwordField.getPassword());
                            } else {
                                didCancelPasswordPrompt = true;
                            }
                        }

                        if (!didCancelPasswordPrompt) {
                            final String adminPasswordForRemoteManagement = possibleAdminPasswordForRemoteManagement;
                            if (new CommandReader("/usr/bin/dscl . -authonly '" + shortAdminUsernameForRemoteManagement.replace("'", "'\\''") + "' '" + adminPasswordForRemoteManagement.replace("'", "'\\''") + "' && echo '<CORRECT>'").getFirstOutputLine().equals("<CORRECT>")) {
                                loadingWindow.setLoadingTextAndDisplay("QA Helper is Checking Remote Management", "Working", "LockedWithKey");

                                (new SwingWorker<String[], Void>() {
                                    @Override
                                    protected String[] doInBackground() throws Exception {
                                        // Don't know how to get output as PLIST on El Capitan so just using the text output for easier cross OS support.

                                        // First, try the High Sierra and Newer DEP renew and output command.
                                        String[] remoteManagementOutputLines = new CommandReader(new String[]{"/usr/bin/osascript", "-e", "do shell script \"/usr/bin/profiles renew -type enrollment; /usr/bin/profiles show -type enrollment 2>&1; exit 0\" user name \"" + shortAdminUsernameForRemoteManagement.replace("\\", "\\\\").replace("\"", "\\\"") + "\" password \"" + adminPasswordForRemoteManagement.replace("\\", "\\\\").replace("\"", "\\\"") + "\" with administrator privileges"}).getOutputLines();

                                        if ((remoteManagementOutputLines.length > 0) && !String.join("\n", remoteManagementOutputLines).contains("profiles: invalid option -- t")) { // Invalid option error will happen if running on Sierra or older, so need to fallback to "mdmclient dep nag".
                                            if (remoteManagementOutputLines[0].contains(" - Request too soon.")) { // macOS 12.3 adds client side "profiles show" rate limiting of once every 23 hours: https://derflounder.wordpress.com/2022/03/22/profiles-command-includes-client-side-rate-limitation-for-certain-functions-on-macos-12-3/
                                                if (new File(macBuildInfoPath + ".fgLastRemoteManagementCheckOutput").exists()) {
                                                    String[] cachedRemoteManagementOutputLines = Files.readAllLines(Paths.get(macBuildInfoPath + ".fgLastRemoteManagementCheckOutput")).toArray(String[]::new);
                                                    if (cachedRemoteManagementOutputLines.length > 0) {
                                                        remoteManagementOutputLines = cachedRemoteManagementOutputLines;
                                                    }
                                                }
                                            } else { // So always cache the last "profiles show" output so we can show the last valid results in case it's checked again within 23 hours.
                                                if (!new File(macBuildInfoPath).exists()) {
                                                    new File(macBuildInfoPath).mkdirs();
                                                }
                                                try {
                                                    Runtime.getRuntime().exec(new String[]{"/usr/bin/osascript", "-e", "do shell script (\"printf '%s\\n' \" & (quoted form of \"" + String.join("\n", remoteManagementOutputLines).replace("\\", "\\\\").replace("\"", "\\\"") + "\") & \" > \" & (quoted form of \"" + macBuildInfoPath.replace("\\", "\\\\").replace("\"", "\\\"") + ".fgLastRemoteManagementCheckOutput\")) user name \"" + shortAdminUsernameForRemoteManagement.replace("\\", "\\\\").replace("\"", "\\\"") + "\" password \"" + adminPasswordForRemoteManagement.replace("\\", "\\\\").replace("\"", "\\\"") + "\" with administrator privileges"});
                                                } catch (IOException cacheRemoteManagementOutputException) {
                                                    if (isTestMode) {
                                                        System.out.println("cacheRemoteManagementOutputException: " + cacheRemoteManagementOutputException);
                                                    }
                                                }
                                            }
                                        } else {
                                            for (int i = 0; i < 5; i++) {
                                                // Next, try the El Capitan and Sierra DEP renew and output command.
                                                // Sometimes fails with segmentation fault or can't connect.
                                                String[] mdmclientDepNagReplyLines = new CommandReader(new String[]{"/usr/bin/osascript", "-e", "do shell script \"/usr/libexec/mdmclient dep nag 2>&1\" user name \"" + shortAdminUsernameForRemoteManagement.replace("\\", "\\\\").replace("\"", "\\\"") + "\" password \"" + adminPasswordForRemoteManagement.replace("\\", "\\\\").replace("\"", "\\\"") + "\" with administrator privileges"}).getOutputLines();

                                                if (mdmclientDepNagReplyLines.length > 0 && mdmclientDepNagReplyLines[0].contains("Activation record: {")) {
                                                    remoteManagementOutputLines = mdmclientDepNagReplyLines;
                                                    break;
                                                } else {
                                                    TimeUnit.SECONDS.sleep(i);
                                                }
                                            }
                                        }

                                        return remoteManagementOutputLines;
                                    }

                                    @Override
                                    protected void done() {
                                        loadingWindow.closeWindow();

                                        try {
                                            String[] remoteManagementOutputLines = get();

                                            if ((remoteManagementOutputLines.length > 0) && (!remoteManagementOutputLines[0].contains("Error fetching Device Enrollment configuration") || remoteManagementOutputLines[0].contains("Client is not DEP enabled.") || remoteManagementOutputLines[0].contains("Bad response from apsd: Connection interrupted"))) { // NOTE: This "Bad response from apsd" error will often be returned when the device IS NOT Remote Managed, so don't show it as an error so that technicians don't get confused (it will be considered success below since the output will only contain 2 lines).
                                                if (remoteManagementOutputLines.length > 3) {
                                                    String remoteManagementOrganizationName = "UNKNOWN ORGANIZATION";
                                                    ArrayList<String> remoteManagementOrganizationContactInfo = new ArrayList<>();

                                                    LinkedHashMap<String, String> logRemoteManagedMacParameters = new LinkedHashMap<>();
                                                    logRemoteManagedMacParameters.put("source", "QA Helper");
                                                    logRemoteManagedMacParameters.put("pid", pid);
                                                    logRemoteManagedMacParameters.put("model", computerSpecs.getMacShortModelName() + " (" + computerSpecs.getMacModelIdentifier() + ")");
                                                    logRemoteManagedMacParameters.put("serial", computerSpecs.getSerial());

                                                    for (String thisRemoteManagementOutputLine : remoteManagementOutputLines) {
                                                        if (thisRemoteManagementOutputLine.contains("OrganizationName = ")) {
                                                            remoteManagementOrganizationName = thisRemoteManagementOutputLine.substring(thisRemoteManagementOutputLine.indexOf(" = ") + 3, thisRemoteManagementOutputLine.lastIndexOf(";")).replaceAll("^[ \"]+", "").replaceAll("[ \"]+$", ""); // Trim all leading and trailing spaces and quotes.
                                                            logRemoteManagedMacParameters.put("organization", remoteManagementOrganizationName);
                                                        } else if (thisRemoteManagementOutputLine.contains("OrganizationDepartment = ") || thisRemoteManagementOutputLine.contains("OrganizationEmail = ") || thisRemoteManagementOutputLine.contains("OrganizationSupportEmail = ") || thisRemoteManagementOutputLine.contains("OrganizationPhone = ") || thisRemoteManagementOutputLine.contains("OrganizationSupportPhone = ")) {
                                                            String thisRemoteManagementContantInfo = thisRemoteManagementOutputLine.substring(thisRemoteManagementOutputLine.indexOf(" = ") + 3, thisRemoteManagementOutputLine.lastIndexOf(";")).replaceAll("^[ \"]+", "").replaceAll("[ \"]+$", ""); // Trim all leading and trailing spaces and quotes.
                                                            if (!thisRemoteManagementContantInfo.isEmpty() && !remoteManagementOrganizationContactInfo.contains(thisRemoteManagementContantInfo)) {
                                                                remoteManagementOrganizationContactInfo.add(thisRemoteManagementContantInfo);
                                                            }

                                                            String logKeyName = "department";
                                                            if (thisRemoteManagementOutputLine.contains("OrganizationEmail = ")) {
                                                                logKeyName = "email";
                                                            } else if (thisRemoteManagementOutputLine.contains("OrganizationSupportEmail = ")) {
                                                                logKeyName = "support_email";
                                                            } else if (thisRemoteManagementOutputLine.contains("OrganizationPhone = ")) {
                                                                logKeyName = "phone";
                                                            } else if (thisRemoteManagementOutputLine.contains("OrganizationSupportPhone = ")) {
                                                                logKeyName = "support_phone";
                                                            }
                                                            logRemoteManagedMacParameters.put(logKeyName, thisRemoteManagementContantInfo);
                                                        }
                                                    }

                                                    for (;;) {
                                                        String logRemoteManagedMacResult = new WebReader(privateStrings.getLogRemoteManagedMacURL(), logRemoteManagedMacParameters, 15).getFirstOutputLine();
                                                        if (logRemoteManagedMacResult.endsWith("LOGGED")) {
                                                            break;
                                                        }

                                                        if (logRemoteManagedMacResult.isEmpty()) {
                                                            logRemoteManagedMacResult = "NO RESPONSE";
                                                        }

                                                        sendErrorEmail("Failed to Log Remote Managed Mac - " + logRemoteManagedMacResult);

                                                        playAlertSound("error");

                                                        JTextArea logRemoteManagedMacErrorTextArea = new JTextArea(5, 100);
                                                        logRemoteManagedMacErrorTextArea.setText(logRemoteManagedMacResult);
                                                        logRemoteManagedMacErrorTextArea.setEditable(false);
                                                        logRemoteManagedMacErrorTextArea.setLineWrap(true);
                                                        logRemoteManagedMacErrorTextArea.setWrapStyleWord(true);
                                                        logRemoteManagedMacErrorTextArea.setFont(new Font(Font.MONOSPACED, lblVersion.getFont().getStyle(), logRemoteManagedMacErrorTextArea.getFont().getSize()));
                                                        JScrollPane logRemoteManagedMacErrorScrollPane = new JScrollPane(logRemoteManagedMacErrorTextArea);

                                                        JOptionPane.showOptionDialog(qaHelperWindow, new Object[]{"<html><b>Failed to Log Remote Managed Mac</b><br/><br/></html>",
                                                            logRemoteManagedMacErrorScrollPane,
                                                            "<html><br/><b>You must be connected to the internet to be able to log this Remote Managed Mac.</b><br/><br/>"
                                                            + "Make sure you're connected to either a Wi-Fi network or plugged in with an Ethernet cable.<br/>"
                                                            + "If this Mac does not have an Ethernet port, use a Thunderbolt or USB to Ethernet adapter.<br/>"
                                                            + "Once you're connected to Wi-Fi or Ethernet, it may take a few moments for the internet connection to be established.<br/>"
                                                            + "If it takes more than a few minutes, consult an instructor or inform Free Geek I.T.</html>"},
                                                                "QA Helper  —  Log Remote Managed Mac Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE, null, new String[]{"Try Again"}, "Try Again");

                                                        TimeUnit.SECONDS.sleep(1);
                                                    }

                                                    String remoteManagementOrganizationContactInfoDisplay = "<i>NO CONTACT INFORMATION</i>";
                                                    if (!remoteManagementOrganizationContactInfo.isEmpty()) {
                                                        remoteManagementOrganizationContactInfoDisplay = String.join("</li><li>", remoteManagementOrganizationContactInfo);
                                                    }

                                                    playAlertSound("error");
                                                    JOptionPane.showMessageDialog(qaHelperWindow, "<html><center>"
                                                            + new TwemojiImage("Warning", qaHelperWindow).toImgTag("left") + " <b style='color: " + warningColorHTML + "'>REMOTE MANAGEMENT IS ENABLED ON THIS MAC</b> " + new TwemojiImage("Warning", qaHelperWindow).toImgTag("right")
                                                            + "<br/><br/>"
                                                            + new TwemojiImage("CrossMark", qaHelperWindow).toImgTag("left") + " <b style='color: " + errorColorHTML + "'><i>MACS WITH REMOTE MANAGEMENT ENABLED CANNOT BE SOLD</i></b> " + new TwemojiImage("CrossMark", qaHelperWindow).toImgTag("right")
                                                            + "</center><br/><br/>"
                                                            + new TwemojiImage("Locked", qaHelperWindow).toImgTag("left") + " THIS MAC IS MANAGED BY <b>" + remoteManagementOrganizationName + "</b>"
                                                            + "<br/><br/>"
                                                            + new TwemojiImage("Key", qaHelperWindow).toImgTag("left") + " ONLY <b>" + remoteManagementOrganizationName + "</b> CAN DISABLE REMOTE MANAGEMENT"
                                                            + "<br/><br/>"
                                                            + new TwemojiImage("Telephone", qaHelperWindow).toImgTag("left") + " <b>" + remoteManagementOrganizationName + "</b> MUST BE CONTACTED TO DISABLE REMOTE MANAGEMENT:"
                                                            + "<ul style='margin-left: 20px'><li>" + remoteManagementOrganizationContactInfoDisplay + "</li></ul>"
                                                            + "<br/>"
                                                            + new TwemojiImage("IDButton", qaHelperWindow).toImgTag("left") + " The Serial Number for this Mac is <b>" + escapeSingleLineSpecStringForHTML(computerSpecs.getFullSerial()) + "</b>"
                                                            + "<br/><br/><br/><center>"
                                                            + new TwemojiImage("Memo", qaHelperWindow).toImgTag("left") + " <i>THIS MAC AND CONTACT INFO HAS BEEN LOGGED</i> " + new TwemojiImage("CheckMarkButton", qaHelperWindow).toImgTag("right")
                                                            + "</center></html>", "QA Helper  —  Check Remote Management", JOptionPane.WARNING_MESSAGE, new TwemojiImage("LockedWithKey", qaHelperWindow).toImageIcon());
                                                } else {
                                                    // TODO: Mark as removed if was previously Remote Managed like the other AppleScripts do now?

                                                    playAlertSound("success");
                                                    JOptionPane.showMessageDialog(qaHelperWindow, "<html>" + new TwemojiImage("CheckMarkButton", qaHelperWindow).toImgTag("left") + " <b style='color: " + successColorHTML + "'>Remote Management <i>IS NOT</i> Enabled</b></html>", "QA Helper  —  Check Remote Management", JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("Unlocked", qaHelperWindow).toImageIcon(32));

                                                    if (!isRemoteManagementVerified && btnVerifyRemoteManagement.isVisible() && btnVerifyRemoteManagement.isEnabled()) {
                                                        btnVerifyRemoteManagementActionPerformed(null);
                                                    }
                                                }
                                            } else {
                                                playAlertSound("error");
                                                sendErrorEmail("ERROR CHECKING REMOTE MANAGEMENT\n\nREMOTE MANAGEMENT CHECK OUTPUT:\n" + String.join("\n", remoteManagementOutputLines));
                                                JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>ERROR CHECKING REMOTE MANAGEMENT</b><br/><br/><u>REMOTE MANAGEMENT CHECK OUTPUT:</u><br/>" + String.join("<br/>", remoteManagementOutputLines) + "<br/><br/><i>Please Try Again</i></html>", "QA Helper  —  Check Remote Management Error", JOptionPane.ERROR_MESSAGE);
                                            }
                                        } catch (HeadlessException | InterruptedException | ExecutionException checkRemoteManagementException) {
                                            if (isTestMode) {
                                                System.out.println("checkRemoteManagementException: " + checkRemoteManagementException);
                                            }
                                            playAlertSound("error");
                                            sendErrorEmail("UNKNOWN ERROR CHECKING REMOTE MANAGEMENT");
                                            JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>UNKNOWN ERROR CHECKING REMOTE MANAGEMENT</b><br/><br/><i>Please Try Again</i></html>", "QA Helper  —  Check Remote Management Error", JOptionPane.ERROR_MESSAGE);
                                        }

                                        setActionsEnabled(true);
                                    }
                                }).execute();
                            } else {
                                playAlertSound("error");
                                JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Incorrect Admin Password for \"" + fullAdminUsernameForRemoteManagement + "\"</b></html>", "QA Helper  —  Incorrect Password", JOptionPane.WARNING_MESSAGE);
                                setActionsEnabled(true);
                            }
                        } else {
                            setActionsEnabled(true);
                            focusNextTestTaskVerifyButton(btnCheckRemoteManagement);
                        }
                    } else {
                        playAlertSound("error");
                        JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Internet Is Required to Check Remote Management</b><br/><br/><i>Failed to Connect to Apple.com</i></html>", "QA Helper  —  Check Remote Management Error", JOptionPane.WARNING_MESSAGE);
                        setActionsEnabled(true);
                    }
                } else {
                    playAlertSound("beep");
                    JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>You Must <i>LOG IN</i> to Check Remote Management</b></html>", "QA Helper  —  Log In to Check Remote Management", JOptionPane.WARNING_MESSAGE, new TwemojiImage("LockedWithKey", qaHelperWindow).toImageIcon(32));
                    setActionsEnabled(true);
                    focusNextTestTaskVerifyButton(btnCheckRemoteManagement);
                }
            } else {
                playAlertSound("beep");
                JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Somehow, this Mac <i>DOES NOT</i> have a System Serial Number.</b><br/><br/><i>Without a System Serial Number, Remote Management cannot be checked.</i><br/><br/>But also, without a System Serial Number, it is <i>IMPOSSIBLE</i> for Remote Management to be enabled.</html>", "QA Helper  —  Check Remote Management Impossible", JOptionPane.WARNING_MESSAGE, new TwemojiImage("ExclamationQuestionMark", qaHelperWindow).toImageIcon(32));
                setActionsEnabled(true);
            }
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnCheckRemoteManagementActionPerformed

    private void btnVerifyRemoteManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifyRemoteManagementActionPerformed
        if ((actionsEnabled || (evt == null)) && isMacOS && isLoggedIn) {
            setActionsEnabled(false);

            if (JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>" + ((evt == null) ? "Would you like " : "Are you sure you want ") + "to <i>" + (isRemoteManagementVerified ? "UNVERIFY" : "verify") + "</i> that remote management is not enabled?</b></html>", "QA Helper  —  Confirm " + (isRemoteManagementVerified ? "Unverify" : "Verify") + " Remote Management", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage((isRemoteManagementVerified ? "CrossMark" : "CheckBoxWithCheck"), qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                isRemoteManagementVerified = !isRemoteManagementVerified;

                writeToHelperLogFile("Task: Remote Management " + (isRemoteManagementVerified ? "Verified" : "UNVERIFIED"));

                btnVerifyRemoteManagement.setText((isRemoteManagementVerified ? "Verified" : "Verify"));
                btnVerifyRemoteManagement.setFont(btnVerifyRemoteManagement.getFont().deriveFont((isRemoteManagementVerified ? Font.BOLD : lblVersion.getFont().getStyle())));
                btnVerifyRemoteManagement.setForeground(isRemoteManagementVerified ? verifiedColor : defaultColor);
                btnVerifyRemoteManagement.setBorderPainted(!isRemoteManagementVerified);

                new LinuxAutoScripts("Remote Management " + (isRemoteManagementVerified ? "Verified" : "Unverified"), adminPassword);

                focusNextTestTaskVerifyButton(btnVerifyRemoteManagement);
            } else {
                focusNextTestTaskVerifyButton(btnCheckRemoteManagement);
            }

            setActionsEnabled(true);
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnVerifyRemoteManagementActionPerformed

    private void btnSetConditionAndNotesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetConditionAndNotesActionPerformed
        if (actionsEnabled && isLoggedIn && !isReloading) {
            setActionsEnabled(false);

            ArrayList<String> displayConditionsAndGrades = new ArrayList<>();
            ArrayList<String> fgConditionGrades = new ArrayList<>(fgConditionGradesAndDescriptions.keySet());
            int currentConditionIndex = -1;

            if (allowSettingConditionGrade) {
                fgConditionGradesAndDescriptions.forEach((thisConditionGrade, thisConditionDescription) -> {
                    displayConditionsAndGrades.add("<html><b>" + thisConditionGrade + "</b>" + (thisConditionDescription.isEmpty() ? "" : " &nbsp;&mdash;&nbsp; " + thisConditionDescription) + "</html>");
                });

                currentConditionIndex = fgConditionGrades.indexOf(currentConditionGrade);
                if (currentConditionIndex < 0) {
                    currentConditionIndex = 0;
                }
            }

            JComboBox conditionGradesComboBox = new JComboBox<>(displayConditionsAndGrades.toArray(String[]::new));

            if (currentConditionIndex >= 0) {
                conditionGradesComboBox.setSelectedIndex(currentConditionIndex);
            }

            JTextArea notesTextArea = new JTextArea(10, 60);
            notesTextArea.setText(currentNotes);
            notesTextArea.setEditable(true);
            notesTextArea.setLineWrap(true);
            notesTextArea.setWrapStyleWord(true);
            notesTextArea.setFont(new Font(Font.MONOSPACED, lblVersion.getFont().getStyle(), notesTextArea.getFont().getSize()));
            JScrollPane notesScrollPane = new JScrollPane(notesTextArea);

            String conditionAndNotesOrOnlyNotes = (allowSettingConditionGrade ? "Condition and " : "") + "Notes";

            JOptionPane notesPromptPane = new JOptionPane(new Object[]{
                (allowSettingConditionGrade ? "<html><b>Condition Grade:</b></html>" : ""),
                (allowSettingConditionGrade ? conditionGradesComboBox : ""),
                (allowSettingConditionGrade ? "<html><div style='font-size: smaller'>Current Condition Grade: <b>" + currentConditionGrade + "</b></div></html>" : ""),
                (allowSettingConditionGrade ? " " : ""),
                "<html><b>Notes:</b></html>",
                notesScrollPane,
                "<html>"
                + new TwemojiImage("IndexPointingUp", qaHelperWindow).toImgTag("left") + " <b style='color: " + attentionColorHTML + "'><i>These notes are included in sales listings and shown to customers.</i></b>"
                + "<br/>" + new TwemojiImage("BackhandIndexPointingRight", qaHelperWindow).toImgTag("left") + " <b style='color: " + successColorHTML + "'>Please write notes that are <u>professional</u> and <u>accurate</u>.</b>"
                + "</html>"
            }, JOptionPane.PLAIN_MESSAGE, JOptionPane.OK_CANCEL_OPTION, new TwemojiImage("Memo", qaHelperWindow).toImageIcon(48), new String[]{"Save " + conditionAndNotesOrOnlyNotes, "Cancel"}, "Save " + conditionAndNotesOrOnlyNotes) {
                @Override
                public void selectInitialValue() {
                    if (allowSettingConditionGrade) {
                        conditionGradesComboBox.requestFocusInWindow();
                    } else {
                        notesTextArea.requestFocusInWindow();
                    }
                }
            };

            notesPromptPane.createDialog(qaHelperWindow, "QA Helper  —  " + conditionAndNotesOrOnlyNotes + " for " + pid).setVisible(true);

            if (notesPromptPane.getValue() != null && notesPromptPane.getValue().equals("Save " + conditionAndNotesOrOnlyNotes)) {
                String newConditionGrade = (allowSettingConditionGrade ? fgConditionGrades.get(conditionGradesComboBox.getSelectedIndex()) : currentConditionGrade);
                String newNotes = notesTextArea.getText().replace("<br/>", "\n").replace("<br />", "\n").replace("<br>", "\n").trim().replace("    ", "\t");

                if (!currentConditionGrade.equals(newConditionGrade) || !currentNotes.equals(newNotes) || lastConditionAndNotesSaveFailed) {
                    currentConditionGrade = newConditionGrade;
                    currentNotes = newNotes;
                    conditionAndNotesUpdated = true;
                    lastConditionAndNotesSaveFailed = true;

                    loadingWindow.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
                    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

                    loadingWindow.setLoadingTextAndDisplay("QA Helper is Saving " + conditionAndNotesOrOnlyNotes, "Working", "Memo");

                    (new SwingWorker<String[], Void>() {
                        @Override
                        protected String[] doInBackground() throws Exception {
                            return (logComputerSpecs() ? loadStatusHistory(false) : null);
                        }

                        @Override
                        protected void done() {
                            try {
                                loadingWindow.closeWindow();

                                String[] statusAndTech = get();

                                if (statusAndTech != null) {
                                    displayComputerSpecs(statusAndTech);

                                    lastConditionAndNotesSaveFailed = false;

                                    playAlertSound("success");
                                    JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Successfully Saved " + conditionAndNotesOrOnlyNotes + "</b></html>", "QA Helper  —  Saved " + conditionAndNotesOrOnlyNotes, JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("Memo", qaHelperWindow).toImageIcon(32));
                                } else {
                                    playAlertSound("error");
                                    JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Failed to Save " + conditionAndNotesOrOnlyNotes + "</b></html>", "QA Helper  —  Error Saving " + conditionAndNotesOrOnlyNotes, JOptionPane.ERROR_MESSAGE);
                                }
                            } catch (HeadlessException | InterruptedException | ExecutionException saveConditionAndNotesException) {
                                if (isTestMode) {
                                    System.out.println("saveConditionAndNotesException: " + saveConditionAndNotesException);
                                }
                            }

                            loadingWindow.closeWindow();

                            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                            loadingWindow.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                            setActionsEnabled(true);

                            focusNextTestTaskVerifyButton(btnDoneTesting);
                        }
                    }).execute();
                } else {
                    setActionsEnabled(true);

                    focusNextTestTaskVerifyButton(btnDoneTesting);
                }
            } else {
                setActionsEnabled(true);

                focusNextTestTaskVerifyButton(btnDoneTesting);
            }
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnSetConditionAndNotesActionPerformed

    private void btnReloadSpecsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReloadSpecsActionPerformed
        if (actionsEnabled)
            reload();
        else
            playAlertSound("beep");
    }//GEN-LAST:event_btnReloadSpecsActionPerformed

    private void btnSaveOrPrintSpecsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveOrPrintSpecsActionPerformed
        if ((actionsEnabled || (evt == null)) && !isWindowsPE && (computerSpecs != null)) {
            setActionsEnabled(false);

            ArrayList<String> storageArray = computerSpecs.getStorageArray();
            ArrayList<String> storageSerialsArray = computerSpecs.getStorageSerialsArray();

            ArrayList<String> screenErrorArray = computerSpecs.getScreenErrorArray();

            ArrayList<String> gpuArray = computerSpecs.getGPUarray();
            ArrayList<String> gpuErrorArray = computerSpecs.getGPUerrorArray();

            ArrayList<String> audioArray = computerSpecs.getAudioArray();
            ArrayList<String> audioErrorArray = computerSpecs.getAudioErrorArray();

            ArrayList<String> wirelessArray = computerSpecs.getWirelessArray();
            ArrayList<String> wirelessErrorArray = computerSpecs.getWirelessErrorArray();

            ArrayList<String> discDriveArray = computerSpecs.getDiscDriveArray();

            ArrayList<String> batteryHealthArray = computerSpecs.getBatteryHealthArray();

            String specsToSave = (isLoggedIn ? ("         ID: " + pid + "\n\n") : "")
                    + "Device Type: " + manualDeviceType + "\n"
                    + "      Brand: " + (deviceTypeIsMotherboard ? computerSpecs.getFullMotherboardBrand() : computerSpecs.getFullBrand()) + "\n"
                    + "      Model: " + (deviceTypeIsMotherboard ? computerSpecs.getFullMotherboardModel() : computerSpecs.getFullModel()) + "\n"
                    + "     Serial: " + (deviceTypeIsMotherboard ? computerSpecs.getFullMotherboardSerial() : computerSpecs.getFullSerial()) + "\n"
                    + ((isLinuxLiveBoot || isMacTestBoot || deviceTypeIsMotherboard) ? "" : "         OS: " + computerSpecs.getFullOS() + "\n")
                    + "\n"
                    + "        CPU: " + computerSpecs.getFullCPU() + "\n"
                    + "        RAM: " + computerSpecs.getFullRAM() + "\n"
                    + (deviceTypeHasScreen
                            ? ("     Screen: " + (screenErrorArray.isEmpty() ? "" : "• ") + computerSpecs.getFullScreenSize()
                            + (screenErrorArray.isEmpty() ? "" : ("\n             • " + String.join("\n             • ", screenErrorArray))) + "\n") : "")
                    + (deviceTypeIsMotherboard
                            ? ""
                            : "        GPU: " + (((gpuArray.size() > 1) || !gpuErrorArray.isEmpty())
                            ? ("• " + (gpuArray.isEmpty() ? "N/A" : String.join("\n             • ", gpuArray)))
                            : computerSpecs.getFullGPU())
                            + (gpuErrorArray.isEmpty() ? "" : ("\n             • " + String.join("\n             • ", gpuErrorArray))) + "\n")
                    + "      Audio: " + (((audioArray.size() > 1) || !audioErrorArray.isEmpty())
                    ? ("• " + (audioArray.isEmpty() ? "N/A" : String.join("\n             • ", audioArray)))
                    : computerSpecs.getFullAudio())
                    + (audioErrorArray.isEmpty() ? "" : ("\n             • " + String.join("\n             • ", audioErrorArray))) + "\n"
                    + "   Wireless: " + (((wirelessArray.size() > 1) || !wirelessErrorArray.isEmpty())
                    ? ("• " + (wirelessArray.isEmpty() ? "N/A" : String.join("\n             • ", wirelessArray)))
                    : computerSpecs.getWireless())
                    + (wirelessErrorArray.isEmpty() ? "" : ("\n             • " + String.join("\n             • ", wirelessErrorArray))) + "\n";

            if (!deviceTypeIsMotherboard && !discDriveArray.isEmpty()) {
                specsToSave += "\n"
                        + " Disc Drive: " + ((discDriveArray.size() > 1)
                        ? ("• " + String.join("\n             • ", discDriveArray))
                        : computerSpecs.getFullDiscDrive()) + "\n"
                        + "  CD Burner: " + (computerSpecs.discDriveCanBurnCDs() ? "Yes" : "No") + "\n"
                        + " DVD Burner: " + (computerSpecs.discDriveCanBurnDVDs() ? "Yes" : "No") + "\n";
            }

            if (!deviceTypeIsMotherboard && (deviceTypeIsLaptop || !batteryHealthArray.isEmpty())) {
                ArrayList<String> batteryHealthWarningArray = computerSpecs.getBatteryHealthWarningArray();
                ArrayList<String> batteryHealthErrorArray = computerSpecs.getBatteryHealthErrorArray();

                specsToSave += "\n"
                        + " Battery Health: " + ((batteryHealthArray.size() > 1)
                        ? ("• " + String.join("\n                 • ", batteryHealthArray))
                        : computerSpecs.getBatteryHealthString()) + "\n"
                        + "Battery Warning: " + (batteryHealthWarningArray.isEmpty()
                        ? "None"
                        : ((batteryHealthWarningArray.size() > 1)
                        ? ("• " + String.join("\n                 • ", batteryHealthWarningArray))
                        : batteryHealthWarningArray.get(0))) + "\n"
                        + "  Battery Error: " + (batteryHealthErrorArray.isEmpty()
                        ? "None"
                        : ((batteryHealthErrorArray.size() > 1)
                        ? ("• " + String.join("\n                 • ", batteryHealthErrorArray))
                        : batteryHealthErrorArray.get(0))) + "\n"
                        + (computerSpecs.getPowerAdapter().isEmpty() ? "" : ("  Power Adapter: " + computerSpecs.getPowerAdapter() + "\n"));
            }

            if (!deviceTypeIsMotherboard) {
                specsToSave += "\n"
                        + "Storage: " + ((storageArray.size() > 1)
                        ? ("• " + String.join("\n         • ", storageArray))
                        : computerSpecs.getFullStorage()) + "\n"
                        + "Storage Serial: " + ((storageSerialsArray.size() > 1)
                        ? ("• " + String.join("\n                • ", storageSerialsArray))
                        : computerSpecs.getFullStorageSerial()) + "\n"
                        + "Storage Health Warning: " + (computerSpecs.getDriveHealthWarning() ? "Yes" : "No") + "\n"
                        + (computerSpecs.getDriveHealth().equals("N/A")
                        ? ""
                        : ("Storage Health:" + "\n"
                        + computerSpecs.getDriveHealth() + "\n"));
            }

            if (isLoggedIn) {
                specsToSave += "\n"
                        + (allowSettingConditionGrade ? ("Condition Grade: " + (currentConditionGrade.isEmpty() ? "N/A" : (currentConditionGrade + ((fgConditionGradesAndDescriptions.containsKey(currentConditionGrade) && !fgConditionGradesAndDescriptions.get(currentConditionGrade).isEmpty()) ? " (" + fgConditionGradesAndDescriptions.get(currentConditionGrade) + ")" : ""))) + "\n") : "")
                        + "Notes:" + (currentNotes.isEmpty() ? " N/A" : "\n" + currentNotes) + "\n";
            }

            boolean onlyOfferToPrint = (isLinuxUbiquityMode || (evt == null));

            for (;;) {
                boolean saveSpecs = false;

                boolean printSpecs = false;
                String selectedPrinterName = "";
                String selectedPrinterIP = "";
                if (isLoggedIn && !isWindows && loggedInUserInfo.containsKey("printerIPs")) {
                    // Don't know how to send raw data to a printer IP (without manually adding the printer) on Windows,
                    // but this feature is really only for use by PCs for People on macOS and Linux, and they have other specs sheets for Windows.
                    // At Free Geek, we use the FG Specs website to print specs labels, so this feature won't be used at Free Geek anyways.

                    String[] printerIPsArray = loggedInUserInfo.get("printerIPs").split("\\|");

                    ArrayList<String> printersList = new ArrayList<>();
                    for (String thisPrinterInfo : printerIPsArray) {
                        thisPrinterInfo = thisPrinterInfo.trim();

                        if (thisPrinterInfo.contains(":")) {
                            String[] thisPrinterNameAndIP = thisPrinterInfo.split(":");
                            if (thisPrinterNameAndIP.length == 2) {
                                String thisPrinterName = thisPrinterNameAndIP[0].trim();
                                String thisPrinterIP = thisPrinterNameAndIP[1].trim();

                                if (thisPrinterIP.matches("^[0-9]+[.][0-9]+[.][0-9]+[.][0-9]+$") && !thisPrinterIP.equals("0.0.0.0")) {
                                    if (thisPrinterName.isEmpty()) {
                                        printersList.add(thisPrinterIP);
                                    } else {
                                        printersList.add(thisPrinterName + " (" + thisPrinterIP + ")");
                                    }
                                } else {
                                    printersList.add("INVALID PRINTER: " + thisPrinterInfo);
                                }
                            }
                        } else if (thisPrinterInfo.matches("^[0-9]+[.][0-9]+[.][0-9]+[.][0-9]+$") && !thisPrinterInfo.equals("0.0.0.0")) {
                            printersList.add(thisPrinterInfo);
                        } else if (!thisPrinterInfo.isEmpty()) {
                            printersList.add("INVALID PRINTER: " + thisPrinterInfo);
                        }
                    }

                    if (!printersList.isEmpty()) {
                        JComboBox printersComboBox = new JComboBox<>(printersList.toArray(String[]::new));

                        ArrayList<String> saveOrPrintSpecsDialogButtons = new ArrayList<>();
                        saveOrPrintSpecsDialogButtons.add("Print Specs");
                        if (!onlyOfferToPrint) {
                            saveOrPrintSpecsDialogButtons.add("Save Specs to Desktop");
                        }
                        saveOrPrintSpecsDialogButtons.add("Cancel");

                        int saveOrPrintSpecsPromptResponse = JOptionPane.showOptionDialog(qaHelperWindow, new Object[]{"<html><b>Would you like to " + (onlyOfferToPrint ? "" : "save or ") + "print the specs?</b></html>",
                            " ",
                            "<html>Select Printer:</html>",
                            printersComboBox
                        }, "QA Helper  —  Confirm " + (onlyOfferToPrint ? "" : "Save or ") + "Print Specs", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage("Memo", qaHelperWindow).toImageIcon(32), saveOrPrintSpecsDialogButtons.toArray(), saveOrPrintSpecsDialogButtons.get(0));

                        String saveOrPrintSpecsPromptResponseString = "Cancel";
                        if (saveOrPrintSpecsPromptResponse > -1) {
                            saveOrPrintSpecsPromptResponseString = saveOrPrintSpecsDialogButtons.get(saveOrPrintSpecsPromptResponse);
                        }

                        if (saveOrPrintSpecsPromptResponseString.equals("Print Specs")) {
                            printSpecs = true;

                            String selectedPrinterString = printersComboBox.getSelectedItem().toString();

                            if (selectedPrinterString.contains(".")) {
                                if (selectedPrinterString.contains(" (")) {
                                    int lastOpenParenIndex = selectedPrinterString.lastIndexOf(" (");
                                    selectedPrinterName = selectedPrinterString.substring(0, lastOpenParenIndex);
                                    selectedPrinterIP = selectedPrinterString.substring(lastOpenParenIndex + 2, selectedPrinterString.lastIndexOf(")"));
                                } else {
                                    selectedPrinterIP = selectedPrinterString;
                                }

                                if (!selectedPrinterIP.matches("^[0-9]+[.][0-9]+[.][0-9]+[.][0-9]+$") || selectedPrinterIP.equals("0.0.0.0")) {
                                    selectedPrinterIP = "";
                                }
                            }
                        } else if (saveOrPrintSpecsPromptResponseString.equals("Save Specs to Desktop")) {
                            saveSpecs = true;
                        }
                    } else {
                        playAlertSound("beep");

                        if (!onlyOfferToPrint) {
                            saveSpecs = true;
                        }
                    }
                } else if (!onlyOfferToPrint) {
                    saveSpecs = true;
                }

                if (printSpecs) {
                    if (selectedPrinterIP.isEmpty()) {
                        playAlertSound("error");
                    } else {
                        String specsToPrint = specsToSave.replace("•", "-").replace("…", "..."); // RAW printing mangles rendering multi-byte characters, so replace the multi-byte characters that are commonly used.

                        String pingPrinterResponse = new CommandReader((isMacOS ? "/usr" : "") + "/bin/nc -zvw 2" + (isMacOS ? " -G 2" : "") + " '" + selectedPrinterIP.replace("'", "'\\''") + "' 9100 2>&1").getOutputLinesAsString().trim();
                        String sendToPrinterResponse = new CommandReader("printf '%s\\n' '" + specsToPrint.replace("'", "'\\''") + "' | /usr/bin/fold -sw 70 | " + (isMacOS ? "/usr" : "") + "/bin/sed 's/$/\\r/' | " + (isMacOS ? "/usr" : "") + "/bin/nc -w 5" + (isMacOS ? " -G 5" : "") + " '" + selectedPrinterIP.replace("'", "'\\''") + "' 9100 2>&1 && echo 'SENT TO PRINTER'").getOutputLinesAsString().trim();
                        // NOTE: On Linux Mint 20 (before "usrmerge"), "nc" and "sed" were in "/bin" and "fold" was in "/usr/bin".

                        if (sendToPrinterResponse.endsWith("SENT TO PRINTER")) {
                            playAlertSound("success");
                            JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>The specs have been sent to printer:</b><br/><br/>" + (selectedPrinterName.isEmpty() ? selectedPrinterIP : (selectedPrinterName + " (" + selectedPrinterIP + ")")) + "</html>", "QA Helper  —  Successfully Printed Specs", JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("Memo", qaHelperWindow).toImageIcon(32));
                            break;
                        } else {
                            if (pingPrinterResponse.isEmpty()) {
                                pingPrinterResponse = "ERROR CONTACTING PRINTER";
                            }

                            if (sendToPrinterResponse.isEmpty()) {
                                sendToPrinterResponse = pingPrinterResponse;
                            } else {
                                sendToPrinterResponse += "\n\n" + pingPrinterResponse;
                            }

                            playAlertSound("error");
                            int printSpecsErrorResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html><b>ERROR SENDING SPECS TO PRINTER:</b><br/>" + (selectedPrinterName.isEmpty() ? selectedPrinterIP : (selectedPrinterName + " (" + selectedPrinterIP + ")")) + "<br/><br/><pre>" + sendToPrinterResponse + "</pre><br/>" + (isMacOS ? "<b><i>QA Helper must be granted access to the local network to be able to print to local printers.</i></b><br/><br/>" : "") + "<i>Please Try Again</i></html>", "QA Helper  —  Print Specs Error", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, null, new String[]{"Try Again", "Cancel"}, "Try Again");
                            if (printSpecsErrorResponse != JOptionPane.YES_OPTION) {
                                break;
                            }
                        }
                    }
                } else if (saveSpecs) {
                    String saveSpecsDirectoryPath = System.getProperty("user.home") + (isWindows ? "\\" : "/") + "Desktop" + (isWindows ? "\\" : "/");

                    if (isWindows && !new File(saveSpecsDirectoryPath).exists()) {
                        saveSpecsDirectoryPath = (new File(System.getProperty("user.home") + "\\OneDrive\\Desktop").exists()
                                ? System.getProperty("user.home") + "\\OneDrive\\Desktop\\"
                                : "\\Install\\");
                    }

                    String saveSpecsFilename = "QA Helper Specs.txt";

                    File saveSpecsDirectory = new File(saveSpecsDirectoryPath);
                    saveSpecsDirectory.mkdirs();
                    File saveSpecsFile = new File(saveSpecsDirectoryPath, saveSpecsFilename);

                    boolean didSaveSpecsFile = false;
                    try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(saveSpecsFile))) {
                        bufferedWriter.write(specsToSave);

                        didSaveSpecsFile = true;
                    } catch (Exception writeSpecsFileException) {
                        if (isTestMode) {
                            System.out.println("writeSpecsFileException: " + writeSpecsFileException);
                        }
                    }

                    if (didSaveSpecsFile) {
                        playAlertSound("success");
                        JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>The specs have been saved into the following file:</b><br/><br/>" + saveSpecsFile.getPath() + "</html>", "QA Helper  —  Save Specs", JOptionPane.INFORMATION_MESSAGE, new TwemojiImage("Memo", qaHelperWindow).toImageIcon(32));
                        break;
                    } else {
                        playAlertSound("error");
                        int saveSpecsErrorResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html><b>ERROR SAVING SPECS INTO THE FOLLOWING FILE:</b><br/><br/>" + saveSpecsFile.getPath() + "<br/><br/>" + (isMacOS ? "<b><i>QA Helper must be granted access to the Desktop to be able to save the file.</i></b><br/><br/>" : "") + "<i>Please Try Again</i></html>", "QA Helper  —  Save Specs Error", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, null, new String[]{"Try Again", "Cancel"}, "Try Again");
                        if (saveSpecsErrorResponse != JOptionPane.YES_OPTION) {
                            break;
                        }
                    }
                } else {
                    break;
                }
            }

            setActionsEnabled(true);
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnSaveOrPrintSpecsActionPerformed

    private void btnSystemInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSystemInfoActionPerformed
        // Intentionally allow opening System Info even if actions are not enabled, except when running CPU Stress Test.
        if (!isWindowsPE && (!loadingWindow.isVisible() || !loadingWindow.getLoadingText().startsWith("QA Helper is Stressing CPU"))) {
            try {
                if (isWindows) {
                    if (new CommandReader(new String[]{"\\Windows\\System32\\tasklist.exe", "/nh", "/fi", "IMAGENAME eq msinfo32.exe"}).getFirstOutputLineContaining("msinfo32.exe").isEmpty()) {
                        Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\msinfo32.exe"});
                    } else {
                        Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "(New-Object -ComObject Wscript.Shell).AppActivate('System Information')"});
                    }
                } else if (isLinux) {
                    if (new File("/usr/bin/mintreport").exists()) { // Open System Reports (which contains a detailed "System information" section).
                        if (!new CommandReader(new String[]{"/usr/bin/wmctrl", "-l"}).getFirstOutputLineContaining("System Reports").isEmpty()) {
                            Runtime.getRuntime().exec(new String[]{"/usr/bin/wmctrl", "-Fa", "System Reports"});
                        } else {
                            Runtime.getRuntime().exec(new String[]{"/usr/bin/mintreport"});
                        }
                    } else {
                        playAlertSound("beep");
                    }

                    if (new File("/usr/bin/cinnamon-settings").exists()) { // "cinnamon-settings" won't exist on MATE, but if we are on Cinnamon ALSO open it.
                        if (!new CommandReader(new String[]{"/usr/bin/wmctrl", "-l"}).getFirstOutputLineContaining("System Info").isEmpty()) {
                            Runtime.getRuntime().exec(new String[]{"/usr/bin/wmctrl", "-Fa", "System Info"});
                        } else {
                            Runtime.getRuntime().exec(new String[]{"/usr/bin/cinnamon-settings", "info"});
                        }
                    }
                } else if (isMacOS) {
                    Runtime.getRuntime().exec(new String[]{"/usr/bin/open", "-b", "com.apple.SystemProfiler"});
                }
            } catch (IOException openSystemInfoException) {
                if (isTestMode) {
                    System.out.println("openSystemInfoException: " + openSystemInfoException);
                }
                playAlertSound("error");
            }
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnSystemInfoActionPerformed

    private void btnStatusHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStatusHistoryActionPerformed
        if (actionsEnabled && isLoggedIn) {
            setActionsEnabled(false);

            loadingWindow.setLoadingTextAndDisplay("QA Helper is Retrieving Status History", "Working", "MagnifyingGlassTiltedLeft");

            (new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() throws Exception {
                    loadStatusHistory(true);

                    return null;
                }

                @Override
                protected void done() {
                    loadingWindow.closeWindow();

                    setActionsEnabled(true, false); // Don't set shouldFocusWindow so that historyWindow stays in front
                }
            }).execute();
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnStatusHistoryActionPerformed

    private void btnCreditsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreditsActionPerformed
        creditsWindow.showCreditsWindow();

        if (isTestMode && ((evt.getModifiers() & ActionEvent.ALT_MASK) == ActionEvent.ALT_MASK)) {
            System.out.println("sendEmail TEST");
            sendEmail("TEST", "sendEmail TEST");
        }
    }//GEN-LAST:event_btnCreditsActionPerformed

    private void btnDoneTestingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoneTestingActionPerformed
        if (actionsEnabled || (evt == null)) {
            setActionsEnabled(false);

            if (!isLoggedIn) {
                if (btnDoneTesting.getText().equals("Options") && !isWindows) {
                    String[] statusNames = privateStrings.getPCsCRMStatusNames();
                    // hideLoginAndTasks is never set to true on Windows, so this will never actually be an option on Windows.
                    ArrayList<String> optionsDialogButtons = new ArrayList<>();
                    optionsDialogButtons.addAll(Arrays.asList(((isLinuxUbiquityMode || isWindowsPE) ? "Install OS" : "Quit"), "Show Login & Tasks"));
                    if (isMacOS) {
                        if (new File("/Users/fg-demo/Applications/Cleanup After " + statusNames[12] + ".app").exists()) {
                            optionsDialogButtons.add("Cleanup After " + statusNames[12]);
                        } else if (new File("/Users/fg-demo/Applications/Free Geek Reset.app").exists()) {
                            optionsDialogButtons.add("Reset This Mac");
                        }
                    }

                    boolean showRunOemConfigPrepareCheckbox = (isLinux && !isLinuxLiveBoot && new CommandReader(new String[]{"/usr/bin/id", "-un"}).getFirstOutputLine().equals("oem"));

                    optionsDialogButtons.addAll(Arrays.asList("Set Price", "Mark as Sold" + (showRunOemConfigPrepareCheckbox ? " & Prepare for Shipping to End User" : ""), "Nothing"));

                    int optionsDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html><b>What would you like to do?</b></html>", "QA Helper  —  Options", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, optionsDialogButtons.toArray(), optionsDialogButtons.get(0));
                    String optionsDialogResponseString = "Nothing";
                    if (optionsDialogResponse > -1) {
                        optionsDialogResponseString = optionsDialogButtons.get(optionsDialogResponse);
                    }

                    if (optionsDialogResponseString.equals(((isLinuxUbiquityMode || isWindowsPE) ? "Install OS" : "Quit"))) {
                        System.exit(0);
                    } else if (isMacOS && (optionsDialogResponseString.equals("Cleanup After " + statusNames[12]) || optionsDialogResponseString.equals("Reset This Mac"))) {
                        try {
                            Runtime.getRuntime().exec(new String[]{"/usr/bin/open", "-na", "/Users/fg-demo/Applications/" + (new File("/Users/fg-demo/Applications/Cleanup After " + statusNames[12] + ".app").exists() ? "Cleanup After " + statusNames[12] : "Free Geek Reset") + ".app"});
                        } catch (IOException launchCleanupOrResetAppError) {
                            System.out.println("launchCleanupOrResetAppError: " + launchCleanupOrResetAppError);
                        }
                        System.exit(0);
                    } else if (!optionsDialogResponseString.equals("Nothing")) {
                        // If Windows support for hideLoginAndTasks is ever added, this will need to be dealt with
                        String possibleAdminUsername = new CommandReader(new String[]{"/usr/bin/id", "-un"}).getFirstOutputLine();
                        if (isMacOS) {
                            List<String> adminUsernames = Arrays.asList(new CommandReader(new String[]{"/bin/bash", "-c", "/usr/libexec/PlistBuddy -c 'Print :dsAttrTypeStandard\\:GroupMembership' /dev/stdin <<< \"$(/usr/bin/dscl -plist . -read /Groups/admin GroupMembership)\" | /usr/bin/awk '(($NF != \"{\") && ($NF != \"root\") && ($NF != \"}\")) { print $NF }'"}).getOutputLines());
                            if (!adminUsernames.isEmpty() && !adminUsernames.contains(possibleAdminUsername)) {
                                possibleAdminUsername = adminUsernames.get(0);
                            }
                        }
                        final String shortAdminUsernameForTask = possibleAdminUsername;
                        final String fullAdminUsernameForTask = (isMacOS ? new CommandReader(new String[]{"/usr/bin/id", "-F", shortAdminUsernameForTask}).getFirstOutputLine() : (isLinux ? new CommandReader(new String[]{"/usr/bin/getent", "passwd", shortAdminUsernameForTask}).getFirstOutputLine().split(":")[4].replace(",", "") : shortAdminUsernameForTask));

                        JPasswordField passwordField = new JPasswordField();
                        passwordField.putClientProperty("JTextField.showClearButton", true);

                        Object[] passwordPromptFields = new Object[]{
                            "<html><b>Enter Admin Password for \"" + fullAdminUsernameForTask + "\" to <i>" + optionsDialogResponseString + "</i>:</b></html>",
                            passwordField
                        };

                        JOptionPane passwordPromptPane = new JOptionPane(passwordPromptFields, JOptionPane.PLAIN_MESSAGE, JOptionPane.OK_CANCEL_OPTION) {
                            @Override
                            public void selectInitialValue() {
                                passwordField.requestFocusInWindow();
                            }
                        };

                        passwordPromptPane.createDialog(qaHelperWindow, "QA Helper  —  Admin Password").setVisible(true);

                        if (passwordPromptPane.getValue() != null && (int) passwordPromptPane.getValue() == JOptionPane.OK_OPTION) {
                            String adminPasswordForTask = new String(passwordField.getPassword());

                            if ((isLinux && new CommandReader("printf '%s\\n' '" + adminPasswordForTask.replace("'", "'\\''") + "' | /usr/bin/sudo -Sk echo '<CORRECT>'").getFirstOutputLine().equals("<CORRECT>"))
                                    || (!isLinux && new CommandReader("/usr/bin/dscl . -authonly '" + shortAdminUsernameForTask.replace("'", "'\\''") + "' '" + adminPasswordForTask.replace("'", "'\\''") + "' && echo '<CORRECT>'").getFirstOutputLine().equals("<CORRECT>"))) {
                                switch (optionsDialogResponseString) {
                                    case "Show Login & Tasks":
                                        hideLoginAndTasks = false;
                                        displayComputerSpecs();
                                        focusNextTestTaskVerifyButton(null);
                                        hideLoginAndTasks = true;
                                        break;
                                    case "Set Price":
                                        NumberFormatter priceFormatter = new NumberFormatter(NumberFormat.getNumberInstance());
                                        priceFormatter.setValueClass(Integer.class);
                                        priceFormatter.setMinimum(1);
                                        priceFormatter.setMaximum(9999);
                                        priceFormatter.setAllowsInvalid(false);
                                        priceFormatter.setCommitsOnValidEdit(true);

                                        JFormattedTextField pricePromptField = new JFormattedTextField(priceFormatter);
                                        pricePromptField.setColumns(5);

                                        JPanel pricePromptPanel = new JPanel(); // Create JPanel and add components to for horizonal layout instead of vertical.
                                        pricePromptPanel.add(new JLabel("<html><b>Enter Price:</b> $</html>"));
                                        pricePromptPanel.add(pricePromptField);
                                        pricePromptPanel.add(new JLabel("<html><i>(dollars only, no cents)</i></html>"));

                                        JOptionPane pricePromptPane = new JOptionPane(pricePromptPanel, JOptionPane.PLAIN_MESSAGE, JOptionPane.OK_CANCEL_OPTION, new TwemojiImage("DollarBanknote", qaHelperWindow).toImageIcon(32)) {
                                            @Override
                                            public void selectInitialValue() {
                                                pricePromptField.requestFocusInWindow();
                                            }
                                        };

                                        pricePromptPane.createDialog(qaHelperWindow, "QA Helper  —  Set Price").setVisible(true);

                                        String newPrice = "$" + pricePromptField.getText().replaceAll("[^0-9,]", "");

                                        if (pricePromptPane.getValue() != null && (int) pricePromptPane.getValue() == JOptionPane.OK_OPTION && !newPrice.equals("$")
                                                && JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>Are you sure you want to set the price to <u>" + newPrice + "</u>?</b></html>", "QA Helper  —  Confirm Price", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage("DollarBanknote", qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                                            writeToHelperLogFile("Price: " + newPrice);

                                            isSold = false;
                                            displayPrice = newPrice;

                                            displayComputerSpecs(); // Update displayed price
                                        }
                                        break;
                                    case "Mark as Sold":
                                    case "Mark as Sold & Prepare for Shipping to End User":
                                        String markAsSoldConfirmationMessage = "<html><b>Are you sure you want to mark this computer as sold?</b></html>";
                                        JCheckBox runOemConfigPrepareCheckbox = new JCheckBox("Prepare for Shipping to End User (Run \"oem-config-prepare\")");
                                        runOemConfigPrepareCheckbox.setSelected(true);
                                        Object[] markAsSoldConfirmationMessageAndOptions = new Object[]{markAsSoldConfirmationMessage, (showRunOemConfigPrepareCheckbox ? " " : ""), (showRunOemConfigPrepareCheckbox ? runOemConfigPrepareCheckbox : "")};
                                        if (JOptionPane.showConfirmDialog(qaHelperWindow, markAsSoldConfirmationMessageAndOptions, "QA Helper  —  Confirm Mark as Sold", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage("Receipt", qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                                            if (isMacOS && new File("/Users/fg-demo/Applications/Free Geek Reset.app").exists()) {
                                                writeToHelperLogFile("Sold");
                                                isSold = true;
                                                displayComputerSpecs(); // Update sold display

                                                try {
                                                    Runtime.getRuntime().exec(new String[]{"/usr/bin/open", "-na", "/Users/fg-demo/Applications/" + (new File("/Users/fg-demo/Applications/Cleanup After " + statusNames[12] + ".app").exists() ? "Cleanup After " + statusNames[12] : "Free Geek Reset") + ".app"});
                                                } catch (IOException launchCleanupOrResetAppError) {
                                                    System.out.println("launchCleanupOrResetAppError: " + launchCleanupOrResetAppError);
                                                }

                                                System.exit(0);
                                            } else {
                                                boolean oemConfigSucceeded = true;
                                                if (showRunOemConfigPrepareCheckbox && runOemConfigPrepareCheckbox.isSelected()) {
                                                    oemConfigSucceeded = runOemConfigPrepare();
                                                }

                                                if (oemConfigSucceeded) {
                                                    writeToHelperLogFile("Sold");
                                                    isSold = true;
                                                    displayComputerSpecs(); // Update sold display

                                                    new LinuxAutoScripts("Sold", adminPassword);

                                                    ArrayList<String> markedAsSoldDialogButtons = new ArrayList<>();

                                                    if (!isLinuxUbiquityMode && !isWindowsPE) {
                                                        markedAsSoldDialogButtons.add("Quit");
                                                    }
                                                    markedAsSoldDialogButtons.addAll(Arrays.asList("Shut Down", "Reboot", "Keep Using QA Helper"));

                                                    int markedAsSoldDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html><b>Successfully Marked ID \"" + pid + "\" as Sold" + ((showRunOemConfigPrepareCheckbox && runOemConfigPrepareCheckbox.isSelected()) ? " & Prepared for Shipping to End User" : "") + "</b><br/><br/><i>What would you like to do next?</i></html>", "QA Helper  —  Marked as Sold", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, markedAsSoldDialogButtons.toArray(), markedAsSoldDialogButtons.get(0));

                                                    String markedAsSoldResponseString = "Keep Using QA Helper";
                                                    if (markedAsSoldDialogResponse > -1) {
                                                        markedAsSoldResponseString = markedAsSoldDialogButtons.get(markedAsSoldDialogResponse);
                                                    }

                                                    switch (markedAsSoldResponseString) {
                                                        case "Shut Down":
                                                            if (isLinux) {
                                                                try {
                                                                    while (!new CommandReader(new String[]{"/usr/bin/pgrep", "-fn", "/auto-scripts/.*\\+(user|root)\\.sh$"}).getFirstOutputLine().isEmpty()) {
                                                                        TimeUnit.SECONDS.sleep(2);
                                                                    }

                                                                    Runtime.getRuntime().exec(new String[]{"/bin/systemctl", "poweroff"}).waitFor();
                                                                    TimeUnit.SECONDS.sleep(2);
                                                                } catch (IOException | InterruptedException systemctlPowerOffException) {
                                                                    if (isTestMode) {
                                                                        System.out.println("systemctlPowerOffException: " + systemctlPowerOffException);
                                                                    }
                                                                }
                                                            } else if (isWindows) {
                                                                try {
                                                                    Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "Stop-Computer"}).waitFor();
                                                                    TimeUnit.SECONDS.sleep(2);
                                                                } catch (IOException | InterruptedException stopComputerException) {
                                                                    if (isTestMode) {
                                                                        System.out.println("stopComputerException: " + stopComputerException);
                                                                    }
                                                                }
                                                            } else if (isMacOS) {
                                                                try {
                                                                    Runtime.getRuntime().exec(new String[]{"/usr/bin/osascript", "-e", "tell application id \"com.apple.systemevents\" to shut down with state saving preference"}).waitFor();
                                                                    TimeUnit.SECONDS.sleep(2);
                                                                } catch (IOException | InterruptedException osascriptShutDownException) {
                                                                    if (isTestMode) {
                                                                        System.out.println("osascriptShutDownException: " + osascriptShutDownException);
                                                                    }
                                                                }
                                                            }

                                                            System.exit(0);
                                                        case "Reboot":
                                                            if (isLinux) {
                                                                try {
                                                                    while (!new CommandReader(new String[]{"/usr/bin/pgrep", "-fn", "/auto-scripts/.*\\+(user|root)\\.sh$"}).getFirstOutputLine().isEmpty()) {
                                                                        TimeUnit.SECONDS.sleep(2);
                                                                    }

                                                                    Runtime.getRuntime().exec(new String[]{"/bin/systemctl", "reboot"}).waitFor();
                                                                    TimeUnit.SECONDS.sleep(2);
                                                                } catch (IOException | InterruptedException systemctlRebootException) {
                                                                    if (isTestMode) {
                                                                        System.out.println("systemctlRebootException: " + systemctlRebootException);
                                                                    }
                                                                }
                                                            } else if (isWindows) {
                                                                try {
                                                                    Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "Restart-Computer"}).waitFor();
                                                                    TimeUnit.SECONDS.sleep(2);
                                                                } catch (IOException | InterruptedException restartComputerException) {
                                                                    if (isTestMode) {
                                                                        System.out.println("restartComputerException: " + restartComputerException);
                                                                    }
                                                                }
                                                            } else if (isMacOS) {
                                                                try {
                                                                    Runtime.getRuntime().exec(new String[]{"/usr/bin/osascript", "-e", "tell application id \"com.apple.systemevents\" to restart with state saving preference"}).waitFor();
                                                                    TimeUnit.SECONDS.sleep(2);
                                                                } catch (IOException | InterruptedException osascriptRestartException) {
                                                                    if (isTestMode) {
                                                                        System.out.println("osascriptRestartException: " + osascriptRestartException);
                                                                    }
                                                                }
                                                            }

                                                            System.exit(0);
                                                        case "Quit":
                                                            System.exit(0);
                                                        default:
                                                            break;
                                                    }
                                                } else {
                                                    playAlertSound("error");
                                                    sendErrorEmail("Failed to Prepare for Shipping to End User");
                                                    JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Failed to Prepare for Shipping to End User</b><br/><br/>This should not have happened, please inform Free Geek I.T.</html>", "QA Helper  —  Prepare for Shipping to End User Failed", JOptionPane.ERROR_MESSAGE);
                                                }
                                            }
                                        }
                                        break;
                                    default:
                                        break;
                                }
                            } else {
                                playAlertSound("error");
                                JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Incorrect Admin Password for \"" + fullAdminUsernameForTask + "\"</b></html>", "QA Helper  —  Incorrect Password", JOptionPane.WARNING_MESSAGE);
                            }
                        }
                    }

                    setActionsEnabled(true);
                } else {
                    System.exit(0);
                }
            } else {
                String[] statusNames = privateStrings.getPCsCRMStatusNames();
                HashMap<String, String> currentStatusAndProductType = getCurrentStatusAndProductType();
                String currentStatus = currentStatusAndProductType.get("Status");
                if (!currentStatus.equals("UNKNOWN STATUS") && !currentStatus.equals(statusNames[2]) && !currentStatus.equals(statusNames[3])) {
                    System.exit(0);
                } else if (!isReloading) {
                    ArrayList<String> doneTestingDialogButtons = new ArrayList<>();

                    if (isLinuxUbiquityMode || isWindowsPE) {
                        doneTestingDialogButtons.add("Install OS");
                    }

                    boolean mustSetProductType = true;
                    boolean didSetProductType = false;
                    if (pid.startsWith("FG")) {
                        if (new File(helperLogFilePath).exists()) {
                            try {
                                List<String> allHelperLogLines = Files.readAllLines(Paths.get(helperLogFilePath));
                                for (String thisHelperLogLine : allHelperLogLines) {
                                    if (thisHelperLogLine.startsWith("Set Product Type")) {
                                        mustSetProductType = false;
                                        didSetProductType = true;
                                    }
                                }
                            } catch (IOException readLogForSetProductTypeException) {
                                if (isTestMode) {
                                    System.out.println("readLogForSetProductTypeException: " + readLogForSetProductTypeException);
                                }
                            }
                        }
                    } else {
                        mustSetProductType = false; // Do not force non-Free Geek technicians to set Product Type before "statusNames[12]" since it requires going to PCsCRM.com rather than an automated dropdown and may be done in bulk on another computer.
                    }

                    String setStatusOrContinueOnFGSpecsButton = ((deviceTypeIsMotherboard && pid.startsWith("FG")) ? "Quit QA Helper & Continue on FG Specs" : "Set Status to \"" + statusNames[12] + "\"");

                    if (!mustSetProductType) { // Set Product Type will come first if Product Type must be set, otherwise Set Status will come first.
                        doneTestingDialogButtons.add(setStatusOrContinueOnFGSpecsButton);
                    }

                    if (pid.startsWith("FG") || !isWindowsPE || (isWindowsRE && new File("\\Install\\Diagnostic Tools\\Web Browser (PE).exe").exists())) {
                        doneTestingDialogButtons.add("Set Product Type" + (pid.startsWith("FG") ? "" : " on PCsCRM.com"));
                    }

                    if (mustSetProductType) {
                        // TODO: Decide whether setting to the "statusNames[2]" status should ever be an option.
                        //if (currentStatus.equals(statusNames[3])) doneTestingDialogButtons.add("Set Status to \"" + statusNames[2] + "\"");
                        doneTestingDialogButtons.add(setStatusOrContinueOnFGSpecsButton);
                    }

                    if (!isLinuxUbiquityMode && !isWindowsPE) {
                        doneTestingDialogButtons.add("Quit");
                    }
                    doneTestingDialogButtons.addAll(Arrays.asList("Shut Down", "Reboot", "Cancel"));

                    int doneTestingDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html><b>What would you like to do next?</b>" + (didSetProductType ? "" : ("<br/><br/><i>Before setting status to \"" + statusNames[12] + "\", you must set the correct Product Type for this computer" + (pid.startsWith("FG") ? (".</i>") : " on PCsCRM.com.</i>"))) + (pid.startsWith("FG") ? "<br/><br/><b>Current Product Type:</b> " + currentStatusAndProductType.get("Product Type") : "") + "</html>", "QA Helper  —  Done Testing", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, doneTestingDialogButtons.toArray(), doneTestingDialogButtons.get(0));

                    String doneTestingResponseString = "Cancel";
                    if (doneTestingDialogResponse > -1) {
                        doneTestingResponseString = doneTestingDialogButtons.get(doneTestingDialogResponse);
                    }

                    if (doneTestingResponseString.equals("Cancel")) {
                        setActionsEnabled(true);
                    } else if (doneTestingResponseString.equals("Shut Down")) {
                        if (isLinux) {
                            try {
                                while (!new CommandReader(new String[]{"/usr/bin/pgrep", "-fn", "/auto-scripts/.*\\+(user|root)\\.sh$"}).getFirstOutputLine().isEmpty()) {
                                    TimeUnit.SECONDS.sleep(2);
                                }

                                Runtime.getRuntime().exec(new String[]{"/bin/systemctl", "poweroff"}).waitFor();
                                TimeUnit.SECONDS.sleep(2);
                            } catch (IOException | InterruptedException systemctlPowerOffException) {
                                if (isTestMode) {
                                    System.out.println("systemctlPowerOffException: " + systemctlPowerOffException);
                                }
                            }
                        } else if (isWindows) {
                            try {
                                Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "Stop-Computer"}).waitFor();
                                TimeUnit.SECONDS.sleep(2);
                            } catch (IOException | InterruptedException stopComputerException) {
                                if (isTestMode) {
                                    System.out.println("stopComputerException: " + stopComputerException);
                                }
                            }
                        } else if (isMacOS) {
                            try {
                                Runtime.getRuntime().exec(new String[]{"/usr/bin/osascript", "-e", "tell application id \"com.apple.systemevents\" to shut down with state saving preference"}).waitFor();
                                TimeUnit.SECONDS.sleep(2);
                            } catch (IOException | InterruptedException osascriptShutDownException) {
                                if (isTestMode) {
                                    System.out.println("osascriptShutDownException: " + osascriptShutDownException);
                                }
                            }
                        }

                        System.exit(0);
                    } else if (doneTestingResponseString.equals("Reboot")) {
                        if (isLinux) {
                            try {
                                while (!new CommandReader(new String[]{"/usr/bin/pgrep", "-fn", "/auto-scripts/.*\\+(user|root)\\.sh$"}).getFirstOutputLine().isEmpty()) {
                                    TimeUnit.SECONDS.sleep(2);
                                }

                                Runtime.getRuntime().exec(new String[]{"/bin/systemctl", "reboot"}).waitFor();
                                TimeUnit.SECONDS.sleep(2);
                            } catch (IOException | InterruptedException systemctlRebootException) {
                                if (isTestMode) {
                                    System.out.println("systemctlRebootException: " + systemctlRebootException);
                                }
                            }
                        } else if (isWindows) {
                            try {
                                Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "Restart-Computer"}).waitFor();
                                TimeUnit.SECONDS.sleep(2);
                            } catch (IOException | InterruptedException restartComputerException) {
                                if (isTestMode) {
                                    System.out.println("restartComputerException: " + restartComputerException);
                                }
                            }
                        } else if (isMacOS) {
                            try {
                                Runtime.getRuntime().exec(new String[]{"/usr/bin/osascript", "-e", "tell application id \"com.apple.systemevents\" to restart with state saving preference"}).waitFor();
                                TimeUnit.SECONDS.sleep(2);
                            } catch (IOException | InterruptedException osascriptRestartException) {
                                if (isTestMode) {
                                    System.out.println("osascriptRestartException: " + osascriptRestartException);
                                }
                            }
                        }

                        System.exit(0);
                    } else if (doneTestingResponseString.startsWith("Set Product Type")) {
                        if (pid.startsWith("FG")) {
                            promptToSetProductType();
                        } else {
                            autoLoginToPCsCRMInventoryManagerPage();
                        }
                    } else if (doneTestingResponseString.equals("Set Status to \"" + statusNames[2] + "\"")) { // THIS IS NOT CURRENTLY USED
                        if (JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>Are you sure you want to set the status for ID \"" + pid + "\" to <u>" + statusNames[2] + "</u>?</b></html>", "QA Helper  —  Confirm " + statusNames[2], JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage("CheckBoxWithCheck", qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                            loadingWindow.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
                            setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

                            loadingWindow.setLoadingTextAndDisplay("QA Helper is Updating Status to " + statusNames[2], "Working", "CheckBoxWithCheck");

                            (new SwingWorker<String[], Void>() {
                                @Override
                                protected String[] doInBackground() throws Exception {
                                    return (updateStatus(statusNames[2], currentStatus) ? loadStatusHistory(false) : null);
                                }

                                @Override
                                protected void done() {
                                    try {
                                        String[] statusAndTech = get();

                                        if (statusAndTech != null) {
                                            displayComputerSpecs(statusAndTech);

                                            loadingWindow.closeWindow();
                                            playAlertSound("success");
                                            String[] successfullyUpdatedStatusDialogButtons = new String[]{((isLinuxUbiquityMode || isWindowsPE) ? "Install OS" : "Quit"), "Shut Down", "Keep Using QA Helper"};

                                            int successfullyUpdatedStatusDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html><b>Successfully Updated Status for ID \"" + pid + "\" to <u>" + statusNames[2] + "</u></b><br/><br/><i>What would you like to do next?</i></html>", "QA Helper  —  Status Updated", (!isMacOS ? JOptionPane.YES_NO_CANCEL_OPTION : JOptionPane.YES_NO_OPTION), JOptionPane.QUESTION_MESSAGE, new TwemojiImage("CheckBoxWithCheck", qaHelperWindow).toImageIcon(32), successfullyUpdatedStatusDialogButtons, successfullyUpdatedStatusDialogButtons[0]);
                                            switch (successfullyUpdatedStatusDialogResponse) {
                                                case JOptionPane.YES_OPTION:
                                                    System.exit(0);
                                                    break;
                                                case JOptionPane.NO_OPTION:
                                                case -1:
                                                    if (isLinux) {
                                                        try {
                                                            while (!new CommandReader(new String[]{"/usr/bin/pgrep", "-fn", "/auto-scripts/.*\\+(user|root)\\.sh$"}).getFirstOutputLine().isEmpty()) {
                                                                TimeUnit.SECONDS.sleep(2);
                                                            }

                                                            Runtime.getRuntime().exec(new String[]{"/bin/systemctl", "poweroff"}).waitFor();
                                                            TimeUnit.SECONDS.sleep(2);
                                                        } catch (IOException | InterruptedException systemctlPowerOffException) {
                                                            if (isTestMode) {
                                                                System.out.println("systemctlPowerOffException: " + systemctlPowerOffException);
                                                            }
                                                        }
                                                    } else if (isWindows) {
                                                        try {
                                                            Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "Stop-Computer"}).waitFor();
                                                            TimeUnit.SECONDS.sleep(2);
                                                        } catch (IOException | InterruptedException stopComputerException) {
                                                            if (isTestMode) {
                                                                System.out.println("stopComputerException: " + stopComputerException);
                                                            }
                                                        }
                                                    } else if (isMacOS) {
                                                        try {
                                                            Runtime.getRuntime().exec(new String[]{"/usr/bin/osascript", "-e", "tell application id \"com.apple.systemevents\" to shut down with state saving preference"}).waitFor();
                                                            TimeUnit.SECONDS.sleep(2);
                                                        } catch (IOException | InterruptedException osascriptShutDownException) {
                                                            if (isTestMode) {
                                                                System.out.println("osascriptShutDownException: " + osascriptShutDownException);
                                                            }
                                                        }
                                                    }

                                                    System.exit(0);
                                                    break;
                                                default:
                                                    break;
                                            }
                                        } else {
                                            loadingWindow.closeWindow();
                                            playAlertSound("error");
                                            JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Failed to Log Specs and/or Update Status to <u>" + statusNames[2] + "</u></b></html>", "QA Helper  —  Update Status Error", JOptionPane.ERROR_MESSAGE);
                                        }
                                    } catch (HeadlessException | InterruptedException | ExecutionException setStatusToRefurbishCompleteException) {
                                        if (isTestMode) {
                                            System.out.println("setStatusToRefurbishCompleteException: " + setStatusToRefurbishCompleteException);
                                        }
                                    }

                                    loadingWindow.closeWindow();

                                    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                                    loadingWindow.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

                                    setActionsEnabled(true);
                                }
                            }).execute();
                        } else {
                            setActionsEnabled(true);
                        }
                    } else if (doneTestingResponseString.equals("Set Status to \"" + statusNames[12] + "\"")) {
                        String qaDoneConfirmationMessage = "<html><b>Are you sure you want to set the status for ID \"" + pid + "\" to <u>" + statusNames[12] + "</u>?</b></html>";

                        JCheckBox changeFreeGeekPasswordCheckbox = new JCheckBox("Change Admin Password to Free Geek Store Password");
                        JCheckBox runOemConfigPrepareCheckbox = new JCheckBox("Prepare for Shipping to End User (Run \"oem-config-prepare\")");
                        runOemConfigPrepareCheckbox.setSelected(true); // Pre-select since always resetting for sales and never on display in the store.

                        boolean showChangeFreeGeekPasswordCheckbox = false; // NEVER SHOW SINCE NEVER ON DISPLAY IN THE STORE, BUT KEEP CODE FOR POSSIBLE FUTURE USE: (isLinux && !isLinuxLiveBoot && pid.startsWith("FG") && adminPassword.equals(privateStrings.getInsecureFreeGeekPassword()));
                        boolean showRunOemConfigPrepareCheckbox = (isLinux && !isLinuxLiveBoot && new CommandReader(new String[]{"/usr/bin/id", "-un"}).getFirstOutputLine().equals("oem"));

                        Object[] qaDoneConfirmationMessageAndOptions = new Object[]{qaDoneConfirmationMessage, ((showChangeFreeGeekPasswordCheckbox || showRunOemConfigPrepareCheckbox) ? " " : ""), (showChangeFreeGeekPasswordCheckbox ? changeFreeGeekPasswordCheckbox : ""), (showRunOemConfigPrepareCheckbox ? runOemConfigPrepareCheckbox : "")};

                        if (JOptionPane.showConfirmDialog(qaHelperWindow, qaDoneConfirmationMessageAndOptions, "QA Helper  —  Confirm " + statusNames[12], JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage("CheckMarkButton", qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                            if (isLinux) {
                                getAdminPassword("Prepare for " + statusNames[12]); // Get password if needed.
                            }

                            loadingWindow.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
                            setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

                            loadingWindow.setLoadingTextAndDisplay("QA Helper is Confirming Ready for " + statusNames[12], "Working", "CheckMarkButton");

                            (new SwingWorker<String, Void>() {
                                @Override
                                protected String doInBackground() throws Exception {
                                    boolean qaCompleteAllowed = true;
                                    boolean hasRefurbDPK = false;

                                    String aptUpdateOutput = "";

                                    if (isLinux && !isLinuxLiveBoot) {
                                        // If some package cache file is corrupted for any reason, Ubiquity/oem-config setup can crash when the end user tries to make an account
                                        // resulting in being stuck at the login screen with no users on the system and no way to recover without reinstalling the OS,
                                        // so be sure that the apt cache is valid before allowing "oem-config-prepare" to run.
                                        // NOTE: The crash should be fixed in Ubiquity 24.04.3+mint18 and newer: https://github.com/linuxmint/ubiquity/issues/103
                                        // But it's still good to make sure that apt cache is not corrupt for our customers.

                                        String possibleSudo = (!adminPassword.equals("*UNKNOWN*") ? "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk " : "");

                                        boolean ignoreAptCacheError;
                                        for (int aptUpdateAttempt = 1; aptUpdateAttempt <= 2; aptUpdateAttempt++) {
                                            ignoreAptCacheError = false;

                                            String[] aptUpdateOutputLinesArray = new CommandReader(new String[]{"/bin/sh", "-c", possibleSudo + "/usr/bin/apt-get update 2>&1; echo \"Exit Code: $?\""}).getOutputLines();
                                            aptUpdateOutput = String.join("\n", aptUpdateOutputLinesArray);

                                            if (aptUpdateOutput.endsWith("Exit Code: 0")) {
                                                qaCompleteAllowed = true;
                                                break;
                                            } else {
                                                ArrayList<String> corruptAptCacheFiles = new ArrayList<>();
                                                ArrayList<String> deletedCorruptAptCacheFiles = new ArrayList<>();

                                                for (String thisAptOutputLine : aptUpdateOutputLinesArray) {
                                                    if (thisAptOutputLine.startsWith("E: Unable to parse package file /var/lib/apt/lists/")) {
                                                        String corruptedFilePath = thisAptOutputLine.split(" ")[6];

                                                        corruptAptCacheFiles.add(corruptedFilePath);

                                                        if (corruptedFilePath.startsWith("/var/lib/apt/lists/")) {
                                                            File corruptedFile = new File(corruptedFilePath);

                                                            if (corruptedFile.exists()) {
                                                                corruptedFile.delete();
                                                            }

                                                            if (corruptedFile.exists()) {
                                                                Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", possibleSudo + "/bin/rm -f '" + corruptedFilePath.replace("'", "'\\''") + "'"}).waitFor();
                                                            }

                                                            if (!corruptedFile.exists()) {
                                                                deletedCorruptAptCacheFiles.add(corruptedFilePath);
                                                            }
                                                        }
                                                    } else if (!ignoreAptCacheError && (pid.startsWith("D") || !pid.contains("-")) && thisAptOutputLine.startsWith("E: Failed to fetch ") && thisAptOutputLine.endsWith(" Clearsigned file isn't valid, got 'NOSPLIT' (does the network require authentication?)")) {
                                                        // Don't know what is going on with their network, but this error always happens at a PCs for People location in Denver, so just ignore it and allow "statusNames[12]" anyway.
                                                        // This is also happening at the new PCs for People location in Seattle, which currently uses all-numeric PIDs.
                                                        ignoreAptCacheError = true;
                                                    }
                                                }

                                                if (!corruptAptCacheFiles.isEmpty()) {
                                                    aptUpdateOutput += "\n\nCORRUPTED APT CACHE FILES:\n"
                                                            + String.join("\n", corruptAptCacheFiles)
                                                            + "\n\nDELETED CORRUPTED APT CACHE FILES:\n"
                                                            + String.join("\n", deletedCorruptAptCacheFiles);
                                                }

                                                String aptUpdateErrorMessage = "UPDATE APT CACHE BEFORE " + statusNames[12] + " ERROR (ATTEMPT " + aptUpdateAttempt + " OF 2):\n\n" + aptUpdateOutput;

                                                if (isTestMode) {
                                                    System.out.println(aptUpdateErrorMessage);
                                                }

                                                if (ignoreAptCacheError && corruptAptCacheFiles.isEmpty()) {
                                                    // sendErrorEmail("IGNORING APT CACHE ERROR\n\n" + aptUpdateErrorMessage);
                                                    // DO NOT WANT THESE EMAILS ANYMORE NOW THAT I'M SURE THE IGNORE IS WORKING

                                                    qaCompleteAllowed = true;
                                                    break;
                                                } else {
                                                    sendErrorEmail(aptUpdateErrorMessage);

                                                    qaCompleteAllowed = false;
                                                }
                                            }
                                        }
                                    } else if (isWindows) {
                                        if (isTestMode && (new File(windowsBuildInfoPath + "fgFLAG-TEST").exists() || new File(windowsBuildInfoPath + "TESTING").exists())) {
                                            // Do not confirm Windows license when both QA Helper AND Windows scripts are in test mode.

                                            loadingWindow.setAlwaysOnTop(false);
                                            playAlertSound("beep");
                                            JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>NOTICE: Not Confirming Windows License Before " + statusNames[12] + " in TEST MODE</b></html>", "QA Helper  —  Windows License Test Mode Notice", JOptionPane.WARNING_MESSAGE);
                                            loadingWindow.setAlwaysOnTop(true);
                                        } else {
                                            try {
                                                HashMap<String, String> windowsProductKeyInfoSavedInPCsCRM = PCsCRMManager.getSpecsForPID(pid, isTestMode, true);
                                                String productKeySavedInPCsCRM = windowsProductKeyInfoSavedInPCsCRM.get("Windows Product Key");
                                                if (productKeySavedInPCsCRM.equals("NOT LOGGED")) {
                                                    productKeySavedInPCsCRM = "";
                                                }

                                                if (productKeySavedInPCsCRM.isEmpty()) {
                                                    qaCompleteAllowed = false;
                                                } else {
                                                    String dpkTypeCodeOrPreExistingCoaIdSavedInPCsCRM = windowsProductKeyInfoSavedInPCsCRM.get("Windows DPK Type Code or Old COA ID");
                                                    if (dpkTypeCodeOrPreExistingCoaIdSavedInPCsCRM.equals("NOT LOGGED")) {
                                                        dpkTypeCodeOrPreExistingCoaIdSavedInPCsCRM = "";
                                                    }

                                                    String newCoaIdSavedInPCsCRM = windowsProductKeyInfoSavedInPCsCRM.get("Windows New COA ID");
                                                    if (newCoaIdSavedInPCsCRM.equals("NOT LOGGED")) {
                                                        newCoaIdSavedInPCsCRM = "";
                                                    }

                                                    String windowsLicenseInfo = computerSpecs.getWindowsLicenseInfo(isTestMode, isLoggedIn);
                                                    // The following code does a lot of not ideal string parsing because windowsLicenseInfo was originally used just for a simple
                                                    // Windows license info output display, but things slowly evolved and a lot more complex stuff if being done and windowsLicenseInfo
                                                    // should really be broken out to its own class with sepearate properties to be able to make the following code much cleaner and simpler.

                                                    boolean isLicensed = windowsLicenseInfo.contains("<b>License Status:</b> Licensed");
                                                    boolean possibleNonRefurbProductKey = windowsLicenseInfo.contains("LICENSED WITH A NON-REFURBISHED PC PRODUCT KEY");

                                                    if (!isLicensed || possibleNonRefurbProductKey || !windowsLicenseInfo.contains("<b>COA ID / COA Serial Number:</b> " + newCoaIdSavedInPCsCRM) || !windowsLicenseInfo.contains("<b>Product Key in Registry:</b> " + productKeySavedInPCsCRM)) {
                                                        qaCompleteAllowed = false;
                                                    } else if (windowsLicenseInfo.contains("OEM:DM") && (dpkTypeCodeOrPreExistingCoaIdSavedInPCsCRM.endsWith("-DPK") || dpkTypeCodeOrPreExistingCoaIdSavedInPCsCRM.equals("DIGITALPRODUCTKEY"))) { // Versions older than 2025.1.22 only supported Commercial DPKs and NOT Citizenship DPKs and would always save "DIGITALPRODUCTKEY" instead of value ending in "-DPK" and starting with specific Windows version and DPK type.
                                                        hasRefurbDPK = true;

                                                        if (new File(helperLogFilePath).exists()) { // Make sure CBR has been uploaded for DPKs.
                                                            try {
                                                                String productKeyID = "";

                                                                for (String thisWindowsLicenseInfoLine : windowsLicenseInfo.split("<br/>")) {
                                                                    if (thisWindowsLicenseInfoLine.contains(":</b> ")) {
                                                                        String thisWindowsLicenseInfoProperty = thisWindowsLicenseInfoLine.substring(thisWindowsLicenseInfoLine.indexOf(":</b> ") + 6).trim();

                                                                        if (!thisWindowsLicenseInfoProperty.isEmpty()) {
                                                                            if (thisWindowsLicenseInfoLine.startsWith("<b>Product Key ID:</b>")) {
                                                                                productKeyID = thisWindowsLicenseInfoProperty;
                                                                                break;
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                                boolean didUploadCBRforDPK = false;
                                                                List<String> allHelperLogLines = Files.readAllLines(Paths.get(helperLogFilePath));
                                                                for (String thisHelperLogLine : allHelperLogLines) {
                                                                    if (thisHelperLogLine.startsWith("Uploaded CBR for DPK: CBR+" + (dpkTypeCodeOrPreExistingCoaIdSavedInPCsCRM.endsWith("-DPK") ? (dpkTypeCodeOrPreExistingCoaIdSavedInPCsCRM + "+") : "") + productKeyID + "+" + computerSpecs.getFullSerial().replaceAll("[^A-Za-z0-9]", "") + "+" + pid + ".xml")) {
                                                                        didUploadCBRforDPK = true;
                                                                    } else if (thisHelperLogLine.startsWith("Reverted DPK")) {
                                                                        didUploadCBRforDPK = false;
                                                                    }
                                                                }

                                                                if (!didUploadCBRforDPK) {
                                                                    qaCompleteAllowed = false;
                                                                }
                                                            } catch (IOException readLogForCBRexception) {
                                                                if (isTestMode) {
                                                                    System.out.println("readLogForCBRexception: " + readLogForCBRexception);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } catch (Exception checkSavedProductKeyForQACompleteException) {
                                                if (isTestMode) {
                                                    System.out.println("checkSavedProductKeyForQACompleteException: " + checkSavedProductKeyForQACompleteException);
                                                }

                                                sendErrorEmail("checkSavedProductKeyForQACompleteException: " + checkSavedProductKeyForQACompleteException);

                                                qaCompleteAllowed = false;
                                            }
                                        }
                                    } else if (!isTestMode && isMacOS && new File("/Users/fg-demo/Applications/Free Geek Setup.app").exists()) { // Will never get here anymore since not allowed to load at all when Free Geek Setup hasn't run, but leave it here just in case it's needed again in the future.
                                        // Do not confirm Free Geek Setup has run when in test mode.
                                        qaCompleteAllowed = false;
                                    }

                                    boolean mustSetProductType = true;
                                    if (pid.startsWith("FG")) {
                                        if (new File(helperLogFilePath).exists()) {
                                            try {
                                                List<String> allHelperLogLines = Files.readAllLines(Paths.get(helperLogFilePath));
                                                for (String thisHelperLogLine : allHelperLogLines) {
                                                    if (thisHelperLogLine.startsWith("Set Product Type")) {
                                                        mustSetProductType = false;
                                                    }
                                                }
                                            } catch (IOException readLogForSetProductTypeException) {
                                                if (isTestMode) {
                                                    System.out.println("readLogForSetProductTypeException: " + readLogForSetProductTypeException);
                                                }
                                            }
                                        }
                                    } else {
                                        mustSetProductType = false; // Do not force non-Free Geek technicians to set Product Type before "statusNames[12]" since it requires going to PCsCRM.com rather than an automated dropdown and may be done in bulk on another computer.
                                    }

                                    if (mustSetProductType && (!isWindowsPE || (isWindowsRE && new File("\\Install\\Diagnostic Tools\\Web Browser (PE).exe").exists()))) {
                                        qaCompleteAllowed = false;
                                    }

                                    return ((qaCompleteAllowed ? "allowed" : "not-allowed") + (hasRefurbDPK ? "+dpk" : "") + (mustSetProductType ? "+must-set-product-type" : "") + (aptUpdateOutput.isEmpty() ? "" : ("+apt-cache-error\n" + aptUpdateOutput)));
                                }

                                @Override
                                protected void done() {
                                    boolean qaCompleteAllowed = false;
                                    boolean dpkGmrlStickerConfirmed = true;

                                    try {
                                        String returnValue = get();

                                        if (returnValue.startsWith("allowed")) {
                                            if (returnValue.contains("+dpk")) {
                                                dpkGmrlStickerConfirmed = false;

                                                loadingWindow.closeWindow();

                                                JTextField dpkGmrlStickerConfirmationField = new JTextField();
                                                dpkGmrlStickerConfirmationField.putClientProperty("JTextField.showClearButton", true);
                                                dpkGmrlStickerConfirmationField.setTransferHandler(null); // Disable pasting into field.
                                                Object[] dpkGmrlStickerConfirmationFields = new Object[]{
                                                    "<html><b>Since a DPK has been applied, a \"Genuine Microsoft Refurbisher Label\" (GMRL) sticker must be affixed to this computer<br/><i>and any existing COA or GML stickers must be removed and destroyed or any Product Keys must be crossed out so they are unreadable</i>.</b><br/><br/><u>Desktops:</u> Affix the GMRL on the <u>back of the case</u> <i>(<b>not</b> the front)</i> without covering any regulatory information, other stickers, logos, or text.<br/><u>Laptops:</u> Affix the GMRL <u>under the battery or on the bottom of the case</u> without covering any regulatory information, other stickers, logos, or text.<br/><br/><u>Also, you must remove and destroy any existing COA or GML stickers or cross out any Product Keys so they are unreadable.</u><br/><br/><i>Type \"<b>GMRL</b>\" after confirming a \"Genuine Microsoft Refurbisher Label\" sticker has been affixed to this computer<br/>and any existing COA or GML stickers have been removed and destroyed or any Product Keys have been crossed out so they are unreadable:</i></html>",
                                                    dpkGmrlStickerConfirmationField
                                                };

                                                JOptionPane dpkGmrlStickerConfirmationPane = new JOptionPane(dpkGmrlStickerConfirmationFields, JOptionPane.WARNING_MESSAGE, JOptionPane.OK_CANCEL_OPTION, new TwemojiImage("Window", qaHelperWindow).toImageIcon(32)) {
                                                    @Override
                                                    public void selectInitialValue() {
                                                        dpkGmrlStickerConfirmationField.requestFocusInWindow();
                                                    }
                                                };

                                                dpkGmrlStickerConfirmationPane.createDialog(qaHelperWindow, "QA Helper  —  Confirm GMRL for DPK").setVisible(true);

                                                if (dpkGmrlStickerConfirmationPane.getValue() != null && (int) dpkGmrlStickerConfirmationPane.getValue() == JOptionPane.OK_OPTION && dpkGmrlStickerConfirmationField.getText().trim().toUpperCase().equals("GMRL")) {
                                                    dpkGmrlStickerConfirmed = true;
                                                    qaCompleteAllowed = true;
                                                }
                                            } else {
                                                qaCompleteAllowed = true;
                                            }
                                        }

                                        if (qaCompleteAllowed && dpkGmrlStickerConfirmed) {
                                            loadingWindow.setLoadingTextAndDisplay("QA Helper is Updating Status to " + statusNames[12], "Working", "CheckMarkButton");

                                            (new SwingWorker<String, Void>() {
                                                @Override
                                                protected String doInBackground() throws Exception {
                                                    String returnStatus = "success";

                                                    if (showChangeFreeGeekPasswordCheckbox && changeFreeGeekPasswordCheckbox.isSelected()) {
                                                        // Change password before running updateStatus for root auto-scripts to work.
                                                        String freeGeekStorePassword = privateStrings.getCurrentFreeGeekPassword();
                                                        String freeGeekStorePasswordQuotedForShell = "'" + freeGeekStorePassword.replace("'", "'\\''") + "'";
                                                        if (!new CommandReader("printf '%s\\n' " + adminPasswordQuotedForShell + " " + freeGeekStorePasswordQuotedForShell + " " + freeGeekStorePasswordQuotedForShell + " | /usr/bin/passwd 2>&1").getFirstOutputLineContaining("password updated successfully").isEmpty()) {
                                                            adminPassword = freeGeekStorePassword;
                                                            adminPasswordQuotedForShell = freeGeekStorePasswordQuotedForShell;
                                                            returnStatus += "+password-success";
                                                        } else {
                                                            returnStatus += "+password-failed";
                                                        }
                                                    }

                                                    String previousStatusName = currentStatus;

                                                    // NOTE: AS OF VERSION 2025.7.4-1 NO LONGER SET "statusNames[2]" BEFORE "statusNames[12]" AND GO DIRECTLY TO "statusNames[12]" INSTEAD.
                                                    // Setting "statusNames[2]" has never been required, but a historical artifact. But now just get rid of it to save the seconds it takes.
                                                    /*
                                                    if (!currentStatus.equals(statusNames[2])) {
                                                        if (updateStatus(statusNames[2], previousStatusName)) {
                                                            previousStatusName = statusNames[2];
                                                        } else {
                                                            return "update-failed";
                                                        }

                                                        TimeUnit.SECONDS.sleep(1); // Wait a second after sending "statusNames[2]" to make sure "statusNames[12]" always comes after when pulled from history.
                                                    }
                                                     */
                                                    if (updateStatus(statusNames[12], previousStatusName)) {
                                                        loadStatusHistory(false); // This will refresh the cache so that "displayComputerSpecs()" will not need to query PCsCRM on the main thread to get the current status and tech.
                                                    } else {
                                                        return "update-failed";
                                                    }

                                                    installUndoOemConfigPrepareScript();

                                                    if (showRunOemConfigPrepareCheckbox && runOemConfigPrepareCheckbox.isSelected()) {
                                                        returnStatus += (runOemConfigPrepare() ? "+oem-config-prepare-success" : "+oem-config-prepare-failed");
                                                    }

                                                    return returnStatus;
                                                }

                                                @Override
                                                protected void done() {
                                                    try {
                                                        String returnValue = get();

                                                        displayComputerSpecs(); // Always update display in case "statusNames[2]" worked but "statusNames[12]" failed.

                                                        if (returnValue.startsWith("success")) {
                                                            String oemConfigPrepareNote = "";
                                                            if (isLinux) {
                                                                if (returnValue.contains("+oem-config-prepare")) {
                                                                    if (returnValue.contains("+oem-config-prepare-success")) {
                                                                        oemConfigPrepareNote = "<br/><br/>"
                                                                                + new TwemojiImage("ThumbsUp", qaHelperWindow).toImgTag("left") + " Successfully prepared for shipping to end user (ran \"oem-config-prepare\")."
                                                                                + "<br/>";

                                                                        // Now running "oem-config-prepare" in "--quiet" mode, so will NOT show a separate window that needs to be brought forward.
                                                                        /* try {
                                                                            Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", "/bin/sleep 3; /usr/bin/wmctrl -a oem-config-prepare"});
                                                                        } catch (IOException showOemConfigPrepareDialogException) {
                                                                            if (isTestMode) {
                                                                                System.out.println("showOemConfigPrepareDialogException: " + showOemConfigPrepareDialogException);
                                                                            }
                                                                        } */
                                                                    } else {
                                                                        oemConfigPrepareNote = "<br/><br/>"
                                                                                + new TwemojiImage("Warning", qaHelperWindow).toImgTag("left") + " <b style='color: " + warningColorHTML + "'>Failed to prepare for shipping to end user (run \"oem-config-prepare\").</b>"
                                                                                + "<br/>";

                                                                        loadingWindow.closeWindow();
                                                                        playAlertSound("error");

                                                                        if (!new File("/usr/sbin/oem-config-prepare").exists()) {
                                                                            JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Failed to Install \"oem-config-gtk\" to be able to Run \"oem-config-prepare\"</b><br/><br/><i>To manually install \"oem-config-gtk\", open Terminal and run:</i><br/><pre>sudo apt install oem-config-gtk</pre><br/>After \"oem-config-gtk\" is installed, you can run \"oem-config-prepare\" manually by selecting <b>Prepare for shipping to end user</b> from the <b>system applicatons menu</b>.</html>", "QA Helper  —  Install Prepare for Shipping to End User Error", JOptionPane.ERROR_MESSAGE);
                                                                        } else {
                                                                            JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Failed to Run \"oem-config-prepare\"</b><br/><br/>You can run \"oem-config-prepare\" manually by selecting <b>Prepare for shipping to end user</b> from the <b>system applicatons menu</b>.</html>", "QA Helper  —  Run Prepare for Shipping to End User Error", JOptionPane.ERROR_MESSAGE);
                                                                        }
                                                                    }
                                                                }
                                                            } else if (isWindows) {
                                                                // Delete Drivers Cache Model Name file after "statusNames[12]" and re-create it in case any hardware has changed since installation.
                                                                File driversCacheModelNameFile = new File(windowsBuildInfoPath + "Drivers Cache Model Name.txt");
                                                                if (driversCacheModelNameFile.exists()) {
                                                                    driversCacheModelNameFile.delete();
                                                                }

                                                                createWindowsDriversCacheModelNameFile();
                                                            }

                                                            String updatedFreeGeekAdminPasswordNote = "";
                                                            if (returnValue.contains("+password-success")) {
                                                                updatedFreeGeekAdminPasswordNote = "<br/><br/>"
                                                                        + new TwemojiImage("ThumbsUp", qaHelperWindow).toImgTag("left") + " Successfully updated admin password to Free Geek Store password."
                                                                        + "<br/>";
                                                                playAlertSound("success");
                                                            } else if (returnValue.contains("+password-failed")) {
                                                                playAlertSound("error");
                                                                updatedFreeGeekAdminPasswordNote = "<br/><br/>"
                                                                        + new TwemojiImage("Warning", qaHelperWindow).toImgTag("left") + " <b style='color: " + warningColorHTML + "'>Failed to update admin password to Free Geek Store password.</b>"
                                                                        + "<br/>"
                                                                        + new TwemojiImage("Keyboard", qaHelperWindow).toImgTag("left") + " <i>TO UPDATE ADMIN PASSWORD MANUALLY, RUN \"passwd\" IN TERMINAL</i> " + new TwemojiImage("DoubleExclamationMark", qaHelperWindow).toImgTag("right")
                                                                        + "<br/>";
                                                            } else {
                                                                playAlertSound("success");
                                                            }

                                                            loadingWindow.closeWindow();

                                                            ArrayList<String> successfullyUpdatedStatusDialogButtons = new ArrayList<>();

                                                            if (isMacOS) {
                                                                if (new File("/Users/fg-demo/Applications/Cleanup After " + statusNames[12] + ".app").exists()) {
                                                                    successfullyUpdatedStatusDialogButtons.add("Cleanup After " + statusNames[12]);
                                                                } else if (new File("/Users/fg-demo/Applications/Free Geek Reset.app").exists()) {
                                                                    successfullyUpdatedStatusDialogButtons.add("Reset This Mac");
                                                                }
                                                            }

                                                            boolean didAddCompleteWindowsButton = false;
                                                            if (isWindows && !isWindowsPE && new File("\\Install\\Scripts\\Complete Windows.ps1").exists()) {
                                                                // Want Inventory Manager to be primary here and Complete Windows secondary.
                                                                successfullyUpdatedStatusDialogButtons.add("Run \"Complete Windows\" Script & Shut Down");
                                                                didAddCompleteWindowsButton = true;
                                                            }

                                                            successfullyUpdatedStatusDialogButtons.add(((isLinuxUbiquityMode || isWindowsPE) ? "Install OS" : "Quit"));

                                                            if (!isWindows && loggedInUserInfo.containsKey("printerIPs")) {
                                                                successfullyUpdatedStatusDialogButtons.add("Print Specs");
                                                            }

                                                            if (!didAddCompleteWindowsButton) {
                                                                successfullyUpdatedStatusDialogButtons.addAll(Arrays.asList("Shut Down", "Reboot")); // Don't want separate Shut Down button when Complete Windows button is shown.
                                                            }
                                                            successfullyUpdatedStatusDialogButtons.add("Keep Using QA Helper");

                                                            for (;;) {
                                                                int successfullyUpdatedStatusDialogResponse = JOptionPane.showOptionDialog(qaHelperWindow, "<html><b>Successfully Updated Status for ID \"" + pid + "\" to <u>" + statusNames[12] + "<u></b>" + oemConfigPrepareNote + updatedFreeGeekAdminPasswordNote + "<br/><br/><i>What would you like to do next?</i></html>", "QA Helper  —  Status Updated", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage("CheckMarkButton", qaHelperWindow).toImageIcon(32), successfullyUpdatedStatusDialogButtons.toArray(), successfullyUpdatedStatusDialogButtons.get(0));

                                                                String successfullyUpdatedStatusDialogResponseString = "Keep Using QA Helper";
                                                                if (successfullyUpdatedStatusDialogResponse > -1) {
                                                                    successfullyUpdatedStatusDialogResponseString = successfullyUpdatedStatusDialogButtons.get(successfullyUpdatedStatusDialogResponse);
                                                                }

                                                                if (successfullyUpdatedStatusDialogResponseString.equals("Cleanup After " + statusNames[12]) || successfullyUpdatedStatusDialogResponseString.equals("Reset This Mac")) {
                                                                    if (isMacOS) {
                                                                        try {
                                                                            Runtime.getRuntime().exec(new String[]{"/usr/bin/open", "-na", "/Users/fg-demo/Applications/" + (new File("/Users/fg-demo/Applications/Cleanup After " + statusNames[12] + ".app").exists() ? "Cleanup After " + statusNames[12] : "Free Geek Reset") + ".app"});
                                                                        } catch (IOException launchCleanupOrResetAppError) {
                                                                            System.out.println("launchCleanupOrResetAppError: " + launchCleanupOrResetAppError);
                                                                        }
                                                                    }

                                                                    System.exit(0);
                                                                    break;
                                                                } else if (successfullyUpdatedStatusDialogResponseString.equals("Print Specs")) {
                                                                    btnSaveOrPrintSpecsActionPerformed(null); // NOTE: Stay in loop to prompt again.
                                                                } else if (successfullyUpdatedStatusDialogResponseString.equals("Install OS") || successfullyUpdatedStatusDialogResponseString.equals("Quit")) {
                                                                    System.exit(0);
                                                                    break;
                                                                } else if (successfullyUpdatedStatusDialogResponseString.equals("Run \"Complete Windows\" Script & Shut Down")) {
                                                                    if (isWindows && new File("\\Install\\Scripts\\Complete Windows.ps1").exists()) {
                                                                        try {
                                                                            Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\cmd.exe", "/c", "START /MAX \\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoLogo -NoProfile -WindowStyle Maximized -ExecutionPolicy Unrestricted -File \"\\Install\\Scripts\\Complete Windows.ps1\""});
                                                                            TimeUnit.SECONDS.sleep(1);
                                                                            writeToHelperLogFile("Ran Complete Windows");
                                                                            logSpecsAction("Ran Complete Windows");
                                                                            TimeUnit.SECONDS.sleep(1);
                                                                            System.exit(0);
                                                                            break;
                                                                        } catch (IOException | InterruptedException runCompleteWindowsException) {
                                                                            if (isTestMode) {
                                                                                System.out.println("runCompleteWindowsException: " + runCompleteWindowsException);
                                                                            }
                                                                        }
                                                                    } else {
                                                                        playAlertSound("beep");
                                                                    }
                                                                } else if (successfullyUpdatedStatusDialogResponseString.equals("Shut Down")) {
                                                                    if (isLinux) {
                                                                        try {
                                                                            while (!new CommandReader(new String[]{"/usr/bin/pgrep", "-fn", "/auto-scripts/.*\\+(user|root)\\.sh$"}).getFirstOutputLine().isEmpty()) {
                                                                                TimeUnit.SECONDS.sleep(2);
                                                                            }

                                                                            Runtime.getRuntime().exec(new String[]{"/bin/systemctl", "poweroff"}).waitFor();
                                                                            TimeUnit.SECONDS.sleep(2);
                                                                        } catch (IOException | InterruptedException systemctlPowerOffException) {
                                                                            if (isTestMode) {
                                                                                System.out.println("systemctlPowerOffException: " + systemctlPowerOffException);
                                                                            }
                                                                        }
                                                                    } else if (isWindows) {
                                                                        try {
                                                                            Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "Stop-Computer"}).waitFor();
                                                                            TimeUnit.SECONDS.sleep(2);
                                                                        } catch (IOException | InterruptedException stopComputerException) {
                                                                            if (isTestMode) {
                                                                                System.out.println("stopComputerException: " + stopComputerException);
                                                                            }
                                                                        }
                                                                    } else if (isMacOS) {
                                                                        try {
                                                                            Runtime.getRuntime().exec(new String[]{"/usr/bin/osascript", "-e", "tell application id \"com.apple.systemevents\" to shut down with state saving preference"}).waitFor();
                                                                            TimeUnit.SECONDS.sleep(2);
                                                                        } catch (IOException | InterruptedException osascriptShutDownException) {
                                                                            if (isTestMode) {
                                                                                System.out.println("osascriptShutDownException: " + osascriptShutDownException);
                                                                            }
                                                                        }
                                                                    }

                                                                    System.exit(0);
                                                                    break;
                                                                } else if (successfullyUpdatedStatusDialogResponseString.equals("Reboot")) {
                                                                    if (isLinux) {
                                                                        try {
                                                                            while (!new CommandReader(new String[]{"/usr/bin/pgrep", "-fn", "/auto-scripts/.*\\+(user|root)\\.sh$"}).getFirstOutputLine().isEmpty()) {
                                                                                TimeUnit.SECONDS.sleep(2);
                                                                            }

                                                                            Runtime.getRuntime().exec(new String[]{"/bin/systemctl", "reboot"}).waitFor();
                                                                            TimeUnit.SECONDS.sleep(2);
                                                                        } catch (IOException | InterruptedException systemctlRebootException) {
                                                                            if (isTestMode) {
                                                                                System.out.println("systemctlRebootException: " + systemctlRebootException);
                                                                            }
                                                                        }
                                                                    } else if (isWindows) {
                                                                        try {
                                                                            Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "-NoLogo", "-NoProfile", "-NonInteractive", "-Command", "Restart-Computer"}).waitFor();
                                                                            TimeUnit.SECONDS.sleep(2);
                                                                        } catch (IOException | InterruptedException restartComputerException) {
                                                                            if (isTestMode) {
                                                                                System.out.println("restartComputerException: " + restartComputerException);
                                                                            }
                                                                        }
                                                                    } else if (isMacOS) {
                                                                        try {
                                                                            Runtime.getRuntime().exec(new String[]{"/usr/bin/osascript", "-e", "tell application id \"com.apple.systemevents\" to restart with state saving preference"}).waitFor();
                                                                            TimeUnit.SECONDS.sleep(2);
                                                                        } catch (IOException | InterruptedException osascriptRestartException) {
                                                                            if (isTestMode) {
                                                                                System.out.println("osascriptRestartException: " + osascriptRestartException);
                                                                            }
                                                                        }
                                                                    }

                                                                    System.exit(0);
                                                                    break;
                                                                } else {
                                                                    break;
                                                                }
                                                            }
                                                        } else if (returnValue.equals("update-failed")) {
                                                            loadingWindow.closeWindow();
                                                            playAlertSound("error");
                                                            JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Failed to Log Specs and/or Update Status to <u>" + statusNames[12] + "</u></b></html>", "QA Helper  —  Update Status Error", JOptionPane.ERROR_MESSAGE);
                                                        }
                                                    } catch (HeadlessException | InterruptedException | ExecutionException setStatusToQACompleteException) {
                                                        if (isTestMode) {
                                                            System.out.println("setStatusToQACompleteException: " + setStatusToQACompleteException);
                                                        }

                                                        sendErrorEmail("setStatusToQACompleteException: " + setStatusToQACompleteException);

                                                        playAlertSound("error");
                                                    }

                                                    loadingWindow.closeWindow();
                                                    setActionsEnabled(true);

                                                    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                                                    loadingWindow.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                                                }
                                            }).execute();
                                        } else {
                                            loadingWindow.closeWindow();
                                            playAlertSound("error");

                                            if (returnValue.contains("+must-set-product-type")) {
                                                JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>This Computer Is Not Ready to Be Marked As <u>" + statusNames[12] + "</u></b><br/><br/><i>To be able to <u>" + statusNames[12] + "</u> this computer, you must first <u>set the Product Type" + (pid.startsWith("FG") ? "" : " on PCsCRM.com") + "</u>.</i></html>", "QA Helper  —  Not Ready for " + statusNames[12], JOptionPane.ERROR_MESSAGE, new TwemojiImage("NoEntry", qaHelperWindow).toImageIcon(32));
                                                btnDoneTestingActionPerformed(null);
                                            } else if (isWindows) {
                                                if (dpkGmrlStickerConfirmed) {
                                                    JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>This Computer Is Not Ready to Be Marked As <u>" + statusNames[12] + "</u></b><br/><br/><i>To be able to <u>" + statusNames[12] + "</u> this computer, you must correct the Windows license issues.</i></html>", "QA Helper  —  Not Ready for " + statusNames[12], JOptionPane.ERROR_MESSAGE, new TwemojiImage("NoEntry", qaHelperWindow).toImageIcon(32));
                                                    btnCheckWindowsLicenseActionPerformed(new java.awt.event.ActionEvent(btnCheckWindowsLicense, java.awt.event.ActionEvent.ACTION_PERFORMED, statusNames[12] + " License Issue")); // Do not pass "null" evt since that indicates justSetProductKey.
                                                } else {
                                                    JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>This Computer Is Not Ready to Be Marked As <u>" + statusNames[12] + "</u></b><br/><br/><i>To be able to <u>" + statusNames[12] + "</u> this computer, you must confirm the \"Genuine Microsoft Refurbisher Label\" (GMRL) sticker has been affixed to this computer since a DPK has been applied.</i></html>", "QA Helper  —  Not Ready for " + statusNames[12], JOptionPane.ERROR_MESSAGE, new TwemojiImage("NoEntry", qaHelperWindow).toImageIcon(32));
                                                }
                                            } else if (isMacOS) {
                                                JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>This Mac Is Not Ready to Be Marked As <u>" + statusNames[12] + "</u></b><br/><br/><i>To be able to <u>" + statusNames[12] + "</u> this Mac, <u>Free Geek Setup</u> must finish running.</i></html>", "QA Helper  —  Not Ready for " + statusNames[12], JOptionPane.ERROR_MESSAGE, new TwemojiImage("NoEntry", qaHelperWindow).toImageIcon(32));

                                                try {
                                                    Runtime.getRuntime().exec(new String[]{"/usr/bin/open", "-na", "/Users/fg-demo/Applications/Free Geek Setup.app"});
                                                } catch (IOException launchFreeGeekSetupError) {
                                                    System.out.println("launchFreeGeekSetupError: " + launchFreeGeekSetupError);
                                                }
                                            } else if (isLinux && returnValue.contains("+apt-cache-error")) {
                                                JTextArea aptUpdateErrorTextArea = new JTextArea(20, 100);
                                                aptUpdateErrorTextArea.setText(returnValue.substring(returnValue.indexOf("\n") + 1));
                                                aptUpdateErrorTextArea.setEditable(false);
                                                aptUpdateErrorTextArea.setLineWrap(true);
                                                aptUpdateErrorTextArea.setWrapStyleWord(true);
                                                aptUpdateErrorTextArea.setFont(new Font(Font.MONOSPACED, lblVersion.getFont().getStyle(), aptUpdateErrorTextArea.getFont().getSize()));
                                                JScrollPane aptUpdateErrorScrollPane = new JScrollPane(aptUpdateErrorTextArea);

                                                JOptionPane.showMessageDialog(qaHelperWindow, new Object[]{"<html><b>Failed to Update \"apt\" Cache Before <u>" + statusNames[12] + "</u></b><br/><br/></html>", aptUpdateErrorScrollPane, "<html><br/>This should not have happened, please inform Free Geek I.T.</html>"}, "QA Helper  —  Not Ready for " + statusNames[12] + " (\"apt\" Update Error)", JOptionPane.ERROR_MESSAGE, new TwemojiImage("NoEntry", qaHelperWindow).toImageIcon(32));
                                            }
                                        }
                                    } catch (HeadlessException | InterruptedException | ExecutionException confirmReadyForQACompleteException) {
                                        if (isTestMode) {
                                            System.out.println("confirmReadyForQACompleteException: " + confirmReadyForQACompleteException);
                                        }

                                        playAlertSound("error");
                                    }

                                    if (!qaCompleteAllowed || !dpkGmrlStickerConfirmed) {
                                        if (!loadingWindow.getLoadingText().contains("Checking Windows License")) {
                                            loadingWindow.closeWindow();
                                            setActionsEnabled(true);
                                        }

                                        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                                        loadingWindow.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                                    }
                                }
                            }).execute();
                        } else {
                            setActionsEnabled(true);
                        }
                    } else if (doneTestingResponseString.endsWith("FG Specs")) {
                        String fgSpecsURL = privateStrings.getFreeGeekSpecsURL(pid, isTestMode);

                        try {
                            String loginPassword = new String(pswPassword.getPassword());
                            if (loginPassword.equals("intern")) {
                                loginPassword = privateStrings.getInternPassword();
                            }

                            File fgSpecsTempFile = File.createTempFile("qa_helper-fg_specs", ".html");
                            fgSpecsTempFile.deleteOnExit();

                            try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(fgSpecsTempFile))) {
                                bufferedWriter.write("<!DOCTYPE html>"
                                        + "<html>"
                                        + "<head><title>FG Specs</title></head>"
                                        + "<body onload=\"javascript:document.getElementById('fgSpecsLogin').submit();\">"
                                        + "<form id=\"fgSpecsLogin\" method=\"post\" action=\"" + fgSpecsURL + "\">"
                                        + "<input name=\"username\" type=\"hidden\" value=\"" + username + "\" />"
                                        + "<input name=\"password\" type=\"hidden\" value=\"" + loginPassword + "\" />"
                                        + "<input name=\"edit\" type=\"hidden\" value=\"Edit Specs\" />"
                                        + "</form>"
                                        + "</body>"
                                        + "</html>");
                            } catch (Exception writeFGSpecsTempFileException) {
                                if (isTestMode) {
                                    System.out.println("writeFGSpecsTempFileException: " + writeFGSpecsTempFileException);
                                }
                            }

                            fgSpecsURL = fgSpecsTempFile.toURI().toString();
                        } catch (IOException createFGSpecsTempFileException) {
                            if (isTestMode) {
                                System.out.println("createFGSpecsTempFileException: " + createFGSpecsTempFileException);
                            }
                        }

                        if (isLinux) {
                            boolean enoughRAMforWebBrowser = true;

                            if (isLinuxBootedToRAM) {
                                // There may not be enough free RAM for browser when booted "toram"
                                try {
                                    enoughRAMforWebBrowser = (2000000000 <= Long.parseLong(new CommandReader("/usr/bin/free -b | /usr/bin/awk '($1 == \"Mem:\") { print $4; exit }'").getFirstOutputLine()));
                                } catch (NumberFormatException getFreeMemoryException) {
                                    if (isTestMode) {
                                        System.out.println("getFreeMemoryException: " + getFreeMemoryException);
                                    }
                                }
                            }

                            if (enoughRAMforWebBrowser) {
                                boolean didLaunchChrome = false;
                                if (new File("/usr/bin/google-chrome-stable").exists() && !isLinuxUbiquityMode) { // Do not try to launch Chrome and only use Firefox when in Ubiquity mode (even if it has been pre-installed) since Firefox is simpler to launch without the app showing prompts.
                                    try {
                                        Runtime.getRuntime().exec(new String[]{"/usr/bin/google-chrome-stable", "--password-store=basic", "--start-maximized", fgSpecsURL});
                                        didLaunchChrome = true;
                                    } catch (IOException chromeException) {
                                        if (isTestMode) {
                                            System.out.println("chromeException: " + chromeException);
                                        }
                                    }
                                }

                                if (!didLaunchChrome) {
                                    try {
                                        if (isLinuxUbiquityMode) { // Sometimes Firefox hangs/freezes in Linux pre-install enviroment, so quit all Firefox instances before launching a new one.
                                            Runtime.getRuntime().exec(new String[]{"/usr/bin/pkill", "firefox"});
                                        }

                                        // Run Firefox as sudo in pre-install environment to fix an issue launching Firefox when java is not launched as sudo.
                                        Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", (isLinuxUbiquityMode ? "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk " : "") + "/usr/bin/firefox " + fgSpecsURL});
                                    } catch (IOException firefoxException) {
                                        if (isTestMode) {
                                            System.out.println("firefoxException: " + firefoxException);
                                        }

                                        try {
                                            Runtime.getRuntime().exec(new String[]{"/usr/bin/xdg-open", fgSpecsURL});
                                        } catch (IOException xdgOpenException) {
                                            if (isTestMode) {
                                                System.out.println("xdgOpenException: " + xdgOpenException);
                                            }
                                        }
                                    }
                                }
                            } else {
                                playAlertSound("beep");
                                JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Not Enough Free RAM to Open Web Browser</b><br/><br/><i>Instead, you continue on FG Specs on another computer.</i></html>", "QA Helper  —  Cannot Open Web Browser", JOptionPane.WARNING_MESSAGE);
                            }
                        } else {
                            try {
                                Desktop.getDesktop().browse(new URI(fgSpecsURL));
                            } catch (IOException | URISyntaxException openFGSpecsException) {
                                if (isTestMode) {
                                    System.out.println("openFGSpecsException: " + openFGSpecsException);
                                }
                            }
                        }

                        (new SwingWorker<Void, Void>() {
                            @Override
                            protected Void doInBackground() throws Exception {
                                TimeUnit.SECONDS.sleep(10); // Wait 10 seconds before quitting so that the FG Specs temporary login file isn't deleted before it is loaded.

                                return null;
                            }

                            @Override
                            protected void done() {
                                System.exit(0);
                            }
                        }).execute();
                    } else {
                        System.exit(0);
                    }
                } else {
                    playAlertSound("beep");
                    setActionsEnabled(true);
                }
            }
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_btnDoneTestingActionPerformed

    private void menForceShowAllTestsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menForceShowAllTestsActionPerformed
        if (actionsEnabled) {
            forceShowAllTests = !forceShowAllTests;

            displayComputerSpecs();
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menForceShowAllTestsActionPerformed

    private void menCopySpecValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menCopySpecValueActionPerformed
        JMenuItem clickedMenuItem = (JMenuItem) evt.getSource();
        JPopupMenu parentPopupMenu = (JPopupMenu) clickedMenuItem.getAccessibleContext().getAccessibleParent();
        JLabel clickedLabel = (JLabel) parentPopupMenu.getInvoker();

        if (clickedLabel != null) {
            String thisToolTipText = clickedLabel.getToolTipText();

            if (thisToolTipText != null) {
                if (thisToolTipText.contains("<br/>&bull; ")) {
                    thisToolTipText = thisToolTipText.replace("</b><br/>&bull; ", "</b><br/>").replace("<br/>&bull; ", " + ");
                }

                String thisSpecValue = StringEscapeUtils.unescapeHtml4(thisToolTipText);

                if (thisSpecValue.contains("<br/>")) {
                    String[] thisSpecValueParts = thisSpecValue.split("<br/>");
                    thisSpecValue = thisSpecValueParts[1];

                    if (thisSpecValueParts[0].equals("<html><b>Battery Health:</b>") && !computerSpecs.getPowerAdapter().isEmpty()) {
                        thisSpecValue += " + " + computerSpecs.getPowerAdapter();
                    }
                }

                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(thisSpecValue), null);
                playAlertSound("success");
            } else if (clickedLabel.equals(lblStatus) && !pid.equals("N/A")) {
                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(pid), null);
                playAlertSound("success");
            } else {
                playAlertSound("error");
            }
        } else {
            playAlertSound("error");
        }
    }//GEN-LAST:event_menCopySpecValueActionPerformed

    private void menSearchSpecValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menSearchSpecValueActionPerformed
        JMenuItem clickedMenuItem = (JMenuItem) evt.getSource();
        JPopupMenu parentPopupMenu = (JPopupMenu) clickedMenuItem.getAccessibleContext().getAccessibleParent();
        JLabel clickedLabel = (JLabel) parentPopupMenu.getInvoker();

        if (clickedLabel != null) {
            String thisSpecValue = "";
            boolean isSerialField = false;
            boolean isID = false;

            String thisToolTipText = clickedLabel.getToolTipText();

            if (thisToolTipText != null) {
                if (thisToolTipText.contains("<br/>&bull; ")) {
                    thisToolTipText = thisToolTipText.replace("</b><br/>&bull; ", "</b><br/>").replace("<br/>&bull; ", " + ");
                }

                thisSpecValue = StringEscapeUtils.unescapeHtml4(thisToolTipText);

                if (thisSpecValue.contains("<br/>")) {
                    String[] thisSpecValueParts = thisSpecValue.split("<br/>");
                    thisSpecValue = thisSpecValueParts[1];

                    if (thisSpecValueParts[0].equals("<html><b>Serial:</b>")) {
                        isSerialField = true;
                    } else if (thisSpecValueParts[0].equals("<html><b>Battery Health:</b>") && !computerSpecs.getPowerAdapter().isEmpty()) {
                        thisSpecValue += " + " + computerSpecs.getPowerAdapter();
                    }
                }
            } else if (clickedLabel.equals(lblStatus) && isLoggedIn && !pid.equals("N/A")) {
                thisSpecValue = pid;
                isID = true;
            }

            if (thisSpecValue.isEmpty()) {
                playAlertSound("error");
            } else {
                try {
                    String urlEncodedSpecValue = URLEncoder.encode(thisSpecValue, StandardCharsets.UTF_8.toString());
                    String specSearchURL = "https://google.com/search?q=" + urlEncodedSpecValue;
                    ArrayList<String> specSearchURLs = new ArrayList<>();

                    if (isSerialField) {
                        switch (computerSpecs.getFullBrand()) {
                            case "Apple":
                                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(thisSpecValue), null);
                                specSearchURLs.add("https://checkcoverage.apple.com"); // Always open Check Coverage (Warranty) page, but can't be automated so copy serial to clipboard.

                                LinkedHashMap<String, String> getAppleModelParameters = new LinkedHashMap<>();
                                getAppleModelParameters.put("format", "text");
                                getAppleModelParameters.put("serial", thisSpecValue);
                                getAppleModelParameters.put("model_id", computerSpecs.getMacModelIdentifier());
                                String[] modelInfoLines = new WebReader(privateStrings.getFreeGeekAPI("apple-model", isTestMode), getAppleModelParameters).getOutputLines();
                                // If is a 10-character random serial without a config code, won't be able to get the Specs ID from the serial, so also pass the Model ID as a fallback check.
                                String docsURL = "";
                                String specsURL = "";
                                for (String thisModelInfoLine : modelInfoLines) {
                                    if (thisModelInfoLine.startsWith("docs_url: ")) {
                                        docsURL = thisModelInfoLine.substring(thisModelInfoLine.indexOf(": ") + 2);
                                    } else if (thisModelInfoLine.startsWith("specs_url: ")) {
                                        specsURL = thisModelInfoLine.substring(thisModelInfoLine.indexOf(": ") + 2);
                                    }
                                }
                                if (!specsURL.isEmpty()) {
                                    specSearchURL = specsURL;

                                    if (!docsURL.isEmpty()) { // If got BOTH Docs and Specs, open both! (Specs will be opened below).
                                        specSearchURLs.add(docsURL);
                                    }
                                } else if (!docsURL.isEmpty()) {
                                    specSearchURL = docsURL;
                                }

                                break;
                            case "Dell":
                                specSearchURL = "https://www.dell.com/support/product-details/servicetag/" + urlEncodedSpecValue;

                                break;
                            case "Lenovo":
                                specSearchURL = "https://pcsupport.lenovo.com/products/" + urlEncodedSpecValue;

                                break;
                            case "HP":
                                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(thisSpecValue), null);

                                specSearchURL = "https://support.hp.com/computer";

                                break;
                            default:
                                break;
                        }
                    } else if (isID) {
                        if (thisSpecValue.startsWith("FG")) {
                            specSearchURL = privateStrings.getFreeGeekSpecsURL(thisSpecValue, isTestMode);
                        } else {
                            Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(thisSpecValue), null);
                            specSearchURL = "https://" + (isTestMode ? "test." : "") + "pcscrm.com/contact/pidsearch";
                        }
                    }

                    specSearchURLs.add(specSearchURL);

                    if (isLinux) {
                        boolean enoughRAMforWebBrowser = true;

                        if (isLinuxBootedToRAM) {
                            // There may not be enough free RAM for browser when booted "toram"
                            try {
                                enoughRAMforWebBrowser = (2000000000 <= Long.parseLong(new CommandReader("/usr/bin/free -b | /usr/bin/awk '($1 == \"Mem:\") { print $4; exit }'").getFirstOutputLine()));
                            } catch (NumberFormatException getFreeMemoryException) {
                                if (isTestMode) {
                                    System.out.println("getFreeMemoryException: " + getFreeMemoryException);
                                }
                            }
                        }

                        if (enoughRAMforWebBrowser) {
                            for (String thisSpecSearchURL : specSearchURLs) {
                                boolean didLaunchChrome = false;
                                if (new File("/usr/bin/google-chrome-stable").exists() && !isLinuxUbiquityMode) { // Do not try to launch Chrome and only use Firefox when in Ubiquity mode (even if it has been pre-installed) since Firefox is simpler to launch without the app showing prompts.
                                    try {
                                        Runtime.getRuntime().exec(new String[]{"/usr/bin/google-chrome-stable", "--password-store=basic", "--start-maximized", "--incognito", thisSpecSearchURL});
                                        didLaunchChrome = true;
                                    } catch (IOException chromeException) {
                                        if (isTestMode) {
                                            System.out.println("chromeException: " + chromeException);
                                        }
                                    }
                                }

                                if (!didLaunchChrome) {
                                    try {
                                        if (isLinuxUbiquityMode) { // Sometimes Firefox hangs/freezes in Linux pre-install enviroment, so quit all Firefox instances before launching a new one.
                                            Runtime.getRuntime().exec(new String[]{"/usr/bin/pkill", "firefox"});
                                        }

                                        // Run Firefox as sudo in pre-install environment to fix an issue launching Firefox when java is not launched as sudo.
                                        Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", (isLinuxUbiquityMode ? "printf '%s\\n' " + adminPasswordQuotedForShell + " | /usr/bin/sudo -Sk " : "") + "/usr/bin/firefox -private " + thisSpecSearchURL});
                                    } catch (IOException firefoxException) {
                                        if (isTestMode) {
                                            System.out.println("firefoxException: " + firefoxException);
                                        }

                                        try {
                                            Runtime.getRuntime().exec(new String[]{"/usr/bin/xdg-open", thisSpecSearchURL});
                                        } catch (IOException xdgOpenException) {
                                            if (isTestMode) {
                                                System.out.println("xdgOpenException: " + xdgOpenException);
                                            }
                                            playAlertSound("error");
                                        }
                                    }
                                }
                            }
                        } else {
                            playAlertSound("beep");
                            JOptionPane.showMessageDialog(qaHelperWindow, "<html><b>Not Enough Free RAM to Open Web Browser</b><br/><br/><i>You will be able to open a web browser after you've installed the OS.</i></html>", "QA Helper  —  Cannot Open Web Browser", JOptionPane.WARNING_MESSAGE);
                        }
                    } else {
                        for (String thisSpecSearchURL : specSearchURLs) {
                            try {
                                Desktop.getDesktop().browse(new URI(thisSpecSearchURL));
                            } catch (IOException | URISyntaxException openSpecsSearchURLException) {
                                if (isTestMode) {
                                    System.out.println("openSpecsSearchURLException: " + openSpecsSearchURLException);
                                }
                                playAlertSound("error");
                            }
                        }
                    }
                } catch (HeadlessException | UnsupportedEncodingException searchSpecValueURLEncodeException) {
                    if (isTestMode) {
                        System.out.println("searchSpecValueURLEncodeException: " + searchSpecValueURLEncodeException);
                    }
                    playAlertSound("error");
                }
            }
        } else {
            playAlertSound("error");
        }
    }//GEN-LAST:event_menSearchSpecValueActionPerformed

    private void menReRunSetupWindowsScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menReRunSetupWindowsScriptActionPerformed
        if (actionsEnabled && isLoggedIn && isWindows && !isWindowsPE && new File("\\Install\\Scripts\\Setup Windows.ps1").exists()) {
            if (JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>Are you sure you want to re-run the \"Setup Windows\" script?</b></html>", "QA Helper  —  Confirm Re-Run \"Setup Windows\" Script", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
                try {
                    new File(System.getProperty("user.home") + "\\Desktop\\QA Helper.lnk").delete();

                    Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\cmd.exe", "/c", "START /MAX \\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoLogo -NoProfile -WindowStyle Maximized -ExecutionPolicy Unrestricted -File \"\\Install\\Scripts\\Setup Windows.ps1\""});
                    System.exit(0);
                } catch (IOException reRunSetupWindowsException) {
                    if (isTestMode) {
                        System.out.println("reRunSetupWindowsException: " + reRunSetupWindowsException);
                    }
                }
            }
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menReRunSetupWindowsScriptActionPerformed

    private void menRunCompleteWindowsScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menRunCompleteWindowsScriptActionPerformed
        if (actionsEnabled && isLoggedIn && isWindows && !isWindowsPE && new File("\\Install\\Scripts\\Complete Windows.ps1").exists()) {
            if (JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>Are you sure you want to run the \"Complete Windows\" script and shut down this computer?</b></html>", "QA Helper  —  Confirm Run \"Complete Windows\" Script", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage("CheckMarkButton", qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                try {
                    Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\cmd.exe", "/c", "START /MAX \\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoLogo -NoProfile -WindowStyle Maximized -ExecutionPolicy Unrestricted -File \"\\Install\\Scripts\\Complete Windows.ps1\""});
                    TimeUnit.SECONDS.sleep(1);
                    writeToHelperLogFile("Ran Complete Windows (Manual)");
                    logSpecsAction("Ran Complete Windows (Manual)");
                    TimeUnit.SECONDS.sleep(1);
                    System.exit(0);
                } catch (IOException | InterruptedException runCompleteWindowsException) {
                    if (isTestMode) {
                        System.out.println("runCompleteWindowsException: " + runCompleteWindowsException);
                    }
                }
            }
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menRunCompleteWindowsScriptActionPerformed

    private void menCacheDriversWindowsScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menCacheDriversWindowsScriptActionPerformed
        if (actionsEnabled && isLoggedIn && isWindows && !isWindowsPE && new File("\\Install\\Scripts\\Complete Windows.ps1").exists()) {
            boolean canManuallyCacheDrivers = false;

            if (new File("\\Install\\Scripts\\Complete Windows.ps1").exists()) {
                try {
                    List<String> completeWindowsScriptLine = Files.readAllLines(Paths.get("\\Install\\Scripts\\Complete Windows.ps1"));

                    for (String thisCompleteWindowsScriptLine : completeWindowsScriptLine) {
                        if (thisCompleteWindowsScriptLine.startsWith("$onlyCacheDriversMode =")) {
                            canManuallyCacheDrivers = true;
                            break;
                        } else if (thisCompleteWindowsScriptLine.startsWith("$Host.UI.RawUI.WindowTitle =")) {
                            // $onlyCacheDriversMode will be set before setting the script window title, so stop searching if we got that far to not bother searching the whole script.
                            break;
                        }
                    }
                } catch (IOException readCompleteWindowsScriptException) {
                    if (isTestMode) {
                        System.out.println("readCompleteWindowsScriptException: " + readCompleteWindowsScriptException);
                    }
                }
            }

            if (canManuallyCacheDrivers) {
                if (JOptionPane.showConfirmDialog(qaHelperWindow, "<html><b>Are you sure you want to cache the currently installed drivers for this computer model?</b></html>", "QA Helper  —  Confirm Cache Drivers", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new TwemojiImage("Toolbox", qaHelperWindow).toImageIcon(32)) == JOptionPane.YES_OPTION) {
                    try {
                        Runtime.getRuntime().exec(new String[]{"\\Windows\\System32\\cmd.exe", "/c", "START /MAX \\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoLogo -NoProfile -WindowStyle Maximized -ExecutionPolicy Unrestricted -File \"\\Install\\Scripts\\Complete Windows.ps1\" OnlyCacheDrivers"});
                    } catch (IOException runCacheDriversException) {
                        if (isTestMode) {
                            System.out.println("runCacheDriversException: " + runCacheDriversException);
                        }
                    }
                }
            } else {
                playAlertSound("error");
            }
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menCacheDriversWindowsScriptActionPerformed

    private void menOpenFileExplorerPEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menOpenFileExplorerPEActionPerformed
        if (actionsEnabled && isWindows && isWindowsPE && new File("\\Install\\Diagnostic Tools\\File Explorer\\File Explorer (PE).exe").exists()) {
            try {
                Runtime.getRuntime().exec(new String[]{"\\Install\\Diagnostic Tools\\File Explorer\\File Explorer (PE).exe"});

                if (isWindowsPE) {
                    setState(Frame.ICONIFIED);
                }
            } catch (IOException openFileExplorereException) {
                if (isTestMode) {
                    System.out.println("openFileExplorereException: " + openFileExplorereException);
                }
                playAlertSound("error");
            }
        } else {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menOpenFileExplorerPEActionPerformed

    private void menIncreaseTextSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menIncreaseTextSizeActionPerformed
        // Based On: https://github.com/JFormDesigner/FlatLaf/blob/4f2256f713c37310111e831398e648737abe6eed/flatlaf-demo/src/main/java/com/formdev/flatlaf/demo/DemoFrame.java#L210
        if (actionsEnabled || (evt == null)) {
            if (evt != null) {
                setActionsEnabled(false);
            }

            themeUpdated = true;

            Font defaultFont = UIManager.getFont("defaultFont");
            Font newDefaultFont = defaultFont.deriveFont((float) (defaultFont.getSize() + 1));
            UIManager.put("defaultFont", newDefaultFont);

            displayComputerSpecs();

            if (evt != null) {
                (new SwingWorker<Void, Void>() {
                    @Override
                    protected Void doInBackground() throws Exception {
                        while (themeUpdated) { // Wait in background until resize is completely finished before re-enabling actions.
                            TimeUnit.MILLISECONDS.sleep(10);
                        }

                        return null;
                    }

                    @Override
                    protected void done() {
                        setActionsEnabled(true);
                    }
                }).execute();
            }
        } else if (!themeUpdated) {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menIncreaseTextSizeActionPerformed

    private void menDecreaseTextSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menDecreaseTextSizeActionPerformed
        // Based On: https://github.com/JFormDesigner/FlatLaf/blob/4f2256f713c37310111e831398e648737abe6eed/flatlaf-demo/src/main/java/com/formdev/flatlaf/demo/DemoFrame.java#L219
        if (actionsEnabled || (evt == null)) {
            Font defaultFont = UIManager.getFont("defaultFont");
            float newFontSize = (float) Math.max(defaultFont.getSize() - 1, 6);
            if (defaultFont.getSize() != newFontSize) {
                if (evt != null) {
                    setActionsEnabled(false);
                }

                themeUpdated = true;

                Font newDefaultFont = defaultFont.deriveFont(newFontSize);
                UIManager.put("defaultFont", newDefaultFont);

                displayComputerSpecs();

                if (evt != null) {
                    (new SwingWorker<Void, Void>() {
                        @Override
                        protected Void doInBackground() throws Exception {
                            while (themeUpdated) { // Wait in background until resize is completely finished before re-enabling actions.
                                TimeUnit.MILLISECONDS.sleep(10);
                            }

                            return null;
                        }

                        @Override
                        protected void done() {
                            setActionsEnabled(true);
                        }
                    }).execute();
                }
            } else {
                playAlertSound("beep");
            }
        } else if (!themeUpdated) {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menDecreaseTextSizeActionPerformed

    private void menResetTextSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menResetTextSizeActionPerformed
        if (actionsEnabled || (evt == null)) {
            Font defaultFont = UIManager.getFont("defaultFont");
            if ((defaultFont.getSize() != defaultTextSize) || (evt == null)) {
                if (evt != null) {
                    setActionsEnabled(false);
                }

                themeUpdated = true;

                Font newDefaultFont = defaultFont.deriveFont(defaultTextSize);
                UIManager.put("defaultFont", newDefaultFont);

                displayComputerSpecs();

                if (evt != null) {
                    (new SwingWorker<Void, Void>() {
                        @Override
                        protected Void doInBackground() throws Exception {
                            while (themeUpdated) { // Wait in background until resize is completely finished before re-enabling actions.
                                TimeUnit.MILLISECONDS.sleep(10);
                            }

                            return null;
                        }

                        @Override
                        protected void done() {
                            setActionsEnabled(true);
                        }
                    }).execute();
                }
            } else {
                playAlertSound("beep");
            }
        } else if (!themeUpdated) {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menResetTextSizeActionPerformed

    private void menMaxTextSizeForScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menMaxTextSizeForScreenActionPerformed
        if (actionsEnabled) {
            setActionsEnabled(false);

            if (windowMoved) {
                // If the window has been manually moved before, re-center the window before resizing and set "movedWindow" to false so that
                // the resize at the end of "displayComputerSpecs" will also re-center the window to be sure it's properly visible at the max screen size.
                windowMoved = false;
                ignoreWindowMovesUntilTime = System.currentTimeMillis() + 1500;
                setLocationRelativeTo(null);
            }

            (new SwingWorker<Void, String>() {
                @Override
                protected Void doInBackground() throws Exception {
                    while (themeUpdated) { // Make sure any previous display updates are fully done before resizing.
                        TimeUnit.MILLISECONDS.sleep(10);
                    }

                    if (contentScrollPane.getHorizontalScrollBar().isVisible() || contentScrollPane.getVerticalScrollBar().isVisible()) {
                        while ((UIManager.getFont("defaultFont").getSize() > 6) && (contentScrollPane.getHorizontalScrollBar().isVisible() || contentScrollPane.getVerticalScrollBar().isVisible())) {
                            themeUpdated = true; // Must set "themeUpdated" to "true" before calling "menDecreaseTextSizeActionPerformed" on the main thread since it might not get updated in this background thread immediately causing the wait loop would never get hit.

                            publish("decrease-text-size"); // The size change must happen on the main thread, but we want to wait for the display update in the background.

                            while (themeUpdated) { // Wait until the display update is completely finished before checking whether or not scrollbars are visible and decreasing again if necessary.
                                TimeUnit.MILLISECONDS.sleep(10);
                            }
                        }
                    } else {
                        while (!contentScrollPane.getHorizontalScrollBar().isVisible() && !contentScrollPane.getVerticalScrollBar().isVisible()) {
                            themeUpdated = true; // Must set "themeUpdated" to "true" before calling "menIncreaseTextSizeActionPerformed" on the main thread since it might not get updated in this background thread immediately causing the wait loop would never get hit.

                            publish("increase-text-size"); // The size change must happen on the main thread, but we want to wait for the display update in the background.

                            while (themeUpdated) { // Wait until the display update is completely finished before checking whether or not scrollbars are visible and increasing again if necessary.
                                TimeUnit.MILLISECONDS.sleep(10);
                            }
                        }

                        publish("decrease-text-size"); // The previous loop increased size until scroll bars were visible, so we need to go one step back down to the max size without scrollbars.

                        while (themeUpdated) { // Wait until the display update is completely finished before checking whether or not scrollbars are visible and increasing again if necessary.
                            TimeUnit.MILLISECONDS.sleep(10);
                        }
                    }

                    return null;
                }

                @Override
                protected void process(java.util.List<String> tasks) {
                    tasks.forEach((thisTask) -> {
                        switch (thisTask) {
                            case "decrease-text-size":
                                menDecreaseTextSizeActionPerformed(null);
                                break;
                            case "increase-text-size":
                                menIncreaseTextSizeActionPerformed(null);
                                break;
                            default:
                                break;
                        }
                    });
                }

                @Override
                protected void done() {
                    setActionsEnabled(true);
                }
            }).execute();
        } else if (!themeUpdated) {
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menMaxTextSizeForScreenActionPerformed

    private void menDeviceTypeLaptopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menDeviceTypeLaptopActionPerformed
        if ((actionsEnabled || (evt == null)) && !manualDeviceType.equals("Laptop")) {
            manualDeviceType = "Laptop";
            manuallySetDeviceType = true;
            forceShowAllTests = false;

            writeToHelperLogFile("Manual Device Type: " + manualDeviceType);

            displayComputerSpecs();
        } else {
            menDeviceTypeLaptop.setSelected(manualDeviceType.equals("Laptop"));
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menDeviceTypeLaptopActionPerformed

    private void menDeviceTypeDesktopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menDeviceTypeDesktopActionPerformed
        if ((actionsEnabled || (evt == null)) && !manualDeviceType.equals("Desktop")) {
            manualDeviceType = "Desktop";
            manuallySetDeviceType = true;
            forceShowAllTests = false;

            writeToHelperLogFile("Manual Device Type: " + manualDeviceType);

            displayComputerSpecs();
        } else {
            menDeviceTypeDesktop.setSelected(manualDeviceType.equals("Desktop"));
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menDeviceTypeDesktopActionPerformed

    private void menDeviceTypeAllInOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menDeviceTypeAllInOneActionPerformed
        if ((actionsEnabled || (evt == null)) && !manualDeviceType.equals("All-in-One")) {
            manualDeviceType = "All-in-One";
            manuallySetDeviceType = true;
            forceShowAllTests = false;

            writeToHelperLogFile("Manual Device Type: " + manualDeviceType);

            displayComputerSpecs();
        } else {
            menDeviceTypeAllInOne.setSelected(manualDeviceType.equals("All-in-One"));
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menDeviceTypeAllInOneActionPerformed

    private void menDeviceTypeMotherboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menDeviceTypeMotherboardActionPerformed
        if ((actionsEnabled || (evt == null)) && !manualDeviceType.equals("Motherboard")) {
            manualDeviceType = "Motherboard";
            manuallySetDeviceType = true;
            forceShowAllTests = false;

            writeToHelperLogFile("Manual Device Type: " + manualDeviceType);

            displayComputerSpecs();
        } else {
            menDeviceTypeMotherboard.setSelected(manualDeviceType.equals("Motherboard"));
            playAlertSound("beep");
        }
    }//GEN-LAST:event_menDeviceTypeMotherboardActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator bottomSeparator;
    private javax.swing.JButton btnCheckDrivers;
    private javax.swing.JButton btnCheckPID;
    private javax.swing.JButton btnCheckPorts;
    private javax.swing.JButton btnCheckRemoteManagement;
    private javax.swing.JButton btnCheckWindowsLicense;
    private javax.swing.JButton btnCredits;
    private javax.swing.JButton btnDoneTesting;
    private javax.swing.JButton btnDriveHealth;
    private javax.swing.JButton btnEjectDiscDrive;
    private javax.swing.JButton btnForgot;
    private javax.swing.JButton btnLogIn;
    private javax.swing.JButton btnReloadSpecs;
    private javax.swing.JButton btnSaveOrPrintSpecs;
    private javax.swing.JButton btnSetConditionAndNotes;
    private javax.swing.JButton btnSetupBIOS;
    private javax.swing.JButton btnStatusHistory;
    private javax.swing.JButton btnStressCPU;
    private javax.swing.JButton btnSystemInfo;
    private javax.swing.JButton btnSystemUpdates;
    private javax.swing.JButton btnTestAudio;
    private javax.swing.JButton btnTestCamera;
    private javax.swing.JButton btnTestInternet;
    private javax.swing.JButton btnTestKeyboard;
    private javax.swing.JButton btnTestMicrophone;
    private javax.swing.JButton btnTestMode;
    private javax.swing.JButton btnTestMouse;
    private javax.swing.JButton btnTestScreen;
    private javax.swing.JButton btnVerifyAudio;
    private javax.swing.JButton btnVerifyBIOS;
    private javax.swing.JButton btnVerifyCPU;
    private javax.swing.JButton btnVerifyCamera;
    private javax.swing.JButton btnVerifyDiscDrive;
    private javax.swing.JButton btnVerifyDriveHealth;
    private javax.swing.JButton btnVerifyDrivers;
    private javax.swing.JButton btnVerifyInternet;
    private javax.swing.JButton btnVerifyKeyboard;
    private javax.swing.JButton btnVerifyMicrophone;
    private javax.swing.JButton btnVerifyMouse;
    private javax.swing.JButton btnVerifyPorts;
    private javax.swing.JButton btnVerifyRemoteManagement;
    private javax.swing.JButton btnVerifyScreen;
    private javax.swing.JButton btnVerifySystemUpdates;
    private javax.swing.JButton btnVerifyWindowsLicense;
    private javax.swing.JPanel contentPane;
    private javax.swing.JScrollPane contentScrollPane;
    private javax.swing.JMenu deviceTypeMenu;
    private javax.swing.JPopupMenu.Separator deviceTypeSeparator;
    private javax.swing.JMenu installAppsMenu;
    private javax.swing.JPopupMenu.Separator installAppsMenuSeparator;
    private javax.swing.JLabel lblAudio;
    private javax.swing.JLabel lblAudioLabel;
    private javax.swing.JLabel lblBatteryCapacity;
    private javax.swing.JLabel lblCPU;
    private javax.swing.JLabel lblCPULabel;
    private javax.swing.JLabel lblDiscDrive;
    private javax.swing.JLabel lblDiscDriveLabel;
    private javax.swing.JLabel lblGPU;
    private javax.swing.JLabel lblGPULabel;
    private javax.swing.JLabel lblModel;
    private javax.swing.JLabel lblModelLabel;
    private javax.swing.JLabel lblMoreTests;
    private javax.swing.JLabel lblOS;
    private javax.swing.JLabel lblPID;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblRAM;
    private javax.swing.JLabel lblRAMLabel;
    private javax.swing.JLabel lblScreen;
    private javax.swing.JLabel lblScreenLabel;
    private javax.swing.JLabel lblSerial;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblStorage;
    private javax.swing.JLabel lblStorageLabel;
    private javax.swing.JLabel lblTasks;
    private javax.swing.JLabel lblTestModeD;
    private javax.swing.JLabel lblTestModeE;
    private javax.swing.JLabel lblTestModeE2;
    private javax.swing.JLabel lblTestModeM;
    private javax.swing.JLabel lblTestModeO;
    private javax.swing.JLabel lblTestModeS;
    private javax.swing.JLabel lblTestModeT;
    private javax.swing.JLabel lblTestModeT2;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JLabel lblVersion;
    private javax.swing.JLabel lblWireless;
    private javax.swing.JLabel lblWirelessLabel;
    private javax.swing.JMenuBar mainMenubar;
    private javax.swing.JMenuItem menCacheDriversWindowsScript;
    private javax.swing.JMenuItem menCopySpecValue;
    private javax.swing.JMenuItem menDecreaseTextSize;
    private javax.swing.JRadioButtonMenuItem menDeviceTypeAllInOne;
    private javax.swing.JRadioButtonMenuItem menDeviceTypeDesktop;
    private javax.swing.JRadioButtonMenuItem menDeviceTypeLaptop;
    private javax.swing.JRadioButtonMenuItem menDeviceTypeMotherboard;
    private javax.swing.JCheckBoxMenuItem menForceShowAllTests;
    private javax.swing.JMenuItem menIncreaseTextSize;
    private javax.swing.JMenuItem menInstallAllApps;
    private javax.swing.JMenuItem menInstallDropbox;
    private javax.swing.JMenuItem menInstallFBReader;
    private javax.swing.JMenuItem menInstallGoogleChrome;
    private javax.swing.JMenuItem menInstallSpotify;
    private javax.swing.JMenuItem menInstallTeamViewer;
    private javax.swing.JMenuItem menInstallZoom;
    private javax.swing.JMenuItem menLogOut;
    private javax.swing.JMenuItem menLogSpecs;
    private javax.swing.JMenuItem menMaxTextSizeForScreen;
    private javax.swing.JMenuItem menOpenFileExplorerPE;
    private javax.swing.JMenuItem menOpenTerminalOrCommandPrompt;
    private javax.swing.JMenuItem menReRunSetupWindowsScript;
    private javax.swing.JMenuItem menReopenRepair;
    private javax.swing.JMenuItem menResetTextSize;
    private javax.swing.JMenuItem menRunCompleteWindowsScript;
    private javax.swing.JMenuItem menRunOemConfig;
    private javax.swing.JMenuItem menSearchSpecValue;
    private javax.swing.JMenuItem menSetDvdDriveRegion;
    private javax.swing.JMenuItem menSetProductType;
    private javax.swing.JSeparator middleSeparator1;
    private javax.swing.JSeparator middleSeparator2;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JPasswordField pswPassword;
    private javax.swing.JMenu scriptsMenu;
    private javax.swing.JPopupMenu.Separator scriptsMenuSeparator;
    private javax.swing.JPopupMenu specValueRightClickMenu;
    private javax.swing.JMenu testsMenu;
    private javax.swing.JMenu textSizeMenu;
    private javax.swing.JSeparator topSeparator;
    private javax.swing.JTextField txtPID;
    private javax.swing.JTextField txtUsername;
    private javax.swing.JMenu utilitiesMenu;
    // End of variables declaration//GEN-END:variables
}
