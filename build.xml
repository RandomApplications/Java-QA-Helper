<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="QA_Helper" default="default" basedir=".">
    <description>Builds, tests, and runs the project QA Helper.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar:                  JAR building
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="QA_Helper-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file.
    -->
    
    <target name="-pre-compile">
        <!-- UIScale Fixed addGaps - SO FIXED SIZED addGap()'s ARE SCALED CORRECTLY ON HiDPI LINUX -->
        <echo message="UIScaling Fixed addGaps"/>
        <exec executable="./Build Scripts/UIScale Fixed addGaps.sh"/>
        
        <!-- Check for Updates -->
        <echo message="Checking for Updates"/>
        <exec executable="./Build Scripts/Check for Updates.sh"/>
    </target>
    
    <target name="-post-jar">
        <!-- https://stackoverflow.com/questions/18451052/how-to-include-jars-in-lib-into-project-jar-file-in-netbeans -->
        
        <property name="store.jar.name" value="QA_Helper"/>
        <property name="store.dir" value="dist"/>
        <property name="temp.dir" value="temp"/>
        <property name="store.jar" value="${store.dir}/${store.jar.name}.jar"/>
        
        <echo message="Packaging ${application.title} into a single JAR at ${store.jar} and zipping"/>
        
        <delete dir="${temp.dir}"/>
        <mkdir dir="${temp.dir}"/>
        
        <jar destfile="${temp.dir}/temp_final.jar" filesetmanifest="skip">
            <zipgroupfileset dir="dist" includes="*.jar"/>
            <zipgroupfileset dir="libs" includes="*.jar"/>
            <manifest>
                <attribute name="Main-Class" value="${main.class}"/>
            </manifest>
        </jar>

        <delete dir="${store.dir}"/>

        <zip destfile="${store.jar}">
            <zipfileset src="${temp.dir}/temp_final.jar" excludes="META-INF/*.SF, META-INF/*.DSA, META-INF/*.RSA"/>
        </zip>
        
        <delete dir="${temp.dir}"/>
        
        <zip basedir="${store.dir}" destfile="${store.dir}/QAHelper-jar.zip" includes="${store.jar.name}.jar"/>
        
        <!-- Create jar for Linux with excludes unnecessary resources -->
        <echo message="Compressing ${store.jar.name}.jar for Linux and zipping"/>
        <mkdir dir="${store.dir}/JAR for Linux"/>
        <zip destfile="${store.dir}/JAR for Linux/${store.jar.name}.jar">
            <zipfileset src="${store.jar}" excludes="Resources/product-key-from-registry.vbs, Resources/qa-helper-icon.ico, Resources/usb.ids"/>
        </zip>
        <zip basedir="${store.dir}/JAR for Linux" destfile="${store.dir}/QAHelper-linux-jar.zip" includes="${store.jar.name}.jar"/>
        <delete dir="${store.dir}/JAR for Linux"/>
        
        <!-- Create jar for Windows with excludes unnecessary resources -->
        <echo message="Compressing ${store.jar.name}.jar for Windows and zipping"/>
        <mkdir dir="${store.dir}/JAR for Windows"/>
        <zip destfile="${store.dir}/JAR for Windows/${store.jar.name}.jar">
            <zipfileset src="${store.jar}" excludes="Resources/hdsentinel-020-x64, Resources/qa-helper-icon.svg, Resources/undo-oem-config-prepare.sh"/>
        </zip>
        <zip basedir="${store.dir}/JAR for Windows" destfile="${store.dir}/QAHelper-windows-jar.zip" includes="${store.jar.name}.jar"/>
        <delete dir="${store.dir}/JAR for Windows"/>
        
        <!-- Create jar for macOS with excludes unnecessary resources -->
        <echo message="Compressing ${store.jar.name}.jar for macOS"/>
        <mkdir dir="${store.dir}/JAR for macOS"/>
        <zip destfile="${store.dir}/JAR for macOS/${store.jar.name}.jar">
            <zipfileset src="${store.jar}" excludes="Resources/hdsentinel-020-x64, Resources/pci.ids, Resources/product-key-from-registry.vbs, Resources/qa-helper-icon.ico, Resources/qa-helper-icon.svg, Resources/undo-oem-config-prepare.sh, Resources/usb.ids"/>
        </zip>
        <!-- Do not zip or delete macOS jar, the following compile script uses it and then cleans up -->
        
        <!-- Compile jar for macOS into macOS App bundle -->
        <echo message="Compiling ${store.jar.name}.jar into App for macOS"/>
        <exec executable="./Build Scripts/Compile QA Helper for Mac.sh"/>
    </target>
</project>
